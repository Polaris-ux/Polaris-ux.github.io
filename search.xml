<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络编程</title>
      <link href="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h5 id="网络编程的目的："><a href="#网络编程的目的：" class="headerlink" title="网络编程的目的："></a>网络编程的目的：</h5><p>传播交流信息，数据交换，通信</p><p>Javaweb：网页编程 B/S</p><p>网络编程：TCP/IP  C/S</p><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20210805234534048.png" class title="image-20210805234534048"><p><strong>两个要点：</strong></p><ol><li>网络编程的两个主要问题<ul><li>如何准确的定位到网络上的一台或多台主机</li><li>找到主机之后如何进行通信</li></ul></li><li>网络编程中的要素<ul><li>IP和端口号</li><li>网络通信协议</li></ul></li></ol><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>ip地址：InetAddress</p><ul><li><p>唯一定位一台网络上计算机</p></li><li><p>127.0.0.1：本机：localhost</p></li><li><p>ip地址的分类</p><ul><li>IPV4/IPV6<ul><li>IPV4 ：127.0.0.1，四个字节组成，42亿；30亿都在北美，亚洲4亿。2011年用尽</li><li>IPV6：128位。8个无符号整数</li></ul></li><li>公网、私网<ul><li>ABCD类地址</li><li>192.168.xxx.xxx，专门给组织内部使用的</li></ul></li></ul></li></ul><h4 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询本机地址</span></span><br><span class="line">            InetAddress inet=InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            System.out.println(inet);</span><br><span class="line">            InetAddress localhost = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            System.out.println(localhost);</span><br><span class="line">            InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(localHost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询网站ip地址</span></span><br><span class="line">            InetAddress baidu = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(baidu);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//常用方法</span></span><br><span class="line">            System.out.println(baidu.getCanonicalHostName()); <span class="comment">//规范的名字</span></span><br><span class="line">            System.out.println(baidu.getHostAddress()); <span class="comment">//ip</span></span><br><span class="line">            System.out.println(baidu.getHostName()); <span class="comment">//域名，或者自己电脑的名字</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口表示计算机上的一个程序的进程</p><ul><li><p>不同的进程有不同的端口号</p></li><li><p>端口范围：0~65535</p></li><li><p>TCP,UDP：65535*2  单个协议下，端口号不能冲突</p></li><li><p>端口分类</p><ul><li>共有端口（尽量不要去占用）<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li><li>Telent：23</li></ul></li><li>程序注册端口：1024~49151,分配用户或者程序<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Oracle：1521</li></ul></li><li>动态、私有：49152~65535</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="comment">#查看所有的端口</span></span><br><span class="line">netstat -ano | findstr <span class="string">&quot;端口号&quot;</span> <span class="comment">#查找指定端口</span></span><br><span class="line">tasklist | find <span class="string">&quot;端口号&quot;</span> <span class="comment">#查看该端口的进程</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p><strong>TCP/IP协议簇：实际上是一组协议</strong></p><p>重要的协议：</p><ul><li>TCP：用户传输协议</li><li>UDP：用户数据报协议</li><li>IP：网络互连协议</li></ul><p><strong>TCP与UDP的对比</strong></p><p>TCP：</p><ul><li>较安全，稳定</li><li>建立连接，需要三次握手、四次挥手</li><li>有客户端和服务端</li><li>传输完成，释放连接，效率低</li></ul><p>UDP：</p><ul><li>不需要建立连接，不安全，不稳定</li><li>客户端和服务端没有明确的界限</li><li>只需要发送，而不需要考虑是否接收到</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>三次握手、四次挥手</p><p>三次握手：</p><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/61d3cf1ecdec434aa1fa677f7037f703.png" class title="在这里插入图片描述"><p>四次挥手</p><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1cc32b58d2794cfda544776c957390c2.png" class title="在这里插入图片描述"><p><strong>三次握手：</strong></p><p>TCP建立连接的过程我们称之为三次握手</p><ul><li><p>第一次握手</p><p>PC1使用一个随机的端口号向PC2的80端口发送连接请求，此过程的典型标志为SYN控制位为1，其它五位为0</p></li><li><p>第二次握手</p><p>PC2收到PC1的请求，向PC1回复确认信息</p><p>并且，PC2也向PC1发送建立连接请求</p></li><li><p>第三次握手</p><p>PC1收到PC2回复，也要向PC2恢复一个确认信息</p></li></ul><p><strong>四次挥手：</strong></p><p>TCP断开连接的过程分为4步，称为四次挥手</p><p>（1）服务器向客户端发送FIN，ACK为1的TCP报文段</p><p>（2）客户端向服务端返回ACK为1的TCP报文段</p><p>（3）客户端向服务器发送FIN,ACK为1的TCP报文段</p><p>（4）服务器向客户端返回ACK为1的TCP报文段</p><p>在TCP断开连接的过程中，有一个半关闭的概念。TCP一段可以中止发送数据，但是仍可以接收数据，称之为半关闭</p><p>（1）客户端发送FIN，半关闭了这个连接。服务器发送ACK接受半关闭</p><p>（2）服务器继续发送数据，而客户端只发送ACK确认，不发送任何数据</p><p>（3）当服务器所有数据传输完毕，就发送FIN报文段，客户再发送ACK报文段，就关闭了TCP连接</p><h3 id="面试题延伸："><a href="#面试题延伸：" class="headerlink" title="面试题延伸："></a>面试题延伸：</h3><h4 id="1、三次握手和四次挥手的本质是什么？"><a href="#1、三次握手和四次挥手的本质是什么？" class="headerlink" title="1、三次握手和四次挥手的本质是什么？"></a>1、三次握手和四次挥手的本质是什么？</h4><p>三次握手的本质是确认通信双方收发数据的能力 。<br>四次挥手的目的是关闭一个连接 。</p><h4 id="2、为什么TCP连接的时候是3次？2次不可以吗？"><a href="#2、为什么TCP连接的时候是3次？2次不可以吗？" class="headerlink" title="2、为什么TCP连接的时候是3次？2次不可以吗？"></a>2、为什么TCP连接的时候是3次？2次不可以吗？</h4><p>因为需要考虑连接时丢包的问题，如果只握手2次，第二次握手时如果服务端发给客户端的确认报文段丢失，此时服务端已经准备好了收发数(可以理解服务端已经连接成功)据，而客户端一直没收到服务端的确认报文，所以客户端就不知道服务端是否已经准备好了(可以理解为客户端未连接成功)，这种情况下客户端不会给服务端发数据，也会忽略服务端发过来的数据。<br>如果是三次握手，即便发生丢包也不会有问题，比如如果第三次握手客户端发的确认ack报文丢失，服务端在一段时间内没有收到确认ack报文的话就会重新进行第二次握手，也就是服务端会重发SYN报文段，客户端收到重发的报文段后会再次给服务端发送确认ack报文。</p><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/a824c1a1d2a34897b11f6dee57b07c81.png" class title="在这里插入图片描述"><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/8d333be52c2347c89be5960f8cd69c7e.png" class title="在这里插入图片描述"><h4 id="3、为什么TCP连接的时候是3次，关闭的时候却是4次？"><a href="#3、为什么TCP连接的时候是3次，关闭的时候却是4次？" class="headerlink" title="3、为什么TCP连接的时候是3次，关闭的时候却是4次？"></a>3、为什么TCP连接的时候是3次，关闭的时候却是4次？</h4><p>因为只有在客户端和服务端都没有数据要发送的时候才能断开TCP。而客户端发出FIN报文时只能保证客户端没有数据发了，服务端还有没有数据发客户端是不知道的。而服务端收到客户端的FIN报文后只能先回复客户端一个确认报文来告诉客户端我服务端已经收到你的FIN报文了，但我服务端还有一些数据没发完，等这些数据发完了服务端才能给客户端发FIN报文(所以不能一次性将确认报文和FIN报文发给客户端，就是这里多出来了一次)。</p><h4 id="4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？"><a href="#4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？" class="headerlink" title="4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？"></a>4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？</h4><p>MSL 指的是 Maximum Segment Lifetime：一段 TCP 报文在传输过程中的最大生命周期。<br>2MSL 即是服务器端发出为 FIN 报文和客户端发出的 ACK 确认报文所能保持有效的最大时长。<br>这里同样是要考虑丢包的问题，如果第四次挥手的报文丢失，服务端没收到确认ack报文就会重发第三次挥手的报文，这样报文一去一回最长时间就是2MSL，所以需要等这么长时间来确认服务端确实已经收到了。</p><h4 id="5、如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#5、如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="5、如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>5、如果已经建立了连接，但是客户端突然出现故障了怎么办？</h4><p>TCP设有一个保活计时器，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><p>TCP实现聊天：</p><p>client:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 15:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//知道服务器的地址，端口号</span></span><br><span class="line">            InetAddress serverIp = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//创建一个socket连接</span></span><br><span class="line">             socket= <span class="keyword">new</span> Socket(serverIp, port);</span><br><span class="line">            <span class="comment">//发送消息 IO流</span></span><br><span class="line">             os= socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            os.write(<span class="string">&quot;你好，欢迎学习Java网络编程&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket server=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//有一个地址</span></span><br><span class="line">            server= <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等待客户端连接</span></span><br><span class="line">            socket= server.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取客户端的消息</span></span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">            baos= <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取内容</span></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(server!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    server.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCP上传文件"><a href="#TCP上传文件" class="headerlink" title="TCP上传文件"></a>TCP上传文件</h4><p>客户端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPUploadFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        FileInputStream fis=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress serverIp = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line">            socket= <span class="keyword">new</span> Socket(serverIp,port);</span><br><span class="line"></span><br><span class="line">            fis= <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/main/resources/thYRKQ7U7R.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            os= socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len=fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通知服务端，已经传输完毕</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line">            bos= <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> len1=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer1=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len1=is.read(buffer1))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer1,<span class="number">0</span>,len1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(bos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPDownload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket= <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">            socket= serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            fos= <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/main/resources/img.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在传输完毕后，向客户端发送消息</span></span><br><span class="line">            os= socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;接受完毕，断开连接&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>发送消息</p><p>发送端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.UDPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//建立一个socket</span></span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送内容</span></span><br><span class="line">            String msg=<span class="string">&quot;服务器，你好&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送给谁</span></span><br><span class="line">            InetAddress address = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//数据，数据的长度起始，要发送给谁</span></span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, address, port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送包</span></span><br><span class="line">            socket.send(packet);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.UDPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 17:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开放端口</span></span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//接收数据包</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//阻塞接收</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line"></span><br><span class="line">            System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>, packet.getLength()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注：</strong>UDP中不存在客户端和服务端的区别，上面代码只是为了凸显出区别</p><h4 id="实现向某个端口发送消息"><a href="#实现向某个端口发送消息" class="headerlink" title="实现向某个端口发送消息"></a>实现向某个端口发送消息</h4><p>发送端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 23:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpChatRoom1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket(<span class="number">9001</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取输入数据</span></span><br><span class="line">            br= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] datas = data.getBytes();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>),<span class="number">9002</span>);</span><br><span class="line"></span><br><span class="line">                socket.send(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(data))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 23:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpChatRoom2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket(<span class="number">9002</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="comment">//接收数据</span></span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length, InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">9001</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//阻塞接收</span></span><br><span class="line">                socket.receive(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                String words = <span class="keyword">new</span> String(data, <span class="number">0</span>, data.length);</span><br><span class="line">                String check = <span class="keyword">new</span> String(data, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                System.out.println(words);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(check))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在线聊天：两个人既可以是接收方也可以是发送方（多线程）"><a href="#在线聊天：两个人既可以是接收方也可以是发送方（多线程）" class="headerlink" title="在线聊天：两个人既可以是接收方也可以是发送方（多线程）"></a>在线聊天：两个人既可以是接收方也可以是发送方（多线程）</h4><p>TalkeSend.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-07 0:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line">    <span class="keyword">private</span> String sendIp;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader br=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkSend</span><span class="params">(<span class="keyword">int</span> fromPort,<span class="keyword">int</span> toPort,String sendIp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket=<span class="keyword">new</span> DatagramSocket(fromPort);</span><br><span class="line">            <span class="keyword">this</span>.fromPort=fromPort;</span><br><span class="line">            <span class="keyword">this</span>.toPort=toPort;</span><br><span class="line">            <span class="keyword">this</span>.sendIp=sendIp;</span><br><span class="line">            br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] info = data.getBytes();</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(info, <span class="number">0</span>, info.length,<span class="keyword">new</span> InetSocketAddress(sendIp,toPort));</span><br><span class="line"></span><br><span class="line">                socket.send(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(data))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(br!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TalkReceive.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-07 0:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String receiveIp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> receivePort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(String receiveIp, <span class="keyword">int</span> receivePort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.receiveIp = receiveIp;</span><br><span class="line">            <span class="keyword">this</span>.receivePort = receivePort;</span><br><span class="line">            socket=<span class="keyword">new</span> DatagramSocket(<span class="keyword">this</span>.receivePort);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">                socket.receive(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line"></span><br><span class="line">                String info = <span class="keyword">new</span> String(data, <span class="number">0</span>, data.length);</span><br><span class="line"></span><br><span class="line">                String check = <span class="keyword">new</span> String(data, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                String hostName = packet.getAddress().getHostName();</span><br><span class="line"></span><br><span class="line">                System.out.println(hostName+<span class="string">&quot;:&quot;</span>+info);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(check))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Talker1.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Talker1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">9999</span>,<span class="number">9001</span>,<span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="string">&quot;localhost&quot;</span>,<span class="number">9003</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Talker2.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Talker2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">9002</span>,<span class="number">9003</span>,<span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="string">&quot;localhost&quot;</span>,<span class="number">9001</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="URL：统一资源定位符"><a href="#URL：统一资源定位符" class="headerlink" title="URL：统一资源定位符"></a>URL：统一资源定位符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/helloworld/index.jsp?username=zhangsan&amp;password=1562&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取协议</span></span><br><span class="line">            System.out.println(url.getProtocol());</span><br><span class="line">            <span class="comment">//主机ip</span></span><br><span class="line">            System.out.println(url.getHost());</span><br><span class="line">            <span class="comment">//主机端口</span></span><br><span class="line">            System.out.println(url.getPort());</span><br><span class="line">            <span class="comment">//文件</span></span><br><span class="line">            System.out.println(url.getPath());</span><br><span class="line">            <span class="comment">//全路径</span></span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line">            <span class="comment">//参数</span></span><br><span class="line">            System.out.println(url.getQuery());</span><br><span class="line">            System.out.println(url.getUserInfo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用URL下载资源"><a href="#用URL下载资源" class="headerlink" title="用URL下载资源"></a>用URL下载资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-07 14:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDownLoad</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpURLConnection urlConnection=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/netsource/SecurityFile.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            urlConnection= (HttpURLConnection)url.openConnection();</span><br><span class="line"></span><br><span class="line">            String file = url.getFile();</span><br><span class="line">            String fileName=file.substring(file.lastIndexOf(<span class="string">&quot;/&quot;</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            is= urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">            fos= <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/main/resources/loadsource/&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(urlConnection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建cdh</title>
      <link href="/2021/08/03/%E6%90%AD%E5%BB%BAcdh/"/>
      <url>/2021/08/03/%E6%90%AD%E5%BB%BAcdh/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7部署CDH6-3-2集群"><a href="#Centos7部署CDH6-3-2集群" class="headerlink" title="Centos7部署CDH6.3.2集群"></a>Centos7部署CDH6.3.2集群</h1><h3 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h3><p>官方文档：<a href="https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_requirements_supported_versions.html">https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_requirements_supported_versions.html</a></p><h3 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h3><h3 id="1、硬件"><a href="#1、硬件" class="headerlink" title="1、硬件"></a>1、硬件</h3><p>Linux发行版本：CentOS 7.6</p><p>查看Linux系统版本命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a <span class="comment">#适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版。</span></span><br><span class="line">cat /etc/redhat-release <span class="comment">#只适合Redhat系的Linux</span></span><br><span class="line">cat /etc/issue <span class="comment">#适用于所有的Linux发行版</span></span><br></pre></td></tr></table></figure><p>查看Linux内核版本命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>查看内存大小</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -m <span class="comment">#按M显示</span></span><br><span class="line">free -g <span class="comment">#按G显示</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>公网IP</th><th>内网IP</th><th>Host</th><th>CPU</th><th>Memory</th><th>DIsk</th></tr></thead><tbody><tr><td>47.97.81.73</td><td>172.16.3.40</td><td>bigdata01</td><td>2核</td><td>16G</td><td>100G</td></tr><tr><td>101.37.78.42</td><td>172.16.3.39</td><td>bigdata02</td><td>2核</td><td>8G</td><td>100G</td></tr><tr><td>47.97.81.53</td><td>172.16.3.41</td><td>bigdata03</td><td>2核</td><td>8G</td><td>100G</td></tr></tbody></table><h3 id="2、安装包下载"><a href="#2、安装包下载" class="headerlink" title="2、安装包下载"></a>2、安装包下载</h3><p><strong>CM6.3.1</strong></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-db-2-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-db-2-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/enterprise-debuginfo-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/enterprise-debuginfo-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm</a></p><p><strong>CDH6.3.2  Parcel</strong></p><p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel">https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel</a></p><p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el6.parcel.sha256">https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el6.parcel.sha256</a></p><p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/manifest.json">https://archive.cloudera.com/cdh6/6.3.2/parcels/manifest.json</a></p><p> <strong>MySQL  JDBC  jar</strong></p><p><a href="http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar">http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar</a></p><p><strong>ext-2.2.zip</strong>解决oozie web UI报错问题</p><p><a href="http://archive.cloudera.com/gplextras/misc/ext-2.2.zip">http://archive.cloudera.com/gplextras/misc/ext-2.2.zip</a></p><p>下载后上传cm6.3.1和cdh6.3.2这两个目录到hadoop01主节点的/root（可自己选择）目录</p><h3 id="三、环境准备"><a href="#三、环境准备" class="headerlink" title="三、环境准备"></a>三、环境准备</h3><p>所有节点先安装一些实用的小工具</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装vim编辑器</span></span><br><span class="line">yum install -y vim</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.安装lrzsz文件传输工具</span></span><br><span class="line">yum -y install lrzsz</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.安装wget文件下载工具</span></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.安装netstat，查看端口监听状况：   netstat -ntlp | grep 端口号</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.下载unzip解压工具，解压命令：  uzip 压缩包.zip -d 解压目录</span></span><br><span class="line">yum install -y unzip zip</span><br></pre></td></tr></table></figure><h3 id="1、关闭防火墙"><a href="#1、关闭防火墙" class="headerlink" title="1、关闭防火墙"></a>1、关闭防火墙</h3><p><strong>所有节点都需要执行</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.临时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.永久关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.临时开启防火墙</span></span><br><span class="line"><span class="comment">#systemctl start firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.开机启用防火墙</span></span><br><span class="line"><span class="comment">#systemctl enable firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#临时关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#永久关闭selinux</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line"><span class="comment">#将SELINUX=enforcing改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看selinux状态</span></span><br><span class="line">getenforce 0</span><br></pre></td></tr></table></figure><h4 id="2、修改主机名"><a href="#2、修改主机名" class="headerlink" title="2、修改主机名"></a>2、修改主机名</h4><p><strong>所有节点都要执行，修改后需要重启节点</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br><span class="line"><span class="comment">#分别改名为</span></span><br><span class="line">bigdata01.baicdt.com</span><br><span class="line">bigdata02.baicdt.com</span><br><span class="line">bigdata03.baicdt.com</span><br></pre></td></tr></table></figure><h4 id="3、配置hosts文件"><a href="#3、配置hosts文件" class="headerlink" title="3、配置hosts文件"></a>3、配置hosts文件</h4><p><code>vim /etc/hosts</code></p><p><strong>所有节点都要配置</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">172.16.3.40 bigdata01.baicdt.com        bigdata01</span><br><span class="line">172.16.3.41 bigdata03.baicdt.com        bigdata03</span><br><span class="line">172.16.3.39 bigdata02.baicdt.com        bigdata02</span><br></pre></td></tr></table></figure><h4 id="4、配置免密登录"><a href="#4、配置免密登录" class="headerlink" title="4、配置免密登录"></a>4、配置免密登录</h4><p><em><strong>第一步：三台节点生成公钥与私钥</strong></em></p><p>在三台机器执行以下命令，生成公钥与私钥</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行下面的命令之后，要连续按三个回车</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><em><strong>第二步：拷贝公钥到同一台节点</strong></em></p><p>三台机器将拷贝公钥到第一台服务器，三台服务器执行命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id hadoop01</span><br></pre></td></tr></table></figure><p><em><strong>第三步：复制第一台服务器的认证到其他服务器</strong></em></p><p>将第一台机器的公钥拷贝到其他机器上，在第一台机器上面执行以下命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp /root/.ssh/authorized_keys hadoop02:/root/.ssh</span><br><span class="line">scp /root/.ssh/authorized_keys hadoop03:/root/.ssh</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">ssh-copy-id root@xxx</span><br></pre></td></tr></table></figure><p>###5、设置时间同步</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看时区</span></span><br><span class="line">date-</span><br><span class="line"><span class="comment">#设置时区为Asia/Shanghai</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否安装了ntpd的服务</span></span><br><span class="line">rpm -qa  | grep  ntpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有安装,可以进行在线安装</span></span><br><span class="line">yum -y install ntp</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动ntpd的服务</span></span><br><span class="line">service  ntpd  start</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置ntpd的服务开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ntpd的服务是否启动</span></span><br><span class="line">service  ntpd  status</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置定时任务</span></span><br><span class="line"><span class="comment">#与阿里云服务器进行时钟同步</span></span><br><span class="line">crontab  -e</span><br><span class="line"><span class="comment">#设置的内容如下</span></span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate -u ntp4.aliyun.com;</span><br></pre></td></tr></table></figure><p>设置成功后会一直出现<code>You have new mail in /var/spool/mail/root</code>的邮件提示，可使用下面命令关闭邮件提示</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;unset MAILCHECK&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="6、主节点bigdata01部署MySQL5-7"><a href="#6、主节点bigdata01部署MySQL5-7" class="headerlink" title="6、主节点bigdata01部署MySQL5.7"></a>6、主节点bigdata01部署MySQL5.7</h3><h4 id="第一步：彻底卸载系统原装的MySQL"><a href="#第一步：彻底卸载系统原装的MySQL" class="headerlink" title="第一步：彻底卸载系统原装的MySQL"></a>第一步：彻底卸载系统原装的MySQL</h4><p>1.使用以下命令查看当前安装mysql情况，查找以前是否装有mysql</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p>2.如果查询到已安装mysql需停止mysql服务并删除之前安装的mysql</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止mysql服务</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除软件命令</span></span><br><span class="line">rpm -e –nodeps 包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果上面命令提示依赖包错误，则使用以下命令尝试：</span></span><br><span class="line">rpm -ev 包名 --nodeps</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果还报错：error: %preun(xxxxxx) scriptlet failed, exit status 1，则用以下命令尝试：</span></span><br><span class="line">rpm -e --noscripts 包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#最终再使用rpm -qa|grep -i mysql命令，查询不到结果则证明mysql已卸载</span></span><br></pre></td></tr></table></figure><p>3.查找之前老版本mysql的目录、并且删除老版本mysql的文件和库</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找卸载残留的mysql的目录</span></span><br><span class="line">find / -name mysql    <span class="comment">#然后使用 rm -rf 将查询到的目录全部删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除老版本mysql的配置文件</span></span><br><span class="line">rm -rf /etc/my.cnf</span><br><span class="line">rm -rf /etc/my.cnf.d</span><br></pre></td></tr></table></figure><h4 id="第二步：yum源设置为阿里源"><a href="#第二步：yum源设置为阿里源" class="headerlink" title="第二步：yum源设置为阿里源"></a>第二步：yum源设置为阿里源</h4><p>使用阿里的镜像源安装MySQL时下载速度比较快</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.备份原镜像文件，便于后期恢复</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.下载阿里云的CentOS-Base.repo 到/etc/yum.repos.d/</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 清除缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h4 id="第三步：下载配置MySQL的rpm安装包"><a href="#第三步：下载配置MySQL的rpm安装包" class="headerlink" title="第三步：下载配置MySQL的rpm安装包"></a>第三步：下载配置MySQL的rpm安装包</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /baicdt/softwares/mysql_rpm</span><br><span class="line"><span class="built_in">cd</span> /baicdt/softwares/mysql_rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里下载的是5.7的版本</span></span><br><span class="line"><span class="comment">#下载并安装MySQL官方的 Yum Repository</span></span><br><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">##2.安装mysql源</span></span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装MySQL</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><h4 id="第四步：启动mysql服务"><a href="#第四步：启动mysql服务" class="headerlink" title="第四步：启动mysql服务"></a>第四步：启动mysql服务</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.临时启动mysql服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.开机启动mysql服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查看MySQL的启动状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查看mysql进程是否正常开启</span></span><br><span class="line">ps -le | grep mysqld</span><br></pre></td></tr></table></figure><h4 id="第五步：修改mysql中root本地登录密码"><a href="#第五步：修改mysql中root本地登录密码" class="headerlink" title="第五步：修改mysql中root本地登录密码"></a>第五步：修改mysql中root本地登录密码</h4><p>mysql安装完成之后，在<code>/var/log/mysqld.log</code>文件中给root生成了一个默认密码。通过以下命令找到密码：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-- 登录MySQL，使用刚才找到的密码</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">-- 修改root用户密码（二选一）</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Wsygzgr_2020&#x27;</span>;</span><br></pre></td></tr></table></figure><p> 这里有个问题，新密码设置的时候如果设置的过于简单会报错：</p><img src="/2021/08/03/%E6%90%AD%E5%BB%BAcdh/image-20210803172929405.png" class title="image-20210803172929405"><p> MySQL完整的初始密码规则可以通过如下命令查看：</p><p><code>show variables like &#39;%validate_password%&#39;;</code></p><img src="/2021/08/03/%E6%90%AD%E5%BB%BAcdh/image-20210803173314576.png" class title="image-20210803173314576"><p>可以修改里面的值来修改密码策略</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_length=1;</span><br></pre></td></tr></table></figure><p>但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y remove mysql57-community-release-el7-10.noarch</span><br></pre></td></tr></table></figure><h4 id="第六步：修改mysql配置文件"><a href="#第六步：修改mysql配置文件" class="headerlink" title="第六步：修改mysql配置文件"></a>第六步：修改mysql配置文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf   </span><br></pre></td></tr></table></figure><p>在配置文件中添加下面的内容：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为服务器是测试环境，为了方便记mysql密码，关闭了密码策略。如果是生产环境，则不建议修改密码策略</span></span><br><span class="line">validate_password=off</span><br><span class="line"></span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br></pre></td></tr></table></figure><p>重新启动mysql服务使配置生效：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新设置mysql密码为123456</span></span><br><span class="line">mysql -u root -pWsygzgr_2020</span><br></pre></td></tr></table></figure><p>修改root用户密码</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>MySQL默认配置文件路径：</p><ul><li>配置文件：   /etc/my.cnf</li><li>日志文件：   /var/log//var/log/mysqld.log</li><li>服务启动脚本： /usr/lib/systemd/system/mysqld.service</li><li>socket文件：  /var/run/mysqld/mysqld.pid</li></ul><h4 id="第七步：允许root用户远程登录"><a href="#第七步：允许root用户远程登录" class="headerlink" title="第七步：允许root用户远程登录"></a>第七步：允许root用户远程登录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><strong>以下内容了解</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-- 指定特定的IP，开启root用户远程连接</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;指定的IP&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root用户的密码&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">-- 一般为了安全起见，会创建专用的远程访问用户</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;dadeity&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;daDeity@163.com&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h4 id="第八步：创建CDH源数据库、用户、服务的数据库"><a href="#第八步：创建CDH源数据库、用户、服务的数据库" class="headerlink" title="第八步：创建CDH源数据库、用户、服务的数据库"></a>第八步：创建CDH源数据库、用户、服务的数据库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE scm DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;scm&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;scm&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON scm.* TO <span class="string">&#x27;scm&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;scm&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;scm&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;scm&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE amon DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;amon&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;amon&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON amon.* TO <span class="string">&#x27;amon&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;amon&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;amon&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;amon&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE hive DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;hive&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON hive.* TO <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hive&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hive&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE hue DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;hue&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;hue&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON hue.* TO <span class="string">&#x27;hue&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hue&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;hue&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hue&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE oozie DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;oozie&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;oozie&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON oozie.* TO <span class="string">&#x27;oozie&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;oozie&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;oozie&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;oozie&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">-- 刷新mysql的权限列表 </span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="7、创建本地YUM仓库"><a href="#7、创建本地YUM仓库" class="headerlink" title="7、创建本地YUM仓库"></a>7、创建本地YUM仓库</h3><p>确保已经把cm6.3.1、cdh6.3.2、mysql-connector-java-5.1.46.jar和ext-2.2.zip已经上传到了bigdata01服务器的/root(写自己的)目录下</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y createrepo</span><br><span class="line"><span class="built_in">cd</span> /root/cm6.3.1/</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：下面的命令最后带一个点，最后会生成一个repodata目录</span></span><br><span class="line">createrepo .</span><br></pre></td></tr></table></figure><p><strong>配置Web服务器</strong></p><p>将cdh6.3.2目录和cm6.3.1目录 移动到/var/www/html目录下, 使得用户可以通过HTTP访问这些rpm包。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在bigdata01服务器下操作</span></span><br><span class="line"><span class="built_in">cd</span> /root/cdh6.3.2</span><br><span class="line">mv CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha256 CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha</span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">mkdir -p /var/www/html</span><br><span class="line">mv cdh6.3.2 /var/www/html</span><br><span class="line">mv cm6.3.1 /var/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装httpd服务</span></span><br><span class="line">yum install -y httpd</span><br><span class="line"><span class="comment">#启动httpd服务</span></span><br><span class="line">systemctl start httpd</span><br><span class="line"><span class="comment">#设置httpd服务开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line"><span class="comment">#查看httpd服务是否启动</span></span><br><span class="line">ps -ef | grep httpd</span><br><span class="line"></span><br><span class="line">vim /etc/yum.repos.d/os.repo</span><br><span class="line"><span class="comment">#以下为文件内容</span></span><br><span class="line">[osrepo]</span><br><span class="line">name=os_repo</span><br><span class="line">baseurl=http://hadoop01.baicdt.com/cm6.3.1</span><br><span class="line">enabled=<span class="literal">true</span></span><br><span class="line">gpgcheck=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将os.repo文件copy到另外两台服务器上</span></span><br><span class="line"><span class="comment">#因为默认端口为22,所以需要指定端口号</span></span><br><span class="line">scp -P 9122 os.repo bigdata01:/etc/yum.repos.d/os.repo</span><br><span class="line">scp -P 9122 os.repo bigdata02:/etc/yum.repos.d/os.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#所有服务器都执行</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line"><span class="comment">#hadoop01主节点执行</span></span><br><span class="line">    vim /etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="comment">#在&lt;IfModule mime_module&gt;中修改以下内容</span></span><br><span class="line"><span class="comment">#把第284行的 AddType application/x-gzip .gz .tgz 修改为: </span></span><br><span class="line">AddType application/x-gzip .gz .tgz .parcel</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启httpd服务 </span></span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>经过以上配置，下面网址可正常访问</p><p><a href="http://bigdata01.baicdt.com/cdh6.3.2/">http://bigdata01.baicdt.com/cdh6.3.2/</a><br><a href="http://bigdata01.baicdt.com/cm6.3.1/">http://bigdata01.baicdt.com/cm6.3.1/</a></p><h3 id="8、所有服务器安装JDK"><a href="#8、所有服务器安装JDK" class="headerlink" title="8、所有服务器安装JDK"></a>8、所有服务器安装JDK</h3><p><strong>第一步：</strong>安装官方提供的JDK</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y oracle-j2sdk1.8-1.8.0+update181-1.x86_64</span><br></pre></td></tr></table></figure><p><strong>第二步：</strong>配置jdk的环境变量</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><strong>第三步：</strong>添加mysql驱动包</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/share/java</span><br><span class="line">mv /root/mysql-connector-java-5.1.46.jar /usr/share/java/</span><br><span class="line"><span class="built_in">cd</span> /usr/share/java/</span><br><span class="line">mv mysql-connector-java-5.1.46.jar mysql-connector-java.jar</span><br></pre></td></tr></table></figure><p>注意：以上三步在所有服务器都要配置</p><h3 id="四、Cloudera-Manager-部署"><a href="#四、Cloudera-Manager-部署" class="headerlink" title="四、Cloudera Manager 部署"></a>四、Cloudera Manager 部署</h3><h4 id="第一步：安装CM-server-及agent"><a href="#第一步：安装CM-server-及agent" class="headerlink" title="第一步：安装CM server 及agent"></a>第一步：安装CM server 及agent</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装python27，解决安装过程中Hue无法访问数据库问题</span></span><br><span class="line">yum install -y centos-release-scl</span><br><span class="line">yum install -y python27 python27-devel</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install cloudera-manager-daemons</span><br><span class="line">yum -y install cloudera-manager-agent</span><br><span class="line"></span><br><span class="line"><span class="comment">#仅hadoop01服务器安装cloudera-manager-server</span></span><br><span class="line">yum -y install cloudera-manager-server</span><br></pre></td></tr></table></figure><h4 id="第二步：所有节点修改agent配置"><a href="#第二步：所有节点修改agent配置" class="headerlink" title="第二步：所有节点修改agent配置"></a>第二步：所有节点修改agent配置</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/cloudera-scm-agent/config.ini</span><br><span class="line"><span class="comment">#修改文件中server_host的属性值</span></span><br><span class="line">server_host=bigdata01.baicat.com</span><br></pre></td></tr></table></figure><h4 id="第三步：初始化scm数据库"><a href="#第三步：初始化scm数据库" class="headerlink" title="第三步：初始化scm数据库"></a>第三步：初始化scm数据库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hadoop01主节点执行</span></span><br><span class="line">/opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scm scm</span><br></pre></td></tr></table></figure><p>结果为：<code>All done, your SCM database is configured correctly!</code>，表示初始化成功。</p><h4 id="第四步：启动CM-server及agent"><a href="#第四步：启动CM-server及agent" class="headerlink" title="第四步：启动CM server及agent"></a>第四步：启动CM server及agent</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bigdata01主节点启动CM server</span></span><br><span class="line">systemctl start cloudera-scm-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动日志目录为/var/log/cloudera-scm-server/ </span></span><br><span class="line"><span class="built_in">cd</span> /var/<span class="built_in">log</span>/cloudera-scm-server/ </span><br><span class="line">tail cloudera-scm-server.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#所有节点启动CM agent</span></span><br><span class="line">systemctl start cloudera-scm-agent </span><br></pre></td></tr></table></figure><p>这里会报错，提示Jdk找不到，解决办法</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/java</span><br><span class="line">ln -s /opt/jdk1.8  /usr/java/default</span><br></pre></td></tr></table></figure><p><strong>web页面：</strong>     <a href="http://bigdata01:7180/">http://bigdata01:7180/</a></p><p><strong>默认登录账号：</strong>admin</p><p><strong>默认登录密码：</strong>admin</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 大数据 </category>
          
          <category> cdh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdh,大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索数数量</title>
      <link href="/2021/08/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%95%B0%E6%95%B0%E9%87%8F/"/>
      <url>/2021/08/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%95%B0%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数</p><p><strong>示例1：</strong></p><img src="/2021/08/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%95%B0%E6%95%B0%E9%87%8F/uniquebstn3.jpg" class title="img"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 19</code></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>思路一：</p><p>看到这道题目的第一个念头是用数学公式直接进行计算（后面确实也是通过公式计算通过），因为在数据结构这门课上，曾讲过这个计算二叉树种类的公式，所以自然而然的想到了用公式解决问题。（但感觉自己还是缺乏思考，没能想到用动态规划😀）</p><p><strong>卡塔兰数公式：</strong><br>$$<br>C0=1,Cn+1=2(2n+1)Cn/n+2<br>$$<br>使用这个方法时需要注意类型要使用long，<strong>不然会溢出，从而导致错误答案</strong></p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public int <span class="function"><span class="title">numTrees</span>(<span class="params">int n</span>)</span> &#123;</span><br><span class="line">    long num2=<span class="number">1</span>;</span><br><span class="line">    int temp=<span class="number">2</span>*n;</span><br><span class="line">    int temp1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>,j=<span class="number">1</span>; i &lt;n &amp;&amp;j&lt;=n; i++,j++) &#123;</span><br><span class="line">        num2*=temp;</span><br><span class="line">        <span class="keyword">if</span>(num2%j==<span class="number">0</span>)&#123;</span><br><span class="line">            num2=num2/j;</span><br><span class="line">            temp1=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp1*=j;</span><br><span class="line">        &#125;</span><br><span class="line">        temp--;</span><br><span class="line">    &#125;</span><br><span class="line">    long sum=num2/(temp1*(n+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        long C = 1;</span></span><br><span class="line">    <span class="comment">//        for (int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">    <span class="comment">//            C = C * 2 * (2 * i + 1) / (i + 2);</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        return (int) C;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (int)sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路二：</strong></p><p>动态规划解决：将一颗二叉搜索树，分为三部分，根节点，左子树和右子树，而每个不同的根节点，所能构成的二叉搜索树种数为左子树构成二叉搜索数的种类 * 右子树构成二叉搜索树的种类</p><p><strong>状态转移方程：</strong><br>$$<br>dp[i]=sum(dp[i-j]*dp[j-1])<br>i=1 … n<br>$$<br>i为当前的节点个数</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//n==0时，dp[n]=1;n==1时,dp[n]=1</span></span><br><span class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=i; j++) &#123;</span><br><span class="line">                dp[i]+=dp[i-j]*dp[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划,二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接模板</title>
      <link href="/2021/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="从properties文件中读取mysql配置信息，编写JDBCUtils"><a href="#从properties文件中读取mysql配置信息，编写JDBCUtils" class="headerlink" title="从properties文件中读取mysql配置信息，编写JDBCUtils"></a>从properties文件中读取mysql配置信息，编写JDBCUtils</h3><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>jdbc.properties</p><p>时区设置：<code>Asia/Shanghai</code></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">mjy600811</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/girls?useSSL=false&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br></pre></td></tr></table></figure><h4 id="JDBCUtils-java"><a href="#JDBCUtils-java" class="headerlink" title="JDBCUtils.java"></a>JDBCUtils.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        Properties prop=<span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driver = prop.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSource</span><span class="params">(Connection conn, PreparedStatement pre, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pre.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> mysql连接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql,模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp网站登录（简易）</title>
      <link href="/2021/07/31/jsp%E7%BD%91%E7%AB%99%E7%99%BB%E5%BD%95%EF%BC%88%E7%AE%80%E6%98%93%EF%BC%89/"/>
      <url>/2021/07/31/jsp%E7%BD%91%E7%AB%99%E7%99%BB%E5%BD%95%EF%BC%88%E7%AE%80%E6%98%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>实现功能</strong>：</p><p>实现一个简易的网站登录访问页面：页面只有在登录的时候才能访问，若未登录无法访问。</p><p><strong>主要知识点：</strong></p><ul><li>jsp跳转、servlet</li><li>filter过滤器</li></ul><h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jstl表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>LoginServlet.Java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        String us=(String)session.getAttribute(<span class="string">&quot;USER_SESSION&quot;</span>);</span><br><span class="line">        System.out.println(us);</span><br><span class="line">        <span class="comment">//判断是否登录：若登录则直接跳转到页面</span></span><br><span class="line">        <span class="keyword">if</span>(us==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(req.getParameter(<span class="string">&quot;username&quot;</span>)))&#123;</span><br><span class="line">                session.setAttribute(<span class="string">&quot;USER_SESSION&quot;</span>, session.getId());</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/filter/turnto/success.jsp&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/filter/error/mistake.jsp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/filter/turnto/success.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LogoutServlet.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;USER_SESSION&quot;</span>);</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/filter/login/login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RequestFilter.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp=(HttpServletResponse) response;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">&quot;USER_SESSION&quot;</span>)==<span class="keyword">null</span>)&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/filter/login/login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录界面&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/filter/servlet/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;欢迎您，使用本产品&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;../index.jsp&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;../servlet/logout&quot;</span> methods=<span class="string">&quot;get&quot;</span>&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;主页&lt;/h1&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/filter/login/login.jsp&quot;</span>&gt;登录&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>web.xml中配置过滤器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.mjy.filter.RequestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/turnto/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> Javaweb </category>
          
          <category> jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 登录过程,filter,jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子序列和</title>
      <link href="/2021/07/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/"/>
      <url>/2021/07/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1]</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例5：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-100000]</span><br><span class="line">输出：-100000</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><p><strong>思路：</strong></p><p>动态规划：根据题目中的条件推出状态转移方程</p><p><code>dp[i]=max(dp[i-1]+nums[i],nums[i])</code></p><p>及对当前元素判断之前的子序列和是否对其有增益，若有增益则dp[i-1]+nums[i];如无增益，则等于自身的值</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//状态转义方程max(dp[i-1]+nums[i],nums[i])：判断dp[i]对nums[i]是否是负增益，若为负增益则重置dp[i]的值</span></span><br><span class="line">        <span class="comment">//自己的错误思路：考虑的是nums[i]对dp[i]是否有增益导致状态转移方程出错</span></span><br><span class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i]=Math.max(dp[i-<span class="number">1</span>]+nums[i],nums[i]);</span><br><span class="line">            max=max&gt;dp[i]? max:dp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组,动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb验证码</title>
      <link href="/2021/07/27/Javaweb%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2021/07/27/Javaweb%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h4 id="后端实现验证码生成代码："><a href="#后端实现验证码生成代码：" class="headerlink" title="后端实现验证码生成代码："></a>后端实现验证码生成代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//让浏览器自动刷新</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>, <span class="number">30</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D graphics = (Graphics2D) image.getGraphics();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        graphics.setColor(Color.cyan);</span><br><span class="line">        graphics.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        graphics.setColor(Color.green);</span><br><span class="line">        graphics.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.CENTER_BASELINE,<span class="number">20</span>));</span><br><span class="line">        graphics.drawString(createRandomNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,resp.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createRandomNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String s = random.nextInt(<span class="number">9999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuilder sbl = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> - s.length(); i++) &#123;</span><br><span class="line">            sbl.append(<span class="string">&quot;&quot;</span>+random.nextInt(<span class="number">9</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sbl.toString()+s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet,数字验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb文件下载</title>
      <link href="/2021/07/27/Javaweb%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2021/07/27/Javaweb%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="下载文件步骤"><a href="#下载文件步骤" class="headerlink" title="下载文件步骤"></a>下载文件步骤</h4><ul><li>获取下载文件的路径</li><li>下载的文件名</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区中</li><li>使用OutputStream将缓冲区的数据输出到客户端</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFileServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//获取文件的路径</span></span><br><span class="line">        String realPath =<span class="string">&quot;D:\\JavaLearn\\project\\Javaweb\\Javawebcode1\\httpServletResponse\\target\\classes\\img\\黑色.jpg&quot;</span>;</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//让浏览器能够支持（Content-Disposition）下载我们需要的东西,中文文件名需要使用URLEncoder编码，否则有可能乱码</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        <span class="comment">//获取文件输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//获取输出流</span></span><br><span class="line">        ServletOutputStream os = resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] arr=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(arr))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(arr,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭输入输出流</span></span><br><span class="line">        os.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传,servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题</title>
      <link href="/2021/07/26/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/07/26/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>请你谈谈网站是如何进行访问的：</strong></p><ol><li>在浏览器输入域名：回车</li><li>浏览器会查找本机的<strong>C:\Windows\System32\drivers\etc</strong>目录下的<strong>hosts文件</strong>中有没有这个域名的映射<ul><li>有：获取对应的ip地址，通过这个ip，我们可以访问到想要访问的web程序</li><li>没有：去DNS域名解析服务器中找是否存在输入域名，若找到，则返回ip并对该ip进行访问；若没找到，就返回未找到</li></ul></li></ol><p><strong>当浏览器中地址栏输入地址并回车的一瞬间到页面能够显示出来，经历了什么？</strong></p><p>作为客户端，浏览器接收到地址之后，首先会到windows系统文件hosts中查找是否有需要劫持的ip地址，若没有则需要询问DNS域名解析服务器该域名对应的ip地址。（DNS缓存）<br>浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存</p><p>获取到正确的ip地址后，客户端会与服务器建立TCP连接（三次握手），（网络层、数据链路层、物理层）</p><p>客户端向服务端发送请求，包含请求行、请求头、请求正文。多种请求方式（GET，POST、PUT等）</p><p>服务端处理请求，并返回响应，包含状态码、响应头、响应体</p><p>浏览器收到响应，解析渲染页面，展示出来</p><p>断开连接（http1.0短连接，http1.1长连接）</p><p><strong>请你聊聊重定向与转发的区别：</strong></p><img src="/2021/07/26/Java%E9%9D%A2%E8%AF%95%E9%A2%98/image-20210727000815878.png" class title="image-20210727000815878"><p>相同点：</p><ul><li>都能实现页面跳转</li></ul><p>不同点：</p><ul><li>请求转发的时候，url不会发生变化</li><li>重定向的时候，url地址栏会发生变化</li><li>重定向需要两次请求，请求转发需要一次请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java </category>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试,Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列</title>
      <link href="/2021/07/25/%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2021/07/25/%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[[0,1],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>这个题目意思很简单易懂，就是获取所给数组的所有的排列方式，注意这里<strong>的所有</strong>，基本上涉及到求”所有”的题目都能通过回溯法解决</p><p>话不多说，贴代码</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回溯法（一般求所有情况下，回溯法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullPermutation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FullPermutation test=<span class="keyword">new</span> FullPermutation();</span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(test.permute(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Deque&lt;Integer&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个标记数组，标记该元素是否已经使用过</span></span><br><span class="line">        <span class="keyword">int</span>[] flag=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        backtrack(nums,list,<span class="number">0</span>,deque,flag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums,List&lt;List&lt;Integer&gt;&gt; list,<span class="keyword">int</span> index,Deque&lt;Integer&gt; deque,<span class="keyword">int</span>[] flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==nums.length)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(deque));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                deque.addLast(nums[i]);</span><br><span class="line">                flag[i]=<span class="number">1</span>;</span><br><span class="line">                backtrack(nums,list,index+<span class="number">1</span>,deque,flag);</span><br><span class="line">                deque.removeLast();</span><br><span class="line">                flag[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,回溯法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase简单学习</title>
      <link href="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Hbase简单记录"><a href="#Hbase简单记录" class="headerlink" title="Hbase简单记录"></a>Hbase简单记录</h1><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>Hbase是一个开源的、分布式的、版本化的非关系型数据库，它利用Hadoop分布式文件系统（HDFS）提供分布式数据存储。</p><p>HBase是一个可以进行随机访问的存取和检索数据的存储平台，存储结构化和半结构化的数据，因此一般的网站可以将网页内容和日志信息都存在HBase里。</p><p>如果数据量不是非常庞大，HBase甚至可以存储非结构化的数据。它不要求数据有预定义的模式，允许动态和灵活的数据模型，也不限制存储数据的类型。</p><p>HBase是非关系型数据库，它不具备关系型数据库的一些特点，例如，它不支持SQL的跨行事务，也不要求数据之间有严格的关系，同时它允许在同一列的不同行中存储不同类型的数据。</p><p>HBase是非惯性型数据库，它不具备关系型数据库的一些特点，是被设计成在一个服务器集群上运行的。</p><h4 id="HBase的特点："><a href="#HBase的特点：" class="headerlink" title="HBase的特点："></a>HBase的特点：</h4><ul><li><p>容量巨大</p><p>HBase的单表可以有百亿行，百万列，可以在横向和纵向两个维度插入数据，具有很大的弹性</p><p>当关系型数据库的单个表的记录在亿级时，查询和写入的性能都会呈现指数级下降，这种庞大的数据量对传统数据库来说是一种灾难，而HBase在限定某个列的情况下对于单表存储百亿甚至更多的数据都没有性能问题</p><p>HBase采用LSM树作为内部数据存储结构，这种结构会周期性地将较小文件合成大文件，以减少对磁盘的访问</p></li><li><p>列存储</p><p>行存储的一张表的数据都放在一起，但在列存储里是按照列分开保存的。在这种情况下，进行数据的插入和更新，行存储会相对容易。而进行行存储时，查询操作需要读取所有的数据，列存储则只需要读取相关列，可以大幅降低系统I/O吞吐量</p></li><li><p>稀疏性</p><p>HBase中的数据都是以字符串形式存储的，为空的列并不占用存储空间，因此HBase的列存储解决了数据稀疏性的问题，在很大程度上节省了存储开销。所以HBase通常可以设计成稀疏矩阵，同时这种方式比较接近实际的应用场景</p></li><li><p>扩展性强</p><p>HBase 工作在 HDFS 之上，理所当然地支持分布式表，也继承了 HDFS 的可扩展性。HBase 的扩展是<strong>横向</strong>的，横向扩展是指在扩展时不需要提升服务器本身的性能，只需<strong>添加服务器到现有集群</strong>即可。</p><p>HBase 表根据 <strong>Region 大小进行分区</strong>，<strong>分别存在集群中不同的节点上</strong>，当添加新的节点时，集群就重新调整，在新的节点启动 HBase 服务器，动态地实现扩展。这里需要指出，HBase 的扩展是<strong>热扩展</strong>，即在不停止现有服务的前提下，可以随时添加或者减少节点。</p></li><li><p>高可靠性</p></li></ul><h3 id="HDFS的原理"><a href="#HDFS的原理" class="headerlink" title="HDFS的原理"></a>HDFS的原理</h3><p>HDFS 是参考 Google 公司的 GFS 实现的，不管是 Google 公司的计算平台还是 Hadoop 计算平台，都是运行在大量普通商用计算机上的，这些计算机节点很容易出现硬件故障，而这两种计算平台都将硬件故障作为常态，通过软件设计来保证系统的可靠性。</p><h4 id="HDFS的基本架构"><a href="#HDFS的基本架构" class="headerlink" title="HDFS的基本架构"></a>HDFS的基本架构</h4><p><code>HDFS</code> 主要由 3 个组件构成，分别是 <code>NameNode、SecondaryNameNode 和 DataNode。</code></p><p><code>HDFS</code> 是以 Master/Slave 模式运行的，其中，<code>NameNode </code>和<code> SecondaryNameNode</code> 运行在 Master 节点 上，而 <code>DataNode </code>运行在 Slave 节点上，所以 <code>HDFS </code>集群一般由一个 <code>NameNode</code>、一个<code>SecondaryNameNode</code>和许多 <code>DataNode </code>组成，其架构如下图所示。</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210720151549111.png" class title="image-20210720151549111"><p><a href="http://c.biancheng.net/view/6502.html">HDFS简明入门教程 (biancheng.net)</a></p><h4 id="HBase逻辑结构"><a href="#HBase逻辑结构" class="headerlink" title="HBase逻辑结构"></a>HBase逻辑结构</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210720185905040.png" class title="image-20210720185905040"><h4 id="HBase物理结构："><a href="#HBase物理结构：" class="headerlink" title="HBase物理结构："></a>HBase物理结构：</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210720212833190.png" class title="image-20210720212833190"><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p><code>Name Space</code>:</p><p>命名空间，类似于关系型数据库的database概念，每个命名空间下有多个表。HBase有两个自带的命名空间，分别是hbase和default，HBase中存放的是HBase内置的表，default表是用户默认使用的命名空间</p><p><code>Region</code>:类似于关系型数据库的表的概念。不同的是，HBase定义表时只需要声明列族即可，不需要声明具体的类。这意味着，往HBase写入数据时，字段可以<strong>动态</strong>、<strong>按需</strong>指定</p><p><code>Row</code>:HBase表中的每行数据都由一个RowKey和多个Column（列组成），数据是按照RowKey的字典顺序存储的，并且查询数据时只能根据RowKey进行检索。</p><p><code>Column</code>:HBase中的每个列都由Column Family(列族)和Column  Qualifier（列限定符）进行限定，例如info：name，info:age。建表时，只需指明列族，而列限定符无需预先定义。</p><p><code>Time Stamp</code></p><p>用于标识数据的不同版本(version)，每条数据写入时，如果不指定时间戳，系统会自动为其加上该字段，其值为写入HBase的时间</p><p><code>Cell</code>：</p><p>由{rowKey，column Family：column Qualifier，time Stamp} 唯一确定的单元。cell中的数据是没有类型的，全部是字节码形式存储</p><h4 id="HBase架构："><a href="#HBase架构：" class="headerlink" title="HBase架构："></a>HBase架构：</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721132312788.png" class title="image-20210721132312788"><h4 id="HBase的shell操作"><a href="#HBase的shell操作" class="headerlink" title="HBase的shell操作"></a>HBase的shell操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/hbase shell <span class="comment">#命令行界面</span></span><br></pre></td></tr></table></figure><p>删除写错的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+delete</span><br></pre></td></tr></table></figure><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/bigdata/data/Hbase/Hbase的学习/image-20210721151254543.png" alt="image-20210721151254543" style="zoom:200%;"><p>使用shell报错</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721151938883.png" class title="image-20210721151938883"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#先用命令查看安全模式状态</span><br><span class="line">bin/hdfs dfsadmin -safemode get</span><br><span class="line">#发现安全模式开启，关闭即可</span><br><span class="line">bin/hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure><p>安全模式：</p><p>当分布式文件系统（HDFS）开始启动时，会有安全模式，HDFS处在安全模式下，文件系统中不允许修改和删除的操作。</p><p>安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。</p><p>创建表的语句</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cretae <span class="string">&#x27;表名&#x27;</span>,<span class="string">&#x27;列族名&#x27;</span>,<span class="string">&#x27;列族名&#x27;</span></span><br></pre></td></tr></table></figure><p>修改表信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改versions</span><br><span class="line">alter &#x27;表名&#x27;,&#123;NAME=&gt;&#x27;列族名&#x27;,VERSIONS=&gt;3&#125;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看表</span><br><span class="line">list</span><br><span class="line">#先将表变为不可用</span><br><span class="line">disbale &#x27;表名&#x27;</span><br><span class="line">#再删除表</span><br><span class="line">drop &#x27;表名&#x27;</span><br></pre></td></tr></table></figure><p>命名空间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看命名空间</span><br><span class="line">list_namespace</span><br><span class="line">#创建命名空间</span><br><span class="line">create_namespace &#x27;命名空间名&#x27;</span><br><span class="line">#删除命名空间（首先得将里面的表删除）</span><br><span class="line">disable &#x27;命名空间:表名&#x27;</span><br><span class="line">drop &#x27;命名空间:表名&#x27;</span><br><span class="line">drop_namespace &#x27;命名空间&#x27;</span><br></pre></td></tr></table></figure><p>向表中插入数据</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721155900344.png" class title="image-20210721155900344"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">put <span class="string">&#x27;命名空间（默认为default）:表名&#x27;</span>,<span class="string">&#x27;row_key&#x27;</span>,<span class="string">&#x27;列族:列名&#x27;</span>,<span class="string">&#x27;值&#x27;</span></span><br></pre></td></tr></table></figure><p>scan</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721160444790.png" class title="image-20210721160444790"><p>get</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721160512874.png" class title="image-20210721160512874"><p>查看10个版本以内的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scan &#x27;表名&#x27;,&#123;RAW=&gt;true,VERSIONS=&gt;10&#125;</span><br></pre></td></tr></table></figure><p>delete</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721182714486.png" class title="image-20210721182714486"><h4 id="Hbase详细架构"><a href="#Hbase详细架构" class="headerlink" title="Hbase详细架构"></a>Hbase详细架构</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721220238386.png" class title="image-20210721220238386"><h4 id="Hbase写流程"><a href="#Hbase写流程" class="headerlink" title="Hbase写流程"></a>Hbase写流程</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721205533542.png" class title="image-20210721205533542"><p>写流程：</p><ul><li>Client先访问zookeeper,获取hbase:meta表位于哪个Region Server</li><li>访问对应的Region Server,获取hbase:meta表，根据读请求的namespace:table/rowkey,查询楚目标数据位于哪个Region Server中的哪个Region中。并将该table的region信息以及meta表的位置信息缓存在meta cache，方便下次访问</li><li>与目标Region Server进行通信</li><li>将数据顺序写（追加）到WAL</li><li>将数据写入对应的MemStore，数据会在MemStore进行排序</li><li>向客户端发送ack</li><li>等达到MemStore的刷写时机后，将数据刷写到HFile</li></ul><h4 id="HBase读流程"><a href="#HBase读流程" class="headerlink" title="HBase读流程"></a>HBase读流程</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210722165440443.png" class title="image-20210722165440443"><h4 id="与Hive的集成"><a href="#与Hive的集成" class="headerlink" title="与Hive的集成"></a>与Hive的集成</h4><h4 id="HBase与Hive的对比"><a href="#HBase与Hive的对比" class="headerlink" title="HBase与Hive的对比"></a>HBase与Hive的对比</h4><p>Hive:</p><ul><li><p>数据仓库</p><p>Hive的本质其实就相当于将HDFS中已经存储的文件在MySQL中做了一个双射关系，以方便使用HQL去管理查询</p></li><li><p>用于数据分析、清洗</p><p>Hive适用于离线的数据分析和清洗，延迟较高</p></li><li><p>基于HDFS、MapReduce</p><p>Hive存储的数据依旧在DataNode上，编写的HQL语句终将是转换为MapReduce代码执行</p></li></ul><p><strong>HBase:</strong></p><ul><li><p>数据库</p><p>是一种面向列族存储的非关系型数据库</p></li><li><p>用于存储结构化和非结构化的数据</p><p>适用于单表非关系型数据的存储，不适合做关联查询，类似Join等操作</p></li><li><p>基于HDFS</p><p>数据持久化存储的体现形式是HFile，存放于DataNode中，被ResionServer以region的形式进行管理</p></li><li><p>延迟较低，接入在线业务使用</p><p>面对大量的企业数据，HBase可以直线单表大量数据的存储，同时提高了高效的数据访问速度</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 大数据 </category>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据,列式存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下一个排列</title>
      <link href="/2021/07/22/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
      <url>/2021/07/22/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须 原地 修改，只允许使用额外常数空间</p><p>**字典序:**字典序的下一个排列总是要比当前排列要大，除非该排列已经是最大的排列。要找到一个大于当前序列的新序列，且变大的幅度尽可能的小</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,1]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,5]</span><br><span class="line">输出：[1,5,1]</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><p>学习体会：开始把这个题读完了之后，整个人都是懵的，在反复独了几遍题目，发现还是读不懂后，选择看题解。。。</p><p>题解思路：</p><p>找到从右往左查找第一个不是递减的数，然后再从右到第一个不为递减的元素中找一个大于不为递减元素的值，并将这两个值交换，再从第一个不为递减的元素的位置到最后位置的元素反转一下，最终得到下一个排列</p><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思想：字典序的下一个排列总是要比当前排列要大，除非该排列已经是最大的排列。要找到一个大于当前序列的新序列，且变大的幅度尽可能的小</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextPermutationDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NextPermutationDemo test=<span class="keyword">new</span> NextPermutationDemo();</span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        test.nextPermutation(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i=nums.length-<span class="number">2</span>,j=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//从后往前查找第一个不是降序排列的数</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;nums[i]&gt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从后往前查找比上面查找的值大的元素，交换</span></span><br><span class="line">        <span class="keyword">while</span>(j&gt;i&amp;&amp;i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&gt;nums[i])&#123;</span><br><span class="line">                swap(nums,i,j);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverseArr(nums,i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">        arr[i]=arr[j];</span><br><span class="line">        arr[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseArr</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=start,right=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            swap(arr,left,right);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC基础学习</title>
      <link href="/2021/07/20/JUC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/07/20/JUC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="JUC简介"><a href="#JUC简介" class="headerlink" title="JUC简介"></a>JUC简介</h3><p>在Java中，线程部分是一个重点，本篇文章说的JUC也是关于线程的。JUC就是java.util.concurrent工具包的简称。这是一个处理线程的工具包，JDK1.5开始出现。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 后端 </category>
          
          <category> Java线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java,多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2021/07/15/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/2021/07/15/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述：</strong></p><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p><strong>示例1：</strong></p><img src="/2021/07/15/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/image-20210715115032300.png" class title="image-20210715115032300"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [4,3,2,1,4]</span><br><span class="line">输出：16</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [1,2,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n = height.length</code></li><li><code>2 &lt;= n &lt;= 3 * 104</code></li><li><code>0 &lt;= height[i] &lt;= 3 * 104</code></li></ul><p><strong>题目解读：</strong></p><p>题目所给的数组，相当于每个元素就是一个坐标（i,ai）,这个坐标代表了所画的柱状图的最高点。而我们需要求的就是两个柱状图之间的最大面积（此面积的高为两个柱状图之间较小的那个高）。求长方形的面积就少不了长和宽，而最大面积的话就需要长和宽都尽量的大。这也是本题的难点，如何求得较大的长和宽。</p><p>这里选择使用双指针来进行枚举，一个指针指向开头，一个指针指向结尾。然后接下来需要考虑的问题就是如何移动指针来获得最大值，我们发现，无论怎么移动指针，所围成的面积的长度都会减少，在这种情况下，我们选择较小高的那个指针移动就能取得最大值。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea1</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=height.length;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">int</span> min=height[i]&lt;height[j]? height[i++]:height[j--];</span><br><span class="line">            max=max&gt;min*(j-i+<span class="number">1</span>)? max:min*(j-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安装</title>
      <link href="/2021/07/13/Java%E5%AE%89%E8%A3%85/"/>
      <url>/2021/07/13/Java%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h4><p>下载地址：</p><p>oracle官网：<a href>https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>进入页面后下载64位的包，jdk-8u291-linux-x64.tar.gz与jdk-8u291-linux-x64.rpm都可以</p><p>这里我下载的是<strong>jdk-8u291-linux-x64.tar.gz</strong></p><p>在linux下<code>/usr/local</code>目录下，使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir jdk<span class="comment">#文件名可以随便取</span></span><br></pre></td></tr></table></figure><p>将下载好的jdk-8u291-linux-x64.tar.gz通过xshell传输到linux下的<code>/usr/local/jdk</code>中</p><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230043661.png" class title="image-20210713230043661"><p>传输到文件目录下</p><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713225957847.png" class title="image-20210713225957847"><p>使用命令进行解压到当前目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf jdk-8u291-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230055548.png" class title="image-20210713230055548"><h4 id="编写配置文件，配置环境变量"><a href="#编写配置文件，配置环境变量" class="headerlink" title="编写配置文件，配置环境变量"></a>编写配置文件，配置环境变量</h4><p>使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>按”i”进入编辑模式，添加上下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk/jdk1.8.0_291</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230119200.png" class title="image-20210713230119200"><p>添加后，按“ESC”退出编辑模式，并<code>:wq</code>进行保存修改内容。（若没有使用修改内容不会保存）</p><p>最后还要使用命令,使配置的环境变量生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>安装完毕后，使用命令<code>java -version</code>查看是否安装成功</p><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230142680.png" class title="image-20210713230142680"><p>出现上面图片中的内容，说明安装成功</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux,Java安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos配置中心</title>
      <link href="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置文件介绍"><a href="#一、配置文件介绍" class="headerlink" title="一、配置文件介绍"></a>一、配置文件介绍</h2><h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><p>Spring Cloud Config为分布式系统的外部配置提供了服务端和客户端的支持方案。在配置的服务段你可以在所有环境中为应用程序管理外部属性的中心位置。客户端和服务端概念上的Spring Environment 和 PropertySource 抽象保持同步, 它们非常适合Spring应用程序，但是可以与任何语言中运行的应用程序一起使用。当应用程序在部署管道中从一个开发到测试直至进入生产时，您可以管理这些环境之间的配置，并确保应用程序在迁移时具有它们需要运行的所有内容。服务器存储后端的默认实现使用git，因此它很容易支持标记版本的配置环境，并且能够被管理内容的各种工具访问。很容易添加替代的实现，并用Spring配置将它们插入。</p><p>Spring Cloud Config 包含了Client和Server两个部分，server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，client通过接口获取数据、并依据此数据初始化自己的应用。Spring cloud使用git或svn存放配置文件，默认情况下使用git。</p><h4 id="Nacos替换Config"><a href="#Nacos替换Config" class="headerlink" title="Nacos替换Config"></a>Nacos替换Config</h4><p>Nacos 可以与 Spring, Spring Boot, Spring Cloud 集成，并能代替 Spring Cloud Eureka, Spring Cloud Config。通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更。</p><p><strong>应用场景</strong></p><p>在系统开发过程中，开发者通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成。配置变更是调整系统运行时的行为的有效手段。</p><p>如果微服务架构中没有使用统一配置中心时，所存在的问题：</p><p>- 配置文件分散在各个项目里，不方便维护</p><p>- 配置内容安全与权限</p><p>- 更新配置后，项目需要重启</p><p>nacos配置中心：系统配置的集中管理（编辑、存储、分发）、动态更新不重启、回滚配置（变更管理、历史版本管理、变更审计）等所有与配置相关的活动。</p><h4 id="读取Nacos配置中心的配置文件"><a href="#读取Nacos配置中心的配置文件" class="headerlink" title="读取Nacos配置中心的配置文件"></a>读取Nacos配置中心的配置文件</h4><ul><li><p>在Nacos创建同一配置文件</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713173521686.png" class title="image-20210713173521686"></li><li><p>输入配置信息及配置内容</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713173649714.png" class title="image-20210713173649714"></li><li><p>Data ID的完整规则格式</p><p><strong>${prefix}-${spring.profile.active}.${file-extension}</strong></p><p><strong>- prefix</strong> 默认为所属工程配置spring.application.name 的值（即：nacos-provider），也可以通过配置项 spring.cloud.nacos.config.prefix来配置。</p><p><strong>- spring.profiles.active=dev</strong> 即为当前环境对应的 profile。 注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</p><p><strong>- file-exetension</strong> 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</p><p><strong>注</strong>：使用Nacos的配置中心需要引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="对单个配置文件的读取"><a href="#对单个配置文件的读取" class="headerlink" title="对单个配置文件的读取"></a>对单个配置文件的读取</h4><p><strong>创建项目的bootstrap.properties/yml文件，用于定义一些一般不会变动的参数</strong></p><p>bootstrap.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置中心地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#若存在profile，则dataId的要加上该profile,proflie:dev(生产) 、test(测试)、prod(生产)</span></span><br><span class="line"><span class="comment">#spring.profiles.active=dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 该配置影响统一配置中心中的dataId</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-statistics</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-sta</span></span><br></pre></td></tr></table></figure><p><strong>补充：springboot配置文件加载顺序</strong></p><p>其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。推荐使用yml，更简洁。</p><p>bootstrap与application<br><strong>（1）加载顺序</strong><br>这里主要是说明application和bootstrap的加载顺序。</p><p>bootstrap.yml（bootstrap.properties）先加载<br>application.yml（application.properties）后加载<br>bootstrap.yml 用于应用程序上下文的引导阶段。</p><p>bootstrap.yml 由父Spring ApplicationContext加载。</p><p>父ApplicationContext 被加载到使用 application.yml 的之前。</p><p><strong>（2）配置区别</strong><br>bootstrap.yml 和application.yml 都可以用来配置参数。</p><p>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>application.yml 可以用来定义应用级别的。</p><h4 id="名称空间切换环境"><a href="#名称空间切换环境" class="headerlink" title="名称空间切换环境"></a>名称空间切换环境</h4><p>在实际开发中，通常有多套不同的环境（默认只有public），那么这个时候可以根据指定的环境来创建不同的 namespce，例如，开发、测试和生产三个不同的环境，那么使用一套 nacos 集群可以分别建以下三个不同的 namespace。以此来实现多环境的隔离。</p><p><strong>创建命名空间</strong>：</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713175003006.png" class title="image-20210713175003006"><p>在不同命名空间中，可以直接创建配置文件，也可以从其它命名空间中克隆配置（推荐）。</p><h4 id="多配置文件加载"><a href="#多配置文件加载" class="headerlink" title="多配置文件加载"></a>多配置文件加载</h4><p>在一些情况下需要加载多个配置文件。假如现在dev名称空间下有三个配置文件：service-statistics.properties、redis.properties、jdbc.properties</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713175320743.png" class title="image-20210713175320743"><p><strong>添加配置，加载多个配置文件</strong></p><p>properties格式：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 该配置影响统一配置中心中的dataId，之前已经配置过</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-statistics</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">13b5c197-de5b-47e7-9903-ec0538c9db01</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">redis.properties</span></span><br><span class="line"><span class="comment"># 开启动态刷新配置，否则配置文件修改，工程无法感知</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].data-id</span>=<span class="string">jdbc.properties</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>yml格式：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment">#使用命名空间时需要填写</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">13b5c197-de5b-47e7-9903-ec0538c9db01</span></span><br><span class="line">        <span class="comment">#读取多个配置文件</span></span><br><span class="line">        <span class="attr">ext-config:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">redis.properties</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">jdbc.properties</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="comment">#动态刷新配置，否则配置文件修改，无法感知</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-sta</span></span><br></pre></td></tr></table></figure><p>补充yml的一些书写规则</p><p>数组：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组</span></span><br><span class="line"><span class="attr">person:</span> </span><br><span class="line">  <span class="attr">name:</span> [<span class="string">zhangsan</span>,<span class="string">lisi</span>,<span class="string">wangwu</span>]</span><br><span class="line">  </span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">王五</span></span><br></pre></td></tr></table></figure><p>对象/Map</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="attr">person:</span> &#123; <span class="attr">name:</span> <span class="string">zhansan</span>,<span class="attr">age:</span> <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 后端学习 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 配置中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三数之和</title>
      <link href="/2021/07/12/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2021/07/12/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><strong>题目</strong>：给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>根据题目的描述，脑子中闪过的第一个念头就是三重循环枚举每一种类型，但O($n^3$)的时间复杂度，肯定是过不了的。实在想不出来。。就去看了题解，思想依旧是枚举的思想但题解通过双指针的方式降低了时间复杂度，时间复杂度为O($n^2$)。</p><p><strong>题解的双向指针的思想：</strong></p><p>首先把数组进行一次排序，方便后面进行枚举。排序过后，接下来就进行枚举，先进行第一层枚举，从数组的第一个元素进行枚举，将第一层遍历的下标定义为a；第二层枚举（定义下标为b）需要从比a大的元素开始且相连的两个元素不能相同（a也如此），其目的是避免重复的集合。例如[1,2,3,3,3,9]，若两个相邻的元素相同，a=0，b=2时，得到的集合为<code>[1,3]</code>,但当b=3时，得到的集合也为<code>[1,3]</code>这样就会导致所得的集合重复。解决重复的问题后，定义一个target：指第三层的枚举，也是双指针的其中之一。若a不变，b向右边移动，那么随着b的增大，第三层枚举的值是需要减小的，因此双指针正好能满足枚举要求。一个从小到大，一个从大到小，当双指针相等时结束时，跳出循环。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//预排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//枚举</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i-<span class="number">1</span>]==nums[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义一个指向最右端的指针</span></span><br><span class="line">            <span class="keyword">int</span> right=n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> target=-nums[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//枚举j</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//找到a+b+c&lt;=0的情况</span></span><br><span class="line">                <span class="keyword">while</span>(j&lt;right&amp;&amp;nums[j]+nums[right]&gt;target)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//若j==right那么后面不可能再有a+b+c&lt;=0且b&lt;c的情况</span></span><br><span class="line">                <span class="keyword">if</span>(j==right)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]+nums[right]==target)&#123;</span><br><span class="line">                    List&lt;Integer&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    list1.add(nums[i]);</span><br><span class="line">                    list1.add(nums[j]);</span><br><span class="line">                    list1.add(nums[right]);</span><br><span class="line"></span><br><span class="line">                    list.add(list1);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度分析：</strong></p><p>枚举的过程每一步中，「左指针」会向右移动一个位置（也就是题目中的 b），而「右指针」会向左移动若干个位置，这个与数组的元素有关，但我们知道它一共会移动的位置数为 N次，所以第二层枚举和第三层枚举的时间复杂度为O(n),枚举的复杂度为O($n^2$),预排序时间复杂度为O(nlogn)所以总的时间复杂度为O($n^2$)</p><p><strong>空间复杂度：</strong></p><p>只定义了一个List，空间复杂度O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/10/hello-world/"/>
      <url>/2021/07/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen       9001;</span><br><span class="line">server_name  localhost;</span><br><span class="line"></span><br><span class="line">location ~ /eduService/ &#123;</span><br><span class="line">proxy_pass http://localhost:8001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /eduoss/ &#123;</span><br><span class="line">proxy_pass http://localhost:8002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /eduvod/ &#123;</span><br><span class="line">proxy_pass http://localhost:8003;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /educms/ &#123;</span><br><span class="line">proxy_pass http://localhost:8004;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /edumsm/ &#123;</span><br><span class="line">proxy_pass http://localhost:8005;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /educenter/ &#123;</span><br><span class="line">proxy_pass http://localhost:8160;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /api/ &#123;</span><br><span class="line">proxy_pass http://localhost:8160;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /eduorder/ &#123;</span><br><span class="line">proxy_pass http://localhost:8006;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /staservice/ &#123;</span><br><span class="line">proxy_pass http://localhost:8007;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /admin/acl/ &#123;</span><br><span class="line">proxy_pass http://localhost:8010;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
