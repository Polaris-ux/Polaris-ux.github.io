<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二维数组中的查找</title>
      <link href="/2021/10/27/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>/2021/10/27/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例:</p><p>现有矩阵 matrix 如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>给定 target = 5，返回 true。</code></p><p><code>给定 target = 20，返回 false。</code></p><p>限制：</p><p><code>0 &lt;= n &lt;= 1000</code></p><p><code>0 &lt;= m &lt;= 1000</code></p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>首先分析题目，大体意思就是判断该二维数组中是否存在所给的target，但很显然题目并不是直接遍历就能AC的，直接遍历很明显会超时。</p><p>那么再来看看所给条件，看是否可以优化查找。题目中指出<strong>每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序</strong>，再通过观察，可以发现我们可以找到右上角和左下角的元素是有两个不同的路径的，一边大于当前值一边小于当前值，所以选定其中一点进行遍历，可以以O(max{n,m})的时间复杂度解决问题。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindNumberIn2DArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FindNumberIn2DArray test = <span class="keyword">new</span> FindNumberIn2DArray();</span><br><span class="line">        <span class="keyword">int</span>[][] arr=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#125;;</span><br><span class="line">        System.out.println(test.findNumberIn2DArray(arr, <span class="number">5</span>));</span><br><span class="line">        System.out.println(test.findNumberIn2DArray(arr, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span>||matrix.length==<span class="number">0</span>||matrix[<span class="number">0</span>].length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n=matrix.length;</span><br><span class="line">        <span class="keyword">int</span> m=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n&amp;&amp;j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j]&lt;target)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j]&gt;target)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络的空闲时刻</title>
      <link href="/2021/10/17/%E7%BD%91%E7%BB%9C%E7%9A%84%E7%A9%BA%E9%97%B2%E6%97%B6%E5%88%BB/"/>
      <url>/2021/10/17/%E7%BD%91%E7%BB%9C%E7%9A%84%E7%A9%BA%E9%97%B2%E6%97%B6%E5%88%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="网络空闲的时刻"><a href="#网络空闲的时刻" class="headerlink" title="网络空闲的时刻"></a>网络空闲的时刻</h2><p><strong>题目：</strong></p><p>给你一个有 n 个服务器的计算机网络，服务器编号为 0 到 n - 1 。同时给你一个二维整数数组 edges ，其中 edges[i] = [ui, vi] 表示服务器 ui 和 vi 之间有一条信息线路，在 一秒 内它们之间可以传输 任意 数目的信息。再给你一个长度为 n 且下标从 0 开始的整数数组 patience 。</p><p>题目保证所有服务器都是 相通 的，也就是说一个信息从任意服务器出发，都可以通过这些信息线路直接或间接地到达任何其他服务器。</p><p>编号为 0 的服务器是 主 服务器，其他服务器为 数据 服务器。每个数据服务器都要向主服务器发送信息，并等待回复。信息在服务器之间按 最优 线路传输，也就是说每个信息都会以 最少时间 到达主服务器。主服务器会处理 所有 新到达的信息并 立即 按照每条信息来时的路线 反方向 发送回复信息。</p><p>在 0 秒的开始，所有数据服务器都会发送各自需要处理的信息。从第 1 秒开始，每 一秒最 开始 时，每个数据服务器都会检查它是否收到了主服务器的回复信息（包括新发出信息的回复信息）：</p><p>如果还没收到任何回复信息，那么该服务器会周期性 重发 信息。数据服务器 i 每 patience[i] 秒都会重发一条信息，也就是说，数据服务器 i 在上一次发送信息给主服务器后的 patience[i] 秒 后 会重发一条信息给主服务器。<br>否则，该数据服务器 不会重发 信息。<br>当没有任何信息在线路上传输或者到达某服务器时，该计算机网络变为 空闲 状态。</p><p>请返回计算机网络变为 空闲 状态的 最早秒数 。</p><p><strong>示例1：</strong></p><img src="/2021/10/17/%E7%BD%91%E7%BB%9C%E7%9A%84%E7%A9%BA%E9%97%B2%E6%97%B6%E5%88%BB/quiet-place-example1.png" class title="example 1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：edges = [[0,1],[1,2]], patience = [0,2,1]</span><br><span class="line">输出：8</span><br><span class="line">解释：</span><br><span class="line">0 秒最开始时，</span><br><span class="line">- 数据服务器 1 给主服务器发出信息（用 1A 表示）。</span><br><span class="line">- 数据服务器 2 给主服务器发出信息（用 2A 表示）。</span><br><span class="line"></span><br><span class="line">1 秒时，</span><br><span class="line">- 信息 1A 到达主服务器，主服务器立刻处理信息 1A 并发出 1A 的回复信息。</span><br><span class="line">- 数据服务器 1 还没收到任何回复。距离上次发出信息过去了 1 秒（1 &lt; patience[1] = 2），所以不会重发信息。</span><br><span class="line">- 数据服务器 2 还没收到任何回复。距离上次发出信息过去了 1 秒（1 == patience[2] = 1），所以它重发一条信息（用 2B 表示）。</span><br><span class="line"></span><br><span class="line">2 秒时，</span><br><span class="line">- 回复信息 1A 到达服务器 1 ，服务器 1 不会再重发信息。</span><br><span class="line">- 信息 2A 到达主服务器，主服务器立刻处理信息 2A 并发出 2A 的回复信息。</span><br><span class="line">- 服务器 2 重发一条信息（用 2C 表示）。</span><br><span class="line">...</span><br><span class="line">4 秒时，</span><br><span class="line">- 回复信息 2A 到达服务器 2 ，服务器 2 不会再重发信息。</span><br><span class="line">...</span><br><span class="line">7 秒时，回复信息 2D 到达服务器 2 。</span><br><span class="line"></span><br><span class="line">从第 8 秒开始，不再有任何信息在服务器之间传输，也不再有信息到达服务器。</span><br><span class="line">所以第 8 秒是网络变空闲的最早时刻。</span><br></pre></td></tr></table></figure><p><strong>实例2:</strong></p><img src="/2021/10/17/%E7%BD%91%E7%BB%9C%E7%9A%84%E7%A9%BA%E9%97%B2%E6%97%B6%E5%88%BB/network_a_quiet_place_2.png" class title="example 2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]</span><br><span class="line">输出：3</span><br><span class="line">解释：数据服务器 1 和 2 第 2 秒初收到回复信息。</span><br><span class="line">从第 3 秒开始，网络变空闲。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>n == patience.length</li><li>2 &lt;= n &lt;= 105</li><li>patience[0] == 0</li><li>对于 1 &lt;= i &lt; n ，满足 1 &lt;= patience[i] &lt;= 105<br>1 &lt;= edges.length &lt;= min(105, n * (n - 1) / 2)</li><li>edges[i].length == 2</li><li>0 &lt;= ui, vi &lt; n</li><li>ui != vi</li><li>不会有重边。</li><li>每个服务器都直接或间接与别的服务器相连。</li></ul><p><strong>解题思路：</strong></p><p>除开0服务器之外，所有的数据服务器在第一秒都会发送数据，然后等待服务器的响应，若达到patience[i]秒还未接收到响应的信息则需重新发送。</p><p>因此想找到网络变空闲的最早时刻，即找到所有数据服务器中耗费时间最长的那个数据服务器的耗费时间即可解决。</p><p>那么如何求每个服务器耗费的时间呢？</p><p>首先我们需要找到，每个服务器到0服务器的最短路径</p><p>构建邻接表，通过bfs获取最短路径</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=patience.length;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; graph=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    graph.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建邻接矩阵</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> x=edges[i][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> y=edges[i][<span class="number">1</span>];</span><br><span class="line">    graph.get(x).add(y);</span><br><span class="line">    graph.get(y).add(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span>[] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line"><span class="keyword">int</span>[] dist=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">visited[<span class="number">0</span>]=<span class="keyword">true</span>;</span><br><span class="line">dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">Deque&lt;Integer&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">queue.offer(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 利用队列实现bfs</span></span><br><span class="line"><span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = queue.poll();</span><br><span class="line">    List&lt;Integer&gt; subNodes = graph.get(cur);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> subNode : subNodes) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[subNode])&#123;</span><br><span class="line">            dist[subNode]=dist[cur]+<span class="number">1</span>;</span><br><span class="line">            queue.offer(subNode);</span><br><span class="line">            visited[subNode]=<span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到最短距离后，只需要得到最后发送的消息得到响应的时间即可，即</p><p>time=dist[i]×2+(dist[i]×2-1)/patience[i]×patience[i]</p><p><strong>完整代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetrace.race5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-16 23:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo3 test=<span class="keyword">new</span> Demo3();</span><br><span class="line">        <span class="keyword">int</span>[][] edges=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(test.networkBecomesIdle(edges, arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先使用邻接矩阵，找到0到各个点的最短距离，然后再根据公式计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> patience</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">networkBecomesIdle</span><span class="params">(<span class="keyword">int</span>[][] edges, <span class="keyword">int</span>[] patience)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=patience.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; graph=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            graph.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建邻接矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=edges[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y=edges[i][<span class="number">1</span>];</span><br><span class="line">            graph.get(x).add(y);</span><br><span class="line">            graph.get(y).add(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] visited=<span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] dist=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        visited[<span class="number">0</span>]=<span class="keyword">true</span>;</span><br><span class="line">        dist[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        Deque&lt;Integer&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 利用队列实现bfs</span></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = queue.poll();</span><br><span class="line">            List&lt;Integer&gt; subNodes = graph.get(cur);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> subNode : subNodes) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[subNode])&#123;</span><br><span class="line">                    dist[subNode]=dist[cur]+<span class="number">1</span>;</span><br><span class="line">                    queue.offer(subNode);</span><br><span class="line">                    visited[subNode]=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到从0到个点的最短距离后，通过公式计算</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">            ans=Math.max(ans,dist[i]*<span class="number">2</span>+(dist[i]*<span class="number">2</span>-<span class="number">1</span>)/patience[i]*patience[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bfs,邻接矩阵,最短距离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty学习</title>
      <link href="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/10/15/netty%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Netty学习"><a href="#Netty学习" class="headerlink" title="Netty学习"></a>Netty学习</h1><p><strong>Netty的介绍</strong>：</p><p>Netty是由JBoss提供的一个Java开源框架，现为Github上的独立项目</p><p>Netty是一个<strong>异步的、基于事件驱动的网络</strong>应用框架，用以快速开发高性能、高可靠性的网络IO程序</p><p>Netty主要针对在TCP协议下，面向Clients端的高并发应用或者Peer-to-Peer场景下的大量数据持续传输的应用</p><p>Netty本质是一个NIO框架，适用于服务器通讯相关的多种应用场景</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211015152755908.png" class title="image-20211015152755908"><p><strong>Netty的应用场景</strong></p><p>互联网行业：</p><p>在分布式系统中，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高性能的通信框架，往往作为基础通信组件被这些RPC框架使用。</p><p>典型的应用有：阿里分布式服务框架Dubbo的RPC框架使用Dubbo协议进行节点间通信，Dubbo协议默认使用Netty作为基础通信组件，用于实现各进程节点之间的内部通信。</p><h4 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h4><p>I/O模型的简单理解：就是用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能</p><p>Java共支持三种网络编程模型：BIO、NIO、AIO</p><p><strong>Java BIO：</strong>同步并阻塞（传统阻塞型），服务器实现模式为一个连接为一个线程，及客户端有连接请求时服务器端就需要启动一个线程进行处理，若连接过多且大多线程不进行操作，会造成大量的不必要的开销</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211015155749046.png" class title="image-20211015155749046"><p>**Java NIO:**同步非阻塞，服务器实现模式为一个线程处理多个请求（连接），即客户端发送的连接发送的连接请求都会注册到多路复用器上，多路复用器轮询到有I/O请求就进行处理。</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211015164215493.png" class title="image-20211015164215493"><p><strong>Java AIO(NIO.2)：</strong>异步非阻塞，AIO引入异步通道的概念，采用了Proactor模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的的应用。</p><p><strong>BIO、NIO、AIO适用场景分析</strong></p><ul><li>BIO方式适用于连接数目比较少且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序比较简单易懂</li><li>NIO方式适合<strong>连接数目多且连接比较短的架构</strong>，比如聊天服务器，弹幕系统，服务器间通讯等，编程比较复杂，JDK1.4开始支持</li><li>AIO方式适用于<strong>连接数目多且连接比较长（重操作）</strong>的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</li></ul><h3 id="Java-BIO"><a href="#Java-BIO" class="headerlink" title="Java BIO"></a>Java BIO</h3><h4 id="Java-BIO基本介绍"><a href="#Java-BIO基本介绍" class="headerlink" title="Java BIO基本介绍"></a>Java BIO基本介绍</h4><p>Java BIO就是传统的java.io编程，其相关的类和接口在java.io中</p><h4 id="Java-BIO工作机制"><a href="#Java-BIO工作机制" class="headerlink" title="Java BIO工作机制"></a>Java BIO工作机制</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211015171510323.png" class title="image-20211015171510323"><h4 id="BIO实例"><a href="#BIO实例" class="headerlink" title="BIO实例"></a>BIO实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-15 17:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个线程池</span></span><br><span class="line">            ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个ServerSocket</span></span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程信息：id=&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot;,name=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">                Socket accept = serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;连接到一个客户端&quot;</span>);</span><br><span class="line">                <span class="comment">// 创建一个线程，与客户端进行通信</span></span><br><span class="line">                executorService.execute(()-&gt;&#123;</span><br><span class="line">                    receiveMsg(accept);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程信息：id=&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot;,name=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] arr=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            StringBuilder sbl=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span>((len=is.read(arr))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程信息：id=&quot;</span>+Thread.currentThread().getId()+<span class="string">&quot;,name=&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">                String s = <span class="keyword">new</span> String(arr, <span class="number">0</span>, len, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                sbl.append(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;关闭和client的连接&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用telnet进行发送消息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet ip port+ctrl+]</span><br></pre></td></tr></table></figure><h4 id="Java-BIO问题分析"><a href="#Java-BIO问题分析" class="headerlink" title="Java BIO问题分析"></a>Java BIO问题分析</h4><ul><li>每个请求都需要创建独立的线程，与对应的客户端进行数据Read，业务处理，数据write</li><li>当并发数较大时，需要<strong>创建大量线程来处理连接，</strong>系统资源占用较大</li><li>连接建立后，如果当前线程没有数据可读，则线程就阻塞在Read操作上，造成线程资源浪费</li></ul><h3 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h3><h4 id="Java-NIO的基本介绍"><a href="#Java-NIO的基本介绍" class="headerlink" title="Java NIO的基本介绍"></a>Java NIO的基本介绍</h4><p>Java NIO全称 java non-blocking IO，是指JDK提供的新API。从JDK1.4开始，Java提供了一系列改进的输入/输出的新特性，被统称为NIO，是同步非阻塞的。</p><p>NIO相关类都被放在java.nio包及子包下，并且对原Java.io包中的很多类进行改写</p><p>NIO有三大核心部分：Channel(通道)，Buffer(缓冲区)、Selector（选择器）</p><p>NIO是面向缓冲区、面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程中的灵活性，使用它可以提供非阻塞式的高伸缩性网络。</p><h4 id="NIO-Buffer的使用"><a href="#NIO-Buffer的使用" class="headerlink" title="NIO Buffer的使用"></a>NIO Buffer的使用</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016112835315.png" class title="image-20211016112835315"><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016113403199.png" class title="image-20211016113403199"><h4 id="Buffer的简单操作"><a href="#Buffer的简单操作" class="headerlink" title="Buffer的简单操作"></a>Buffer的简单操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.IntBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-16 11:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicBuffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个Buffer,容量为5</span></span><br><span class="line">        IntBuffer intBuffer=IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向Buffer中存放数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intBuffer.capacity(); i++) &#123;</span><br><span class="line">            intBuffer.put(i*<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将Buffer转换，读写切换</span></span><br><span class="line">        intBuffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(intBuffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(intBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="NIO与BIO的比较"><a href="#NIO与BIO的比较" class="headerlink" title="NIO与BIO的比较"></a>NIO与BIO的比较</h4><p>BIO是以流的方式进行处理的，NIO是以块的方式进行处理数据，块I/O效率比流I/O方式快很多。</p><p>BIO是阻塞的，NIO是非阻塞的</p><p>BIO基于字节流和字符流进行操作，而NIO基于Channel(通道)和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中，selector(选择器)用于监听多个通道的时间，使单个线程能够监听多个客户端通道。</p><h4 id="Channel、Buffer、Selector之间的关系"><a href="#Channel、Buffer、Selector之间的关系" class="headerlink" title="Channel、Buffer、Selector之间的关系"></a>Channel、Buffer、Selector之间的关系</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016114804608.png" class title="image-20211016114804608"><ul><li>每个Channel都会对应一个Buffer</li><li>Selector对应一个线程，一个Selector可以对应多个Channel</li><li>Selector选择处理哪个Channel是由事件决定的，Even就是一个重要的概念。</li><li>Selector会根据不同的事件，在各个通道上切换</li><li>数据的读取写入是通过Buffer,BIO中要么是输入流，要么是输出流，不能双向，但是NIO的Buffer是可以读也可以写的，但是需要flip方法切换</li><li>Channel是双向的，可以返回底层操作系统的情况，比如Linux,底层的操作系统通道就是双向的</li></ul><h4 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer:缓冲区"></a>Buffer:缓冲区</h4><p>概念：本质上是一个可以读写数据的内存块，可以理解为一个容器对象（含数组），该对象提供了一组方法，可以更轻松地使用内存块，缓冲区对象内置了一些机制，能够追踪和记录缓冲区的状态变化情况。Channel提供从文件、网络读取数据的渠道，但是读取或写入的数据都必须经由Buffer。</p><p><strong>api:</strong></p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016122029263.png" class title="image-20211016122029263"><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016122204266.png" class title="image-20211016122204266"><h4 id="Channel：通道"><a href="#Channel：通道" class="headerlink" title="Channel：通道"></a>Channel：通道</h4><p><strong>基本介绍：</strong></p><p>通道可以同时进行读写，而流只能读或者只能写</p><p>通道可以实现异步读写数据</p><p>通道可以从缓冲中读数据，也可以写数据到缓冲中</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016154019924.png" class title="image-20211016154019924"><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016154339505.png" class title="image-20211016154339505"><p><strong>案例一：</strong></p><p>将文字写入到buffer中，再从buffer中读取内容写入到Chanel中，最后将内容写入文件中</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211016160655390.png" class title="image-20211016160655390"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-16 15:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str=<span class="string">&quot;hello,尚硅谷&quot;</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取一个文件输出流</span></span><br><span class="line">            fos= <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\JavaLearn\\project\\netty\\netty-demo\\src\\main\\java\\com\\mjy\\file\\channel.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取FileChannel</span></span><br><span class="line">            FileChannel channel = fos.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取一个buffer</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将文字内容写入buffer中</span></span><br><span class="line">            byteBuffer.put(str.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 切换为读</span></span><br><span class="line">            byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">            channel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>案例二：</strong></p><p>通过buffer读取文件的内容，并打印到控制台上</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-16 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\JavaLearn\\project\\netty\\netty-demo\\src\\main\\java\\com\\mjy\\file\\channel.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            FileChannel channel = fis.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建缓冲区</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向缓冲区中写入数据</span></span><br><span class="line">            channel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从缓冲区中获取byte[]</span></span><br><span class="line">            String s = <span class="keyword">new</span> String(byteBuffer.array(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>案例三：</strong></p><p>使用一个buffer实现文件的拷贝</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-16 16:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis=<span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件输入流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\JavaLearn\\project\\netty\\netty-demo\\src\\main\\java\\com\\mjy\\file\\channel.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 文件输出流</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\JavaLearn\\project\\netty\\netty-demo\\src\\main\\java\\com\\mjy\\file\\channel01.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取读取的channel</span></span><br><span class="line">            FileChannel inputChannel = fis.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取写的channel</span></span><br><span class="line">            FileChannel outputChannel = fos.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建缓冲区</span></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重要的操作：清空buffer</span></span><br><span class="line">                byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回一个值</span></span><br><span class="line">                <span class="keyword">int</span> read=inputChannel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(read==-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                byteBuffer.flip();</span><br><span class="line">                outputChannel.write(byteBuffer);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例四：</strong></p><p>使用FileChannel的transForm方法拷贝文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 利用fileChannel的transform方法拷贝文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-16 16:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOFileChannel04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileInputStream fis=<span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        FileChannel sourceChannel=<span class="keyword">null</span>;</span><br><span class="line">        FileChannel destChannel=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件输入流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\JavaLearn\\project\\netty\\netty-demo\\src\\main\\java\\com\\mjy\\file\\channel.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 文件输出流</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\JavaLearn\\project\\netty\\netty-demo\\src\\main\\java\\com\\mjy\\file\\channel01.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取读取的channel</span></span><br><span class="line">            sourceChannel = fis.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取写的channel</span></span><br><span class="line">            destChannel = fos.getChannel();</span><br><span class="line"></span><br><span class="line">            destChannel.transferFrom(sourceChannel,<span class="number">0</span>,sourceChannel.size());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(destChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    destChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sourceChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sourceChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于Buffer和Channel的注意事项和细节</p><p>Buffer支持类型的put和get,put放入的是数目数据类型，get就应该使用相应的数据类型来取出，否则可能会报<strong>BufferUnderflowException</strong></p><p>可以将一个普通Buffer转换为只读Buffer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferReadOnly</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        IntBuffer allocate = IntBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            allocate.put(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取</span></span><br><span class="line">        allocate.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取一个只读buffer</span></span><br><span class="line">        IntBuffer rBuffer = allocate.asReadOnlyBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(rBuffer.hasRemaining())&#123;</span><br><span class="line">            System.out.println(rBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rBuffer.put(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NIO还提供了MapperdByteBuffer，可以让文件直接在内存（堆外的内存）中进行修改，而如何同步到文件由NIO完成。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"><span class="keyword">import</span> java.nio.MappedByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> MappedByteBuffer可让文件直接在内存（堆外内存修改），操作系统不用再拷贝一次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-16 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedByteBufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;D:\\JavaLearn\\project\\netty\\netty-demo\\src\\main\\java\\com\\mjy\\file\\channel.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取对应的Channel</span></span><br><span class="line">            FileChannel channel = randomAccessFile.getChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 第一个参数：FileChannel.MapMode.READ_WRITE：读写模式</span></span><br><span class="line"><span class="comment">             * 第二个参数：起始位置</span></span><br><span class="line"><span class="comment">             * 第三个参数：可修改的byte大小（不能取5）</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            MappedByteBuffer map = channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            map.put(<span class="number">0</span>,(<span class="keyword">byte</span>)<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">            map.put(<span class="number">4</span>,(<span class="keyword">byte</span>)<span class="string">&#x27;8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            randomAccessFile.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NIO支持通过多个Buffer完成读写操作</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocketChannel serverChannel=<span class="keyword">null</span>;</span><br><span class="line">        SocketChannel socketChannel=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用ServerSocketChannel和SocketChannel</span></span><br><span class="line">            serverChannel = ServerSocketChannel.open();</span><br><span class="line">            InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定端口到socket并启动</span></span><br><span class="line">            serverChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建buffer数组</span></span><br><span class="line">            ByteBuffer[] buffers=<span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">            buffers[<span class="number">0</span>]=ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">            buffers[<span class="number">1</span>]=ByteBuffer.allocate(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待客户端连接</span></span><br><span class="line">            socketChannel = serverChannel.accept();</span><br><span class="line">            <span class="keyword">int</span> messageLength=<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环读取</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> byteRead=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(byteRead&lt;messageLength)&#123;</span><br><span class="line">                    <span class="keyword">long</span> read = socketChannel.read(buffers);</span><br><span class="line">                    byteRead+=read;</span><br><span class="line">                    Arrays.asList(buffers).stream().map(buffer-&gt;<span class="string">&quot;position:&quot;</span>+buffer.position()+<span class="string">&quot;,limit：&quot;</span>+buffer.limit())</span><br><span class="line">                            .forEach(System.out::println);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将所有的buffer,进行flip()</span></span><br><span class="line">                Arrays.asList(buffers).forEach(buffer-&gt;buffer.flip());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将数据读出</span></span><br><span class="line">                <span class="keyword">int</span> byteWrite=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(byteWrite&lt;messageLength)&#123;</span><br><span class="line">                    <span class="keyword">long</span> write = socketChannel.write(buffers);</span><br><span class="line">                    byteWrite+=write;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将所有的buffer进行clear</span></span><br><span class="line">                Arrays.asList(buffers).forEach(buffer-&gt;buffer.clear());</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;byteWrite=&quot;</span>+byteWrite+<span class="string">&quot;,byteRead=&quot;</span>+byteRead);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(socketChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socketChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(serverChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Selector：选择器"><a href="#Selector：选择器" class="headerlink" title="Selector：选择器"></a>Selector：选择器</h4><p><strong>基本介绍</strong></p><p>Java的NIO采用的是同步非阻塞的方式，可以用一个线程，处理多个客户端连接，就会使用到Selector(选择器)</p><p>Selector能够检测多个注册通道上是否有事件发生（注意：多个Channel以事件的方式可以注册到同一个Selector）,如果有事件发生，便获取事件然后针对每个事件进行响应的处理。这样就可以只用一个线程管理多个通道，也就是管理多个连接和请求。</p><p>只有在连接/通道真正有读写事件发生时，才会进行读写，这样就大大地减少了系统开销，并且不必为每个连接都创建一个线程。</p><p>避免多线程之间切换的开销</p><p><strong>Selector的方法</strong></p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211017160455022.png" class title="image-20211017160455022"><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211017162622361.png" class title="image-20211017162622361"><p>对上面流程图的说明：</p><ul><li>当客户端连接时，会通过ServerSocketChannel获取到SocketChannel</li><li>然后将该SocketChannel注册到Selector中register(Selector sel, int ops)，一个selector可以注册多个Channel</li><li>注册之后会返回一个SelectionKey，会和该Selector关联起来</li><li>Selector进行监听,使用select方法，返回有事件发生的通道个数</li><li>进一步得到各个SelectionKey(有事件发生)</li><li>通过selectionKey获取到对应的Channel</li><li>通过得到的Channel完成业务处理</li></ul><p><strong>示例：</strong></p><p>实现服务器端和客户端之间的数据简单通信（非阻塞）</p><p>NIOClient.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-17 20:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">            InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9000</span>);</span><br><span class="line">            <span class="keyword">if</span>(!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class="line">                <span class="keyword">while</span>(!socketChannel.finishConnect())&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;连接需要时间，客户端不会堵塞，可以做其它工作&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String str=<span class="string">&quot;hello,摸鱼King&quot;</span>;</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.wrap(str.getBytes());</span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line"></span><br><span class="line">            System.in.read();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NIOServer.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-17 16:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocketChannel serverSocketChannel=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个serverSocketChannel</span></span><br><span class="line">            serverSocketChannel =ServerSocketChannel.open();</span><br><span class="line">            InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">            serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个selector</span></span><br><span class="line">            Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将serverSocketChannel设置为非阻塞的</span></span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将serverSocketChannel在selector中注册</span></span><br><span class="line">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 等待1秒，若没有需要处理的事件就继续</span></span><br><span class="line">                <span class="keyword">if</span>(selector.select(<span class="number">1000</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;等待1秒，未连接&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取需要处理的事件的selectionKeys</span></span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class="line">                <span class="keyword">while</span>(keyIterator.hasNext())&#123;</span><br><span class="line">                    <span class="comment">// 获取selectionKeys</span></span><br><span class="line">                    SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">                    System.out.println(serverSocketChannel.hashCode());</span><br><span class="line">                    <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                        <span class="comment">// 获取Channel</span></span><br><span class="line">                        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端连接成功，socketChannel=&quot;</span>+socketChannel.hashCode());</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 设置为非阻塞</span></span><br><span class="line">                        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 将socketChannel注册到selector，关注事件为OP_READ,同时给socketChannel关联一个buffer</span></span><br><span class="line">                        socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                        <span class="comment">// 通过key获取socketChannel</span></span><br><span class="line">                        SocketChannel  channel = (SocketChannel)key.channel();</span><br><span class="line">                        <span class="comment">// 获取到该channel关联的buffer</span></span><br><span class="line">                        ByteBuffer buffer=(ByteBuffer)key.attachment();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 读取数据</span></span><br><span class="line">                        channel.read(buffer);</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;from 客户端：&quot;</span>+<span class="keyword">new</span> String(buffer.array()));</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 手动从集合中移除当前的selectionKey，防止重复操作</span></span><br><span class="line">                    keyIterator.remove();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(serverSocketChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocketChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SelectionKey</strong></p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211017224144733.png" class title="image-20211017224144733"><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211017224251357.png" class title="image-20211017224251357"><p><strong>ServerSocketChannel</strong></p><p>ServerSocketChannel在服务器端监听新的客户端socket连接</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211017224444616.png" class title="image-20211017224444616"><p><strong>SocketChannel</strong></p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211017224728037.png" class title="image-20211017224728037"><h4 id="小Demo"><a href="#小Demo" class="headerlink" title="小Demo"></a>小Demo</h4><p>实现一个非阻塞的多人聊天室</p><p>server端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-18 10:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST_ADDRESS=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT=<span class="number">9000</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            socketChannel=SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST_ADDRESS,PORT));</span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建selector</span></span><br><span class="line">            selector=Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册到selector中</span></span><br><span class="line">            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">            <span class="comment">// 得到username</span></span><br><span class="line">            username=socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg=username+<span class="string">&quot;:&quot;</span>+msg;</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(selector.select()!=<span class="number">0</span>)&#123;</span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">                    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                            <span class="comment">// 得到相关的通道</span></span><br><span class="line">                            SocketChannel sc=(SocketChannel)key.channel();</span><br><span class="line">                            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                            <span class="comment">// 将数据写入buffer</span></span><br><span class="line">                            sc.read(buffer);</span><br><span class="line">                            <span class="comment">// 读模式</span></span><br><span class="line">                            buffer.flip();</span><br><span class="line">                            System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatClient chatClient = <span class="keyword">new</span> ChatClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收服务端发送的消息</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            chatClient.receiveMsg();</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line">            String msg = scan.next();</span><br><span class="line">            chatClient.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-18 10:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST_ADDRESS=<span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT=<span class="number">9000</span>;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            socketChannel=SocketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST_ADDRESS,PORT));</span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建selector</span></span><br><span class="line">            selector=Selector.open();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册到selector中</span></span><br><span class="line">            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">            <span class="comment">// 得到username</span></span><br><span class="line">            username=socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg=username+<span class="string">&quot;:&quot;</span>+msg;</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(selector.select()!=<span class="number">0</span>)&#123;</span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">                    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                        SelectionKey key = iterator.next();</span><br><span class="line">                        <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                            <span class="comment">// 得到相关的通道</span></span><br><span class="line">                            SocketChannel sc=(SocketChannel)key.channel();</span><br><span class="line">                            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                            <span class="comment">// 将数据写入buffer</span></span><br><span class="line">                            sc.read(buffer);</span><br><span class="line">                            <span class="comment">// 读模式</span></span><br><span class="line">                            buffer.flip();</span><br><span class="line">                            System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatClient chatClient = <span class="keyword">new</span> ChatClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收服务端发送的消息</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            chatClient.receiveMsg();</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line">            String msg = scan.next();</span><br><span class="line">            chatClient.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NIO与零拷贝"><a href="#NIO与零拷贝" class="headerlink" title="NIO与零拷贝"></a>NIO与零拷贝</h4><p><strong>零拷贝基本介绍：</strong></p><p>零拷贝（指没有CPU拷贝，DMA拷贝无法避免）是网络编程的关键，很多性能优化都离不开</p><p>在Java中常用的零拷贝有mmap(内存映射)和sendFile.</p><p><strong>mmap优化</strong></p><p>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211018120743818.png" class title="image-20211018120743818"><p><strong>sendFile优化</strong></p><p>Linux2.1版本提供了sendFile函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到Socket Buffer，同时，由于和用户态完全无关，就减少了一次上下文切换。</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211018121023667.png" class title="image-20211018121023667"><p>linux在2.4版本中，做了一些修改，避免了从内核缓冲区拷贝到Socket buffer的操作，直接拷贝到协议栈，从而再减少一次数据拷贝。</p><p>但并不是真正意义上的零拷贝，因为其实从内核缓冲区拷贝到Socket buffer的cpu拷贝仍然存在，只是拷贝的信息很少，可以忽略。</p><p><strong>mmap和sendFile的区别</strong></p><ul><li>mmap适合小数据量读写，sendFile适合大文件传输</li><li>mmap需要4次上下文，3次数据拷贝；sendFile需要三次上下文，至少两次数据拷贝。</li><li>sendFile可以利用DMA方式，减少CPU拷贝，mmap则不能</li></ul><p><strong>NIO与零拷贝案例</strong></p><p>上传一个文件</p><p>客户端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.nio.zerocopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-18 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SocketChannel socketChannel=<span class="keyword">null</span>;</span><br><span class="line">        FileInputStream fis=<span class="keyword">null</span>;</span><br><span class="line">        FileChannel channel=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取socketChannel</span></span><br><span class="line">            socketChannel = SocketChannel.open();</span><br><span class="line"></span><br><span class="line">            InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取一个文件输入流</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\main\\java\\com\\mjy\\file\\a.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取fileChannel</span></span><br><span class="line">            channel = fis.getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 连接到serverSocketChannel</span></span><br><span class="line">            <span class="keyword">if</span>(socketChannel.connect(inetSocketAddress))&#123;</span><br><span class="line">                <span class="keyword">long</span> size = channel.size();</span><br><span class="line">                <span class="keyword">double</span> num = Math.ceil((<span class="keyword">double</span>)size / (<span class="number">1024</span> * <span class="number">1024</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                System.out.println(num);</span><br><span class="line">                <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">long</span> start=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> total=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                    <span class="comment">// 在linux下一个transferTo方法就可以完成传输</span></span><br><span class="line">                    <span class="comment">// 在windows下 一次调用transferTo只能发送8M,就需要分段传输文件，需要注意文件传输的起始位置</span></span><br><span class="line">                    <span class="comment">// transferTo 底层使用零拷贝</span></span><br><span class="line">                    <span class="keyword">long</span> readCount = channel.transferTo(start, <span class="number">1024</span> * <span class="number">1024</span>, socketChannel);</span><br><span class="line">                    total+=readCount;</span><br><span class="line">                    start=total;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">                System.out.println(<span class="string">&quot;上传字节数：&quot;</span>+total+<span class="string">&quot;,耗时：&quot;</span>+(end-begin)+<span class="string">&quot;,文件总大小：&quot;</span>+size);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(channel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(socketChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socketChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-18 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        ServerSocketChannel serverSocketChannel=<span class="keyword">null</span>;</span><br><span class="line">        FileChannel channel=<span class="keyword">null</span>;</span><br><span class="line">        SocketChannel socketChannel=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">            InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">            serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\main\\java\\com\\mjy\\file\\video.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            channel = fos.getChannel();</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">4096</span>);</span><br><span class="line">            <span class="keyword">int</span> read=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> total=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                socketChannel = serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>((read=socketChannel.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    total=total+read;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    channel.write(buffer);</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(total);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(socketChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socketChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(channel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(serverSocketChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocketChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="原生NIO存在的问题"><a href="#原生NIO存在的问题" class="headerlink" title="原生NIO存在的问题"></a>原生NIO存在的问题</h4><ul><li>NIO的类库和API繁杂，使用比较麻烦</li><li>需要具备其它的额外技能：要熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网络编程非常熟悉。</li><li>开发工作量和难度都比较大</li><li>JDK NIO存在一些Bug，例如：Epoll Bug，它会导致Selector空轮询，最终导致CPU100%。直到JDK1.7版本该问题仍然存在。</li></ul><h3 id="Java-AIO"><a href="#Java-AIO" class="headerlink" title="Java AIO"></a>Java AIO</h3><p><strong>基本介绍</strong></p><p>JDK7引入了Asynchronous I/O，即AIO。在进行I/O编程中，常用到两种模式，Reactor和Proactor。Java的NIO就是Reactor，当有事件触发时，服务器端得到通知，进行相应的处理。</p><p>AIO即NIO2.0，叫做异步不阻塞的I/O.AIO引入异步通道的概念，采用了Proactor模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用</p><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p>Netty是由JBOSS提供的一个Java开源框架。Netty提供异步的、基于事件驱动的网络应用程序框架，用以快速开发高性能、高可靠的网络I/O程序</p><h4 id="线程模型基本介绍"><a href="#线程模型基本介绍" class="headerlink" title="线程模型基本介绍"></a>线程模型基本介绍</h4><p><strong>现存的线程模型：</strong></p><ul><li>传统阻塞I/O服务模型</li><li>Reactor模式<ul><li>单Reactor单线程</li><li>单Reactor多线程</li><li>主从Reactor多线程</li></ul></li><li>Netty线程模式（Netty主要基于主从Reactor对线程模型做了一定的改进，其中主从多线程模型有多个Reactor</li></ul><p><strong>Reactor模式</strong></p><p>又称为：反应器模式、分发者模式、通知者模式</p><p><strong>针对传统阻塞I/O服务模型的缺点，解决方案：</strong></p><p>基于I/O复用模型：多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象等待，无须阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。</p><p>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务</p><p><strong>架构图</strong></p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211019164310180.png" class title="image-20211019164310180"><p><strong>说明：</strong></p><ul><li>Reactor模式，通过一个或多个输入同时传递给服务器处理器的模式（基于事件驱动）</li><li>服务器端程序处理传入的多个请求，并将它们同步分派到相应的处理线程，因此也称为Dispatcher模式</li><li>Reactor模式使用IO复用监听事件，收到事件后，分发给各个线程（进程）</li></ul><h4 id="单Reactor单线程"><a href="#单Reactor单线程" class="headerlink" title="单Reactor单线程"></a><strong>单Reactor单线程</strong></h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211019165718634.png" class title="image-20211019165718634"><p>优点：</p><ul><li>模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li></ul><p>缺点：</p><ul><li>性能问题，只有一个线程，无法完全发挥多核CPU的性能。Handler在处理某个连接上的业务时，整个进程无法处理其它连接事件，很容易导致性能瓶颈</li><li>可靠性问题，线程意外终止，或者进入死循环，会导致整个通信模块不可用，不能接收和处理外部消息，造成节点故障。</li></ul><p><strong>使用场景：</strong>客户端的数量有限，业务处理非常快速。</p><h4 id="单Reactor多线程"><a href="#单Reactor多线程" class="headerlink" title="单Reactor多线程"></a>单Reactor多线程</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211019171713292.png" class title="image-20211019171713292"><p><strong>说明：</strong></p><ul><li>Reactor对象通过select监控客户端请求事件，收到事件之后，通过dispatcher进行分发</li><li>若是建立连接请求，则Acceptor通过accept处理连接请求，然后创建一个Handler对象处理完成连接后的各种事件</li><li>如果不是连接请求，则由Reactor分发到对应的handler进行处理</li><li>handler只负责响应事件，不做具体的业务处理，通过read读取数据后，会分发给后面的woker线程池的某个线程处理业务</li><li>woker线程池会分配独立线程完成真正的业务，并将结果返回给handler</li><li>handler收到响应后，通过send将结果返回给client </li></ul><p><strong>优点：</strong></p><ul><li>可以充分利用多核cpu的处理能力</li></ul><p><strong>缺点：</strong></p><p>多线程数据共享和访问比较复杂，reactor处理所有事件的监听和响应，在单线程运行，在高并发场景容易出现性能瓶颈。</p><h4 id="主从Reactor多线程"><a href="#主从Reactor多线程" class="headerlink" title="主从Reactor多线程"></a>主从Reactor多线程</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211019174355071.png" class title="image-20211019174355071"><p><strong>说明：</strong></p><ul><li>Reactorz主线程MainReactor对象通过selector监听连接事件，收到事件后，通过Acceptor处理连接事件</li><li>当Acceptor处理连接事件后，MainReactor会将连接分发给subReactor</li><li>subReactor将连接加入到连接队列进行监听，并创建handler进行各种事件处理</li><li>当有新事件发生时，subReactor就会调用对应的handler进行处理</li><li>handler通过read读取数据，分发给后面的woker线程池的某个线程进行业务处理</li><li>woker线程池的某个线程处理完毕后，将结果返回给handler</li><li>handler收到响应的结果后，再通过send将结果返回给client</li><li>Reactor主线程可以对应多个subReactor</li></ul><p><strong>优点：</strong></p><ul><li>父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理</li><li>Reactor主线程只需要把新连接传给子线程，之后就不会再有数据交互</li></ul><p><strong>缺点：</strong></p><p>编程复杂度较高</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211019180929888.png" class title="image-20211019180929888"><h4 id="Netty详细模型"><a href="#Netty详细模型" class="headerlink" title="Netty详细模型"></a>Netty详细模型</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211021141306537.png" class title="image-20211021141306537"><p><strong>简单示例-TCP服务</strong>：</p><p>导入依赖：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;io.netty&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;netty-all&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">4.1</span><span class="number">.63</span>.Final&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>客户端：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-21 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 客户端只需要一个事件循环组</span></span><br><span class="line">        EventLoopGroup eventGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建客户端启动对象</span></span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line"></span><br><span class="line">            bootstrap.group(eventGroup)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">// 添加自定义的handler</span></span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;客户端准备好了.....&quot;</span>);</span><br><span class="line">            <span class="comment">// 启动客户端</span></span><br><span class="line">            ChannelFuture connect = bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭通道事件</span></span><br><span class="line">            connect.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            eventGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NettyClientHandler.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-21 15:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 客户端handler</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当通道就绪就会触发该方法,向服务端发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client ctx：&quot;</span>+ctx);</span><br><span class="line">        ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">&quot;hello,服务端&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">        ctx.writeAndFlush(byteBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当通道有读取事件时读取服务端发送的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf=(ByteBuf)msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复的消息&quot;</span>+buf.toString(CharsetUtil.UTF_8));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器地址：&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>服务端：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-21 14:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建BossGroup和WorkerGroup</span></span><br><span class="line">        <span class="comment">// 创建两个线程组bossGroup和workerGroup</span></span><br><span class="line">        <span class="comment">// bossGroup负责处理连接请求，workerGroup处理客户端的业务请求</span></span><br><span class="line">        <span class="comment">// bossGroup下的NioEventLoop的数量默认为电脑核数*2，可以自己设定</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建服务器端的启动对象,配置参数</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup) <span class="comment">// 设置两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">// 设置NioServerSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>) <span class="comment">// 设置线程队列得到连接个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>) <span class="comment">// 设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="comment">// 给pipeline设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;服务端准备好了.....&quot;</span>);</span><br><span class="line">            <span class="comment">// 绑定一个端口并且同步，生成了一个ChannelFuture对象</span></span><br><span class="line">            <span class="comment">// 启动服务器并绑定端口</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>NettyServerHandler.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 自定义handler 需要继承netty规定好的某个HandlerAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-21 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx ：上下文对象，含有管道pipline,通道channel，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg：就是客户端发送的数据，默认为Object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器线程：&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx：&quot;</span>+ctx);</span><br><span class="line">        <span class="comment">// 将msg转换成一个ByteBuf</span></span><br><span class="line">        <span class="comment">// ByteBuf是netty提供的，不是NIO的ByteBuffer</span></span><br><span class="line">        ByteBuf buf=(ByteBuf)msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送的消息是：&quot;</span>+buf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端的地址为：&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入到缓存，并刷新（刷新到管道中）</span></span><br><span class="line">        <span class="comment">// 一般需要对发送的消息进行编码</span></span><br><span class="line">        ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">&quot;hello,客户端！&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">        ctx.writeAndFlush(byteBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常，一般是关闭通道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="TaskQueue"><a href="#TaskQueue" class="headerlink" title="TaskQueue"></a>TaskQueue</h4><p><strong>任务队列中的Task有三种典型使用场景</strong></p><ul><li><p>用户程序自定义的普通任务</p><p>示例：</p><p>NettyServerHandler.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若我们有一个非常耗时的业务，就需要异步执行，将该操作提交到该Channel对应的NioEventLoop的TaskQueue中去</span></span><br><span class="line">        <span class="comment">// 若不异步执行，会发生阻塞</span></span><br><span class="line">        <span class="comment">// 解决办法1：用户自定义的普通任务</span></span><br><span class="line">        ctx.channel().eventLoop().execute(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;异步处理的业务&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">                    ctx.writeAndFlush(buf);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>注：当需要处理异步任务时，可以将需要处理的任务放到Channel中的eventLoop中的TaskQueue中，可以添加多个异步任务，但因为使用的是同一个线程添加异步任务，所以执行的异步任务在TaskQueue中执行是同步的。</p></li><li><p>用户自定义的定时任务</p><p>示例：</p><p>NettyServerHandler.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户自定义定时服务</span></span><br><span class="line">        ctx.channel().eventLoop().schedule(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;异步处理的业务1&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line">                    ctx.writeAndFlush(buf);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">2</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></li><li><p>非当前Reactor线程调用Channel的各种方法</p><p>例如：在推送系统的业务线程里面，根据用户的标识找到对应的Channel引用，然后调用Write类方法向该用户推送消息，就会进入到这种场景。最终的Write会提交到任务队列终被异步消费</p><p>示例：</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">serverBootstrap.group(bossGroup, workerGroup) <span class="comment">// 设置两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">// 设置NioServerSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>) <span class="comment">// 设置线程队列得到连接个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>) <span class="comment">// 设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="comment">// 给pipeline设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            <span class="comment">// 可以使用一个集合管理SocketChannel,再推送消息的时，将推送业务加入到channel的eventLoop中的taskQueue或ScheduledTaskQueue</span></span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br></pre></td></tr></table></figure></li></ul><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211022181516402.png" class title="image-20211022181516402"><h4 id="异步模型"><a href="#异步模型" class="headerlink" title="异步模型"></a>异步模型</h4><p><strong>基本介绍</strong></p><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</p><p>Netty中的I/O操作是异步的，包括Bind、write、connect等操作会简单的返回一个ChannelFuture</p><p>调用者并不能立刻获得结果，而是通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果</p><p>Netty的异步模型是建立在future和callback的之上的。callback就是回调。重点说Future，它的核心思想：假设一个方法fun,计算过程可能很耗时，等待fun返回结果显然不合适。那么可以在调用fun的时候，立马返回一个future，或许可以通过Future去监控方法fun的处理过程</p><p><strong>Future说明</strong></p><ul><li>表示异步的执行结果，可以通过它提供的方法来检测执行是否完成，比如检索计算等</li><li>ChannelFuture是一个接口，我们可以添加监听器，当监听的事件发生时，就会通知到监听器</li></ul><p><strong>Future-Listener机制</strong></p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211022232452807.png" class title="image-20211022232452807"><p>例子：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定一个端口并且同步，生成了一个ChannelFuture对象</span></span><br><span class="line">           <span class="comment">// 启动服务器并绑定端口</span></span><br><span class="line">           ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">6668</span>).sync();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 添加监听器</span></span><br><span class="line">           channelFuture.addListener(<span class="keyword">new</span> ChannelFutureListener()&#123;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                   <span class="keyword">if</span>(channelFuture.isSuccess())&#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;服务器绑定 6668成功&quot;</span>);</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;服务器绑定 6668失败&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><p>异步好处：</p><p>相比传统阻塞I/O,执行I/O操作后线程会被阻塞，直到操作完成；异步处理的好处是不会造成阻塞，线程在I/O操作期间可以执行别的程序，在高并发清醒下会更稳定和更高的吞吐量。</p><h4 id="快速入门示例-HTTP服务"><a href="#快速入门示例-HTTP服务" class="headerlink" title="快速入门示例-HTTP服务"></a>快速入门示例-HTTP服务</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211022233711808.png" class title="image-20211022233711808"><p>客户端：浏览器，不用写</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-22 23:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHttpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup=<span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置启动类对象</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> TestHttpServerInitializer());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动服务器</span></span><br><span class="line">            ChannelFuture cf = serverBootstrap.bind(<span class="number">9000</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对关闭通道进行监听</span></span><br><span class="line">            cf.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>handler.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-22 23:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// SimpleChannelInboundHandler是ChannelInboundHandler的子类</span></span><br><span class="line"><span class="comment">// HttpObject:客户端与服务端通信的数据被封装为HttpObject</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHttpServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断msg是否是HttpRequest</span></span><br><span class="line">        <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> HttpRequest)&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;msg 类型：&quot;</span>+msg.getClass());</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端地址：&quot;</span>+ctx.channel().remoteAddress());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 服务器会接收到两次请求，需要过滤掉http://localhost:9000/favicon.ico</span></span><br><span class="line">            HttpRequest request =(HttpRequest)msg;</span><br><span class="line">            URI uri = <span class="keyword">new</span> URI(request.uri());</span><br><span class="line">            System.out.println(uri);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;/favicon.ico&quot;</span>.equals(uri.getPath()))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;服务器接受到/favicon.ico的请求，不响应&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 回复信息给浏览器</span></span><br><span class="line">            ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="string">&quot;hello,我是服务器&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 构造一个http的响应，即httpResponse</span></span><br><span class="line">            DefaultHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, byteBuf);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH,byteBuf.readableBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送消息给客户端</span></span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.mjy.netty.http;</span><br><span class="line"></span><br><span class="line">import io.netty.channel.ChannelInitializer;</span><br><span class="line">import io.netty.channel.ChannelPipeline;</span><br><span class="line">import io.netty.channel.socket.SocketChannel;</span><br><span class="line">import io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author</span><br><span class="line"> * @description</span><br><span class="line"> * @create 2021-10-22 23:44</span><br><span class="line"> */</span><br><span class="line">public class TestHttpServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void initChannel(SocketChannel ch) throws Exception &#123;</span><br><span class="line">        // 向管道中加入handler</span><br><span class="line">        // 得到管道</span><br><span class="line">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">        // 加入一个netty提供的httpServerCodec codec -&gt; coder decoder</span><br><span class="line">        // HttpServerCodec：netty提供的编-解码器</span><br><span class="line">        pipeline.addLast(&quot;MyHttpServerCodec&quot;,new HttpServerCodec());</span><br><span class="line"></span><br><span class="line">        // 增加一个自定义handler</span><br><span class="line">        pipeline.addLast(&quot;myHttpServerHandler&quot;,new TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bootstrap、ServerBootstrap"><a href="#Bootstrap、ServerBootstrap" class="headerlink" title="Bootstrap、ServerBootstrap"></a>Bootstrap、ServerBootstrap</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211024134309376.png" class title="image-20211024134309376"><h4 id="Pipeline和ChannelPipeline"><a href="#Pipeline和ChannelPipeline" class="headerlink" title="Pipeline和ChannelPipeline"></a>Pipeline和ChannelPipeline</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211024140557169.png" class title="image-20211024140557169"><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211024141225689.png" class title="image-20211024141225689"> <h4 id="ChannelHandlerContext"><a href="#ChannelHandlerContext" class="headerlink" title="ChannelHandlerContext"></a>ChannelHandlerContext</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211024143115758.png" class title="image-20211024143115758"><h4 id="ChannelOption"><a href="#ChannelOption" class="headerlink" title="ChannelOption"></a>ChannelOption</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211024143326063.png" class title="image-20211024143326063"><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211024144323040.png" class title="image-20211024144323040"><h4 id="Unpooled类"><a href="#Unpooled类" class="headerlink" title="Unpooled类"></a>Unpooled类</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211024144752282.png" class title="image-20211024144752282"><p><strong>基本使用：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyBuf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个ByteBuf</span></span><br><span class="line">        <span class="comment">// 创建 对象：该对象包含一个数组arr，是一个byte[10]</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        ByteBuf buffer = Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            buffer.writeByte(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// netty的buffer中，不需要使用flip进行反转</span></span><br><span class="line">        <span class="comment">// 原因：netty的buffer底层维护了readerIndex和writerIndex</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            System.out.println(buffer.readByte());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyBuf1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        ByteBuf buf = Unpooled.copiedBuffer(<span class="string">&quot;my dear friends&quot;</span>, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(buf.hasArray())&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] array = buf.array();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(array,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从哪个下标开始读</span></span><br><span class="line">            System.out.println(buf.readerIndex());</span><br><span class="line">            <span class="comment">// 从哪个下标开始写</span></span><br><span class="line">            System.out.println(buf.writerIndex());</span><br><span class="line">            <span class="comment">// 可以读取的元素的长度</span></span><br><span class="line">            System.out.println(buf.readableBytes());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="netty实现多人聊天室"><a href="#netty实现多人聊天室" class="headerlink" title="netty实现多人聊天室"></a>netty实现多人聊天室</h4><p>功能：能够实现多人聊天、上下线提示以及加入群聊提示和离开群聊提示</p><p><strong>服务器端：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-24 15:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port=port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverStrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverStrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 向pipeline中添加解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            <span class="comment">// 向pipeline中添加编码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 处理业务的handler</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;serverHandler&quot;</span>,<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">// 启动服务器</span></span><br><span class="line">            ChannelFuture channelFuture = serverStrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GroupChatServer groupChatServer = <span class="keyword">new</span> GroupChatServer(<span class="number">9000</span>);</span><br><span class="line">        groupChatServer.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务器端的handler</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mjy.netty.groupchat.entity.User;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.ChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.DefaultChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-24 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Channel组，管理所有的channel</span></span><br><span class="line">    <span class="comment">// GlobalEventExecutor.INSTANCE：全局的事件执行器，是一个单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup=<span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;User,Channel&gt; channelMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// handlerAdded表示连接建立，一旦连接，第一个被执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入QQ号：&quot;</span>);</span><br><span class="line">        String id=scan.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入姓名：&quot;</span>);</span><br><span class="line">        String name=scan.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入昵称：&quot;</span>);</span><br><span class="line">        String nickname=scan.next();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(name);</span><br><span class="line">        user.setNickname(nickname);</span><br><span class="line"></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelMap.put(user,channel);</span><br><span class="line">        <span class="comment">// 将该客户加入聊天的信息推送给其它在线的客户</span></span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;【客户端】&quot;</span>+channel.remoteAddress()+<span class="string">&quot;加入聊天~&quot;</span>);</span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示断开连接，将客户离开的信息推送给当前在线的客户</span></span><br><span class="line">    <span class="comment">// 执行该方法，会自动将channel从channelGroup中移除</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(<span class="string">&quot;[客户端]&quot;</span>+channel.remoteAddress()+<span class="string">&quot;离开\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示channel处于活动状态，提示上线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;：&quot;</span>+sdf.format(<span class="keyword">new</span> Date())+<span class="string">&quot;上线~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示channel处于非活动状态，提示下线</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;：&quot;</span>+sdf.format(<span class="keyword">new</span> Date())+<span class="string">&quot;下线~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取channel</span></span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        System.out.println(<span class="string">&quot;[客户端]&quot;</span>+channel.remoteAddress()+<span class="string">&quot;发送消息：&quot;</span>+msg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所发消息发送给其它客户</span></span><br><span class="line">        channelGroup.forEach(ch-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(channel!=ch)&#123;</span><br><span class="line">                ch.writeAndFlush(<span class="string">&quot;[客户]&quot;</span>+channel.remoteAddress()+msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>客户端：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-24 16:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host,<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host=host;</span><br><span class="line">        <span class="keyword">this</span>.port=port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        NioEventLoopGroup eventGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(eventGroup)</span><br><span class="line">                    .channel(NioSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 加入解码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;decoder&quot;</span>,<span class="keyword">new</span> StringDecoder());</span><br><span class="line">                            <span class="comment">// 加入编码器</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;encoder&quot;</span>,<span class="keyword">new</span> StringEncoder());</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 处理业务的handler</span></span><br><span class="line">                            pipeline.addLast(<span class="string">&quot;clientHandler&quot;</span>,<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动</span></span><br><span class="line">            ChannelFuture channelFutrue = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFutrue.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------&quot;</span>+channel.localAddress()+<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">                String message = scanner.next();</span><br><span class="line">                channel.writeAndFlush(message);</span><br><span class="line">            &#125;</span><br><span class="line">            scanner.close();</span><br><span class="line">            <span class="comment">// 监听关闭</span></span><br><span class="line">            channelFutrue.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            eventGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GroupChatClient groupChatClient = <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9000</span>);</span><br><span class="line">        groupChatClient.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端handler</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="心跳检测机制"><a href="#心跳检测机制" class="headerlink" title="心跳检测机制"></a>心跳检测机制</h4><p>通过添加IdleStateHandler实现每隔一段时间（若服务器无相应操作）发送心跳检测包检测当前连接是否断开</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 加入netty提供的IdleStateHandler</span></span><br><span class="line">                            <span class="comment">// IdleStateHandler是netty提供的处理空闲状态的处理器</span></span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            long readerIdleTime：表示多长时间没读，就会发送一个心跳检测包检测是否连接</span></span><br><span class="line"><span class="comment">                            long writerIdleTime：表示多长时间没有写，就会发送一个心跳检测包检测是否连接</span></span><br><span class="line"><span class="comment">                            long allIdleTime：表示多长时间没有读写，就会发送一个心跳检测包检测是否连接</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 加入一个对空闲处理的handler</span></span><br><span class="line">                            <span class="comment">// 当IdleStateEvent触发后，就会传递给管道的下一个handler去处理，通过调用下一个handler的userEventTiggered方法</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HeartServerHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">// 启动服务端</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">9000</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler：处理空闲检测</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *处理空闲检测</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt：事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(evt <span class="keyword">instanceof</span> IdleStateEvent)&#123;</span><br><span class="line">            IdleStateEvent event = (IdleStateEvent)evt;</span><br><span class="line">            String tips=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span>(event.state())&#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    tips=<span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    tips=<span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    tips=<span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(ctx.channel().remoteAddress()+<span class="string">&quot;---超时---：&quot;</span>+tips);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211025112119832.png" class title="image-20211025112119832"><p><strong>服务端：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            serverBootstrap.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE,<span class="keyword">true</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 基于http协议，使用http的编码和解码</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 是以块方式写，添加ChunkedWriteHandler处理器</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// http数据在传输过程中是分段的，HttpObjectAggregator可以将多个段聚合</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            对应webSocket，它的数据是以帧进行传递的</span></span><br><span class="line"><span class="comment">                            浏览器请求时：ws://localhost:9000/hello 表示请求的url</span></span><br><span class="line"><span class="comment">                            WebSocketServerProtocolHandler 核心功能是将http请求升级为ws请求，保持长连接</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">&quot;/hello&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 处理业务逻辑，自定义handler</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> TextWebSocketFrameHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">// 启动服务端</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">9000</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实现业务的自定义handler</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextWebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器收到消息：&quot;</span>+msg.text());</span><br><span class="line">        <span class="comment">// 服务器回复消息</span></span><br><span class="line">        ctx.channel().writeAndFlush(<span class="keyword">new</span> TextWebSocketFrame(<span class="string">&quot;当前时间：&quot;</span>+ LocalDateTime.now()+msg.text()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当web客户端连接后触发方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// LongText：是唯一的，shortText不是唯一的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdded被调用：&quot;</span>+ctx.channel().id().asLongText());</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerAdded被调用：&quot;</span>+ctx.channel().id().asShortText());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当web客户段断开连接后触发方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;handlerRemoved被调用：&quot;</span>+ctx.channel().id().asLongText());</span><br><span class="line">        System.out.println(<span class="string">&quot;handlerRemoved被调用：&quot;</span>+ctx.channel().id().asShortText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>聊天框：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> socket;</span><br><span class="line">    <span class="comment">// 判断当前浏览器是否支持webSocket</span></span><br><span class="line">    <span class="keyword">if</span>(window.WebSocket)&#123;</span><br><span class="line">        socket=<span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:9000/hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相当于channelReado,ev收到服务器端回送的消息</span></span><br><span class="line">        socket.onmessage=function(ev)&#123;</span><br><span class="line">            <span class="keyword">var</span> content=document.getElementById(<span class="string">&quot;responseText&quot;</span>);</span><br><span class="line">            content.value=content.value+ev.data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相当于连接开启</span></span><br><span class="line">        socket.onopen=function(ev)&#123;</span><br><span class="line">            <span class="keyword">var</span> content=document.getElementById(<span class="string">&quot;responseText&quot;</span>);</span><br><span class="line">            content.value=<span class="string">&quot;连接开启~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相当于连接关闭</span></span><br><span class="line">        socket.onclose=function(ev)&#123;</span><br><span class="line">            <span class="keyword">var</span> content=document.getElementById(<span class="string">&quot;responseText&quot;</span>);</span><br><span class="line">            content.value=content.value+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;连接关闭了&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;当前浏览器不支持webSocket&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">send</span><span class="params">(message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!window.socket)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(socket.readyState==WebSocket.OPEN)&#123;</span><br><span class="line">            <span class="comment">// 通过socket发送消息</span></span><br><span class="line">            socket.send(message);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;连接没有开启&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">clearContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        document.getElementById(<span class="string">&quot;responseText&quot;</span>).value=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;form onsubmit=<span class="string">&quot;return false&quot;</span>&gt;</span><br><span class="line">    &lt;textarea name=<span class="string">&quot;message&quot;</span> style=<span class="string">&quot;width:300px;height:100px&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;发送消息&quot;</span> onclick=<span class="string">&quot;send(this.form.message.value)&quot;</span>&gt;</span><br><span class="line">    &lt;textarea id=<span class="string">&quot;responseText&quot;</span> style=<span class="string">&quot;width:300px;height:100px&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;清空内容&quot;</span> onclick=<span class="string">&quot;clearContent()&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="netty编码和解码的基本介绍"><a href="#netty编码和解码的基本介绍" class="headerlink" title="netty编码和解码的基本介绍"></a>netty编码和解码的基本介绍</h4><p>编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时便需要解码</p><p>codec（编码器）的组成：decoder(解码器)和encoder(编码器)</p><p>netty本身自带的ObjectDecoder和ObjectEncoder可以用来实现对象的编码和解码，底层使用的仍是Java序列化操作，而Java序列化操作技术本身效率并不高，存在以下问题：</p><ul><li>无法跨语言</li><li>序列化后体积太大，是二进制编码的5倍多</li><li>序列化效率太低</li></ul><p><strong>解决方案：Google的protobuf</strong></p><p>protobuf是Google发布的开源项目，全称Google Protocol Buffers，是一种轻便高效的结构化数据存出格式，开源用于结构化数据串行化，或者说序列化。它很适合做数据存储或RPC[远程过程调用 remote proceduce call] 数据交换格式。</p><p>Protobuf是以message的方式来管理数据的</p><p>支持跨平台、跨语言</p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211025234656688.png" class title="image-20211025234656688"><p>使用示例：</p><figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax=<span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> optimize_for=SPEED; <span class="comment">// 加快解析</span></span><br><span class="line"><span class="keyword">option</span> java_package=<span class="string">&quot;com.mjy.netty.codec1&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname=<span class="string">&quot;MyDataInfo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// protobuf 可以使用message 管理其他的message</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">MyMessage</span></span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个枚举类型</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">DataType</span></span>&#123;</span><br><span class="line">    StudentType=<span class="number">0</span>; <span class="comment">// 在proto3要求enum编号从0开始</span></span><br><span class="line">    WorkerType=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用data_type来标识传的是哪一个枚举类型</span></span><br><span class="line">  DataType data_type=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表示每次枚举类型最多只能出现其中的一个，节省空间</span></span><br><span class="line">  <span class="keyword">oneof</span> dataBody&#123;</span><br><span class="line">    Student student=<span class="number">2</span>;</span><br><span class="line">    Worker worker=<span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="built_in">int32</span> id=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> name=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Worker</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> name=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> age=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用protoc.exe进行编译生成Java文件</p><h4 id="netty的入站和出站"><a href="#netty的入站和出站" class="headerlink" title="netty的入站和出站"></a>netty的入站和出站</h4><p>示例：</p><p><strong>Netty的handler的调用机制</strong></p><img src="/2021/10/15/netty%E5%AD%A6%E4%B9%A0/image-20211027105623769.png" class title="image-20211027105623769">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Invalid bound statement (not found): com.project.seckill.mapper.UserMapper.getById</title>
      <link href="/2021/10/08/Invalid-bound-statement-not-found-com-project-seckill-mapper-UserMapper-getById/"/>
      <url>/2021/10/08/Invalid-bound-statement-not-found-com-project-seckill-mapper-UserMapper-getById/</url>
      
        <content type="html"><![CDATA[<p>在整合SpringBoot和Mybatis时，报错</p><p><strong>Invalid bound statement (not found):<br>  com.project.seckill.mapper.UserMapper.getById</strong></p><p>解决方法：</p><p>首先：</p><ul><li>仔细检查xxxMapper与xxxMapper.xml的内容，看是否未对应正确</li><li>查看xxxMapper.xml的namespace是否写错</li><li>查看xxxMapper.xml的返回结果是否映射正确</li></ul><p>若上述都没有问题，其次</p><ul><li><p>查看配置文件中的路径是否配置正确</p><img src="/2021/10/08/Invalid-bound-statement-not-found-com-project-seckill-mapper-UserMapper-getById/image-20211008230149945.png" class title="image-20211008230149945"></li><li><p>查看是否添加了@MapperScan(basePackages=”xxx”)</p><img src="/2021/10/08/Invalid-bound-statement-not-found-com-project-seckill-mapper-UserMapper-getById/image-20211008230251617.png" class title="image-20211008230251617"></li></ul><p>若上述都没问题，那就还有一个可能</p><p>Maven默认只识别src-main-resources下的资源文件，如果在maven工程中资源文件放在src-main-java下，我们需让Maven知道。在pom.xml中添加如下配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thymeleaf引入静态资源无效</title>
      <link href="/2021/10/06/thymeleaf%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%A0%E6%95%88/"/>
      <url>/2021/10/06/thymeleaf%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h4 id="SpringBoot整合thymeleaf引用静态资源无效的问题"><a href="#SpringBoot整合thymeleaf引用静态资源无效的问题" class="headerlink" title="SpringBoot整合thymeleaf引用静态资源无效的问题"></a>SpringBoot整合thymeleaf引用静态资源无效的问题</h4><p>首先需要保证引入了thymeleaf的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后需要在application.properties中配置静态资源的路径</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.add-mappings</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.chain.cache</span>=<span class="string">true </span></span><br><span class="line"><span class="meta">spring.resources.chain.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.chain.html-application-cache</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/static/,classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>resources目录下文件</p><img src="/2021/10/06/thymeleaf%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%A0%E6%95%88/image-20211006171656939.png" class title="image-20211006171656939"><p>引入th标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#引用资源</span><br><span class="line">th:src=&quot;@&#123;&#125;&quot;</span><br></pre></td></tr></table></figure><img src="/2021/10/06/thymeleaf%E5%BC%95%E5%85%A5%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%A0%E6%95%88/image-20211006171830500.png" class title="image-20211006171830500"><p>注意这里的css引用是<link>标签，且th:href</p><p>若按上面做了都没有效果，可以试着清除浏览器的缓存，有可能是因为缓存导致引用失败。（没有配置其它配置类的情况下，若配置了其它的配置类，则可能有其它原因）</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 常见错误 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq学习</title>
      <link href="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="MQ的相关概念"><a href="#MQ的相关概念" class="headerlink" title="MQ的相关概念"></a>MQ的相关概念</h4><h5 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h5><p>MQ(Message queue)从字面意思上看，本质是一个队列，FIFO先进先出，只不过队列中存放的内容是message而已，还是一种跨进程的通信机制，用于上下游传递信息。在互联网架构中，MQ是一种非常常见的上下游”逻辑解耦+物理解耦“的信息通信服务。使用了MQ之后，消息发送上游只需要依赖MQ，不用依赖其他服务。</p><h5 id="为什么要用MQ"><a href="#为什么要用MQ" class="headerlink" title="为什么要用MQ"></a>为什么要用MQ</h5><p><strong>流量削峰</strong></p><p>举个例子，如果订单系统最多一秒能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余。但在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210928222518791.png" class title="image-20210928222518791"><p><strong>应用解耦</strong></p><p><strong>异步处理</strong></p><h4 id="MQ的分类"><a href="#MQ的分类" class="headerlink" title="MQ的分类"></a>MQ的分类</h4><p><strong>ActiveMQ</strong></p><p>优点：单机吞吐量万级，时效性ms级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据</p><p>缺点：</p><p>官方对ActiveMQ5.x维护越来越少，高吞吐量场景较少使用</p><p><strong>Kafka</strong></p><p>为大数据而生的中间件，以其百万级TPS的吞吐量迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着重要作用。</p><p>优点：性能卓越，单击写入TPS约在百万条/秒，最大的优点，就是吞吐量高。时效性ms级可用性非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用，消费者通过Pull方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次。主要支持简单的MQ功能，在大数据领域的实时计算以及<strong>日志采集</strong>被大规模使用</p><p>缺点：kafka单机超过64个队列/分区，Load会发生明显的飙高现象，load越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机，就会产生消息乱序</p><p><strong>RocketMQ</strong></p><p>RocketMQ出自阿里巴巴的开源产品，用Java语言实现，在设计时参考了kafka，并作出自己的一些改进。被阿里巴巴广泛应用于订单，交易，充值，流计算，消息推送，日志流式处理，binlog分发等场景</p><p>优点：<strong>单机吞吐量十万级</strong>，可用性非常高，分布式架构，<strong>消息可以做到0丢失</strong>，MQ功能较为完善，还是分布式的，扩展性好，<strong>支持十亿级别的消息堆积</strong>，不会因为堆积导致性能下降。</p><p>缺点：支持的客户端语言不多</p><p><strong>RabbitMQ</strong></p><p>2007年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一</p><p>优点：由于erlang语言的高并发特性，性能较好；吞吐量到万级，MQ功能比较完备，健壮，稳定，易用，跨平台，支持多种语言。</p><p>缺点：上夜班需要收费，学习成本较高</p><h4 id="MQ的选择"><a href="#MQ的选择" class="headerlink" title="MQ的选择"></a>MQ的选择</h4><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210928225754577.png" class title="image-20210928225754577"><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><h5 id="四大核心概念"><a href="#四大核心概念" class="headerlink" title="四大核心概念"></a>四大核心概念</h5><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210928230259050.png" class title="image-20210928230259050"><p>生产者：产生数据发送消息的程序是生产者</p><p>交换机：交换机是RabbitMQ非常重要的一个部件，一方面它接收来自消费者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或是把消息丢弃，这个由交换机决定</p><p>队列：一种数据结构，本质上是一个大的消息缓冲区</p><p>消费者：消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上，同一个应用程序既可以是生产者又可以是消费者。</p><h5 id="RabbitMQ核心部分"><a href="#RabbitMQ核心部分" class="headerlink" title="RabbitMQ核心部分"></a>RabbitMQ核心部分</h5><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210928231020720.png" class title="image-20210928231020720"><h5 id="各个名词介绍"><a href="#各个名词介绍" class="headerlink" title="各个名词介绍"></a>各个名词介绍</h5><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210928231103142.png" class title="image-20210928231103142"><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210928231334921.png" class title="image-20210928231334921"><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>官网地址：<a href="https://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ — RabbitMQ</a></p><p>安装rabbitmq前需要erlang的环境，注意版本的对应关系</p><p>下载地址：<a href="https://github.com/rabbitmq/erlang-rpm/releases">Releases · rabbitmq/erlang-rpm · GitHub</a></p><p>rabbitmq的下载地址：</p><p><a href="https://packagecloud.io/rabbitmq/rabbitmq-server/packages/el/7/rabbitmq-server-3.8.9-1.el7.noarch.rpm">el/7/rabbitmq-server-3.8.9-1.el7.noarch.rpm - rabbitmq/rabbitmq-server · packagecloud</a></p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210929001223149.png" class title="image-20210929001223149"><p>将安装包上传到/opt/rabbitmq(这个目录可以自己定)</p><p>安装文件（分别按以下顺序安装）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm ivh erlang-23.3.4.7-1.el7.x86_64.rpm</span><br><span class="line">yum install socat -y</span><br><span class="line">rpm -ivh rabbitmq-server-3.8.9-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>常用命令（按照以下顺序执行）</p><p>添加开机启动RabbitMQ服务</p><p>chkconfig rabbitmq-server on</p><p>或</p><p>systemctl enable rabbitmq-server.service</p><p>启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start rabbitmq-server</span><br><span class="line">systemctl status rabbitmq-server</span><br><span class="line">systemctl stop rabbitmq-server</span><br></pre></td></tr></table></figure><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210929002841238.png" class title="image-20210929002841238"><p>安装web管理插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210929131928849.png" class title="image-20210929131928849"><p>用默认账号密码（guest）访问地址：<a href="http://ip:15672/">http://ip:15672</a></p><p>添加一个新的用户</p><p>创建账号</p><p>rabbitmqctl add_user admin 123</p><p>设置用户角色</p><p>rabbitmqctl set_user_tags admin administrator</p><p>设置用户权限</p><p>set_permissions [-p <vhostpath>] <user> <conf> <write>  <read></read></write></conf></user></vhostpath></p><p>rabbitmqctl set_permissions -p “/“ admin “.<em>“ “.</em>“ “.*”</p><p>用户admin具有/vhost1这个virtual host 中的所有资源的配置、写、读权限</p><p>查看当前的用户和角色</p><p>rabbitmqctl list_users</p><h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h3><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--rabbitmq--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="编写生产者代码："><a href="#编写生产者代码：" class="headerlink" title="编写生产者代码："></a>编写生产者代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个连接工厂</span></span><br><span class="line">    ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置工厂IP，连接rabbitmq的队列</span></span><br><span class="line">    factory.setHost(<span class="string">&quot;116.62.122.89&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置rabbitmq用户名</span></span><br><span class="line">    factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置密码</span></span><br><span class="line">    factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Connection conn = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取信道</span></span><br><span class="line">        Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//queue：队列名称、durable：是否持久化一个队列、exclusive：是否是一个独占队列、autoDelete是否自动删除</span></span><br><span class="line">        <span class="comment">//arguments:其它阐述</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发消息</span></span><br><span class="line">        String message=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;发送完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">        channel.close();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-09-29 23:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">        factory.setHost(<span class="string">&quot;116.62.122.89&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = factory.newConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 消息成功消费时的回调</span></span><br><span class="line">            DeliverCallback deliverCallback=(tag,message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 消费者取消消费时的回调</span></span><br><span class="line">            CancelCallback cancelCallback=consumerTag -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;消息消费被中断&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Work-Queues"><a href="#Work-Queues" class="headerlink" title="Work Queues"></a>Work Queues</h3><h4 id="轮询分发消息"><a href="#轮询分发消息" class="headerlink" title="轮询分发消息"></a>轮询分发消息</h4><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210929234251862.png" class title="image-20210929234251862"><p>抽取工具类</p><p>RabbitMqUtil.Java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_HOST=<span class="string">&quot;116.62.122.89&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(SERVER_HOST);</span><br><span class="line">        factory.setUsername(USER_NAME);</span><br><span class="line">        factory.setPassword(PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取信道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = factory.newConnection();</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSource</span><span class="params">(Connection conn,Channel channel)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(channel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn=<span class="keyword">null</span>;</span><br><span class="line">    Channel channel=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    conn= RabbitMqUtil.getConnection();</span><br><span class="line">    <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel=conn.createChannel();</span><br><span class="line">            channel.queueDeclare(QUEUE_NAME,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="comment">// 阻塞等待键盘的输入</span></span><br><span class="line">            <span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line">                String message=scan.next();</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">            RabbitMqUtil.closeSource(conn,channel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><p>注意：不能关闭信道和连接，否则程序不能阻塞消费消息，会直接结束</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Worker implements Runnable &#123;</span><br><span class="line">    // 队列名称</span><br><span class="line">    private static final String QUEUE_NAME = &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        // 获取连接</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel=null;</span><br><span class="line"></span><br><span class="line">        if(conn!=null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 获取信道</span><br><span class="line">                channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">                // 定义消费成功的回调</span><br><span class="line">                DeliverCallback deliverCallback = (consumerTag, message) -&gt; &#123;</span><br><span class="line">                    System.out.println(&quot;消息接收：&quot;+new String(message.getBody()));</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                // 定义消费终止的回调</span><br><span class="line">                CancelCallback cancelCallback = consumerTag -&gt; &#123;</span><br><span class="line">                    System.out.println(&quot;消费终止&quot;);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                channel.basicConsume(QUEUE_NAME,true,deliverCallback,cancelCallback);</span><br><span class="line"></span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h4><p><strong>概念</strong></p><p>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成了一部分突然它挂掉了，会发生什么情况。RabbitMQ一旦向消费者传递了一条消息，便立即将该消息标记为删除。在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续发送给消费者的消息。</p><p>为了保证消息在发送过程中不丢失，rabbitmq引入消息应答机制，消息应答就是：消费者在接收到消息并且处理该消息之后，告诉rabbitmq它已经处理了，rabbitmq可以把该消息删除了</p><p><strong>自动应答</strong></p><p>消息发送后立即被认为已经传送成功，这种模式需要在高吞吐量和数据传输安全性做权衡。因为如果消息在接收之前，消费者的连接或channel关闭，那么消息就丢失了，当然另一方面这种模式消费者那边传递了过多的消息，没有对消息的数量进行限制，使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存耗尽，所以这种模式仅使用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</p><p><strong>消息应答的方法</strong></p><p>Channel.backAsk(用于肯定确认)</p><p>使RabbitMQ知道该消息已经成功处理，可以将其丢弃了</p><p>Channel.basicNack(用于否定确认)</p><p>Channel.basicReject(用于否定确认)</p><p>与channel.basicNack相比少一个参数（批量处理）</p><p><strong>Multiple的解释</strong></p><p>手动应答的好处是可以批量应答并且减少网络拥堵</p><p><strong>消息自动重新入队</strong></p><p>如果消息由于某些原因失去连接（其通道已关闭，连接已关闭或TCP连接丢失），导致信息未发送ACK确认，RabbitMQ将了解到消息未完全处理，并将其重新排队。如果此时其它消费者可以处理，它将很快将其重新分发给另一个消费者。这样即使某个消费者偶尔失望，也可以确认消息不会丢失</p><p><strong>消息手动应答代码</strong></p><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 队列名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE_NAME = <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Channel channel = conn.createChannel();</span><br><span class="line">                <span class="comment">// 声明一个队列</span></span><br><span class="line">                channel.queueDeclare(TASK_QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (scan.hasNext()) &#123;</span><br><span class="line">                    String message = scan.next();</span><br><span class="line">                    channel.basicPublish(<span class="string">&quot;&quot;</span>, TASK_QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">                    System.out.println(<span class="string">&quot;生产者：&quot;</span> + message);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                scan.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><p>处理时间较长</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE_NAME=<span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;work1处理消费消息时间较长....&quot;</span>);</span><br><span class="line">                DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                CancelCallback cancelCallback=(consumerTag)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者终止消费&quot;</span>);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                channel.basicConsume(TASK_QUEUE_NAME,<span class="keyword">false</span>,deliverCallback,cancelCallback);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理时间较短</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE_NAME=<span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;work2处理消费消息较短....&quot;</span>);</span><br><span class="line">                DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消费消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// deliveryTag：消息的标记</span></span><br><span class="line">                    <span class="comment">// multiple：是否批量应答；true:批量应答、false：不批量应答</span></span><br><span class="line">                    channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                CancelCallback cancelCallback=(consumerTag)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;消费者终止消费&quot;</span>);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                channel.basicConsume(TASK_QUEUE_NAME,<span class="keyword">false</span>,deliverCallback,cancelCallback);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210930122555684.png" class title="image-20210930122555684"><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210930122603727.png" class title="image-20210930122603727"><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210930122616828.png" class title="image-20210930122616828"><p>cc本应该交给work1处理，但因为work1中途挂掉了，消息自动重入队列，并交给work2处理</p><h4 id="RabbitMQ的持久化"><a href="#RabbitMQ的持久化" class="headerlink" title="RabbitMQ的持久化"></a>RabbitMQ的持久化</h4><p><strong>队列持久化</strong></p><p>要实现队列持久化，需要将queueDeclare的durable参数设为true,但若队列之前的参数为false则需要将原队列删除，然后再重新声明队列</p><p><strong>消息持久化</strong></p><p>要想让消息实现持久化需要修改消息生产者代码，添加属性MessageProperties.PERSISTENT_TEXT_PLAIN</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210930130722488.png" class title="image-20210930130722488"><p>将消息标记为持久化并不能完全保证不丢失信息。尽管它告诉RabbitMQ将信息保存到磁盘，但是这里仍然存在当消息刚准备存储在磁盘时候，但是还没有存储完，消息还在缓存的一个间隔点。此时并没有真正写入磁盘。持久性保证并不强。</p><p><strong>不公平分发</strong></p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20210930131549826.png" class title="image-20210930131549826"><p>若需要进行不公平分发，需要在消费者端进行设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>预取值</strong></p><p>定义了消费者信道中的最大堆积数量，但依旧按轮询方式进行分发，若信道中已经堆积了预取值的数量，则不再向信道中加入信息。</p><h3 id="发布确认"><a href="#发布确认" class="headerlink" title="发布确认"></a>发布确认</h3><h4 id="开启发布确认的方法"><a href="#开启发布确认的方法" class="headerlink" title="开启发布确认的方法"></a>开启发布确认的方法</h4><p>注：需要使队列持久化和消息持久化</p><p>发布确认默认是没有开启的，如果要开启需要调方法confirmSelect，每当你要想使用发布确认，都需要在channel上调用该方法。</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211006100427734.png" class title="image-20211006100427734"><h4 id="单个发布确认"><a href="#单个发布确认" class="headerlink" title="单个发布确认"></a>单个发布确认</h4><p>这是一种简单的确认方式，是一种同步确认发布的方式，也就是发布一个消息后只有它被确认发布，后续的消息才能继续发布，waitForConfirmsOrDie(long)这个方法只有在消息被确认的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常。</p><p><strong>缺点：</strong>发布速度特别慢，因为若没有确认发布的消息就会阻塞所有后续消息的发布</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishSingle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = conn.createChannel();</span><br><span class="line">        String queueName = <span class="string">&quot;single_&quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 定义队列</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CONFIRM_COUNT; i++) &#123;</span><br><span class="line">            String text=i+<span class="string">&quot;_single&quot;</span>;</span><br><span class="line">            <span class="comment">// 设置生产者发送消息为持久化消息（要求保存到磁盘上），保存在内存中</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName , MessageProperties.PERSISTENT_TEXT_PLAIN, text.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="keyword">boolean</span> flag = channel.waitForConfirms();</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end=System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;消息发布成功，耗时&quot;</span>+(end-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量发布确认"><a href="#批量发布确认" class="headerlink" title="批量发布确认"></a>批量发布确认</h4><p>与单个等待确认消息相比，先发布一批消息然后一起确认可以极大的提高吞吐量。</p><p><strong>缺点：</strong></p><p>当发生故障导致发布出现问题时，不知道是哪个消息出现问题了，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息，这种方法仍然是同步的，也会阻塞消息的发布</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量发布确认</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessageBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = conn.createChannel();</span><br><span class="line">        String queueName = <span class="string">&quot;batch_&quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 定义队列</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> batchSize = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= CONFIRM_COUNT; i++) &#123;</span><br><span class="line">            String text = i + <span class="string">&quot;_single&quot;</span>;</span><br><span class="line">            <span class="comment">// 设置生产者发送消息为持久化消息（要求保存到磁盘上），保存在内存中</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, MessageProperties.PERSISTENT_TEXT_PLAIN, text.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (i % batchSize == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> flag = channel.waitForConfirms();</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;消息发布成功，耗时&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步确认发布"><a href="#异步确认发布" class="headerlink" title="异步确认发布"></a>异步确认发布</h4><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211006104902701.png" class title="image-20211006104902701"> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步确认</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessageAsync</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line">            String queueName = <span class="string">&quot;async_&quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">            <span class="comment">// 定义队列</span></span><br><span class="line">            channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启发布确认</span></span><br><span class="line">            channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> batchSize = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 准备消息的监听器，监听哪些消息成功了，哪些消息失败了</span></span><br><span class="line">            <span class="comment">// 消息确认成功 回调函数</span></span><br><span class="line">            ConfirmCallback ackCallback=(deliveryTag,multiple)-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 消息确认失败 回调函数</span></span><br><span class="line">            <span class="comment">// deliveryTag：消息的标识</span></span><br><span class="line">            <span class="comment">// multiple：是否为批量确认</span></span><br><span class="line">            ConfirmCallback nackCallback=(deliveryTag,multiple)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未确认的消息编号：&quot;</span>+deliveryTag);</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 异步监听</span></span><br><span class="line">            channel.addConfirmListener(ackCallback,nackCallback);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= CONFIRM_COUNT; i++) &#123;</span><br><span class="line">                String text = i + <span class="string">&quot;_async&quot;</span>;</span><br><span class="line">                <span class="comment">// 设置生产者发送消息为持久化消息（要求保存到磁盘上），保存在内存中</span></span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, MessageProperties.PERSISTENT_TEXT_PLAIN, text.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;消息发布成功，耗时&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="如何处理异步未确认消息"><a href="#如何处理异步未确认消息" class="headerlink" title="如何处理异步未确认消息"></a>如何处理异步未确认消息</h4><p>最好的解决方案就是把未确认的消息放到一个基于内存的能被发布线程访问的队列，比如说用ConcurrentLinkedQueue这个队列在confirm callbacks与发布线程之间进行消息的传递。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步确认</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">publishMessageAsync</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        Channel channel = conn.createChannel();</span><br><span class="line">        String queueName = <span class="string">&quot;async_&quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 定义队列</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用来记录发布的消息</span></span><br><span class="line">        ConcurrentSkipListMap&lt;Long,Object&gt; confirms=<span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备消息的监听器，监听哪些消息成功了，哪些消息失败了</span></span><br><span class="line">        <span class="comment">// 消息确认成功 回调函数</span></span><br><span class="line">        ConfirmCallback ackCallback=(deliveryTag,multiple)-&gt;&#123;</span><br><span class="line">            <span class="comment">// 删除已经确认的消息，剩下的就是未确认的消息</span></span><br><span class="line">            <span class="keyword">if</span>(multiple)&#123;</span><br><span class="line">                <span class="comment">// 批量删除，headMap：方法用于返回此映射的键严格小于toKey的部分视图</span></span><br><span class="line">                ConcurrentNavigableMap&lt;Long, Object&gt; curMap = confirms.headMap(deliveryTag,<span class="keyword">true</span>);</span><br><span class="line">                curMap.clear();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                confirms.remove(deliveryTag);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;发布成功：&quot;</span>+deliveryTag+<span class="string">&quot;条消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 消息确认失败 回调函数</span></span><br><span class="line">        <span class="comment">// deliveryTag：消息的标识</span></span><br><span class="line">        <span class="comment">// multiple：是否为批量确认</span></span><br><span class="line">        ConfirmCallback nackCallback=(deliveryTag,multiple)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未确认的消息编号：&quot;</span>+deliveryTag);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 异步监听</span></span><br><span class="line">        channel.addConfirmListener(ackCallback,nackCallback);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= CONFIRM_COUNT; i++) &#123;</span><br><span class="line">            String text = i + <span class="string">&quot;_async&quot;</span>;</span><br><span class="line">            <span class="comment">// 设置生产者发送消息为持久化消息（要求保存到磁盘上），保存在内存中</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, MessageProperties.PERSISTENT_TEXT_PLAIN, text.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 记录下所有要发送的消息，记录消息的总和</span></span><br><span class="line">            confirms.put(channel.getNextPublishSeqNo(),text);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;消息发布成功，耗时&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><h4 id="Exchanges概念"><a href="#Exchanges概念" class="headerlink" title="Exchanges概念"></a>Exchanges概念</h4><p>RabbitMQ消息传递模型的核心思想是：<strong>生产者生产的消息从不会直接发送到队列中</strong>。实际上通常生产者甚至都不知道这些消息传递到了哪些队列中</p><p>生产者只是将消息发送到交换机，交换机一方面接收来自生产者的消息，另一方面将他们推入队列中。交换机必须知道如何处理收到的消息，是应该放到特定队列还是说把他们放到许多队列中还是丢弃他们，这就由交换机的类型来决定。</p><p><strong>Exchanges的类型</strong></p><p>default：“”默认</p><p>direct：直接</p><p>topic：主题</p><p>headers：标题</p><p>fanout：扇出</p><h4 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h4><p>每当我们连接导Rabbit时，我们都需要一个全新的空列名，为此我们可以创建一个具有随即名称的队列，或者能让服务器为我们选择一个随机队列名称就好了。其次一旦我们断开了消费者的连接，队列将被自动删除</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211006122556352.png" class title="image-20211006122556352"><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211006123134920.png" class title="image-20211006123134920">binding其实是exchange和queue之间的桥梁，它告诉我们exchange和哪个队列进行了捆绑关系。<h4 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h4><p>Fanout这种类型非常简单，正如从名称中猜到的那样，它是将接受到的所有消息广播到<strong>它知道的所有队列中</strong>。系统中默认有些exchange类型。</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211006131437193.png" class title="image-20211006131437193"><p>实例：</p><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLog1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 经过交换机进行消费</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line">            FileOutputStream fos=<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\JavaLearn\\project\\rabbitmq\\rabbitmq-learn\\rabbitmq-demo\\src\\main\\java\\com\\mjy\\rabbitmq\\filesave\\receive_log.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 声明一个交换机</span></span><br><span class="line">                channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 声明一个临时队列</span></span><br><span class="line">                String queueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 绑定交换机与队列</span></span><br><span class="line">                channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;等待接收消息......&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                DeliverCallback deliverCallback=(consumerTag, message)-&gt;&#123;</span><br><span class="line">                    fos.write(message.getBody());</span><br><span class="line">                    fos.flush();</span><br><span class="line">                &#125;;</span><br><span class="line">                channel.basicConsume(queueName,<span class="keyword">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 经过交换机进行消费</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明一个交换机</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明一个临时队列</span></span><br><span class="line">            String queueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定交换机与队列</span></span><br><span class="line">            channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;等待接收消息......&quot;</span>);</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line">            channel.basicConsume(queueName,<span class="keyword">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>生产者：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmitLog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line">                String message=scan.next();</span><br><span class="line"></span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME,<span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;生产者发送消息：&quot;</span>+message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h4><p>根据routing Key的不同，将消息发送给不同的队列中</p><p>消费者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogDirect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;console&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueBind(<span class="string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">            channel.queueBind(<span class="string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;warning&quot;</span>);</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到的消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;console&quot;</span>,<span class="keyword">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogDirect1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;disk&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueBind(<span class="string">&quot;disk&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到的消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;disk&quot;</span>,<span class="keyword">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectLogs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line">                String message=scan.next();</span><br><span class="line"></span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME,<span class="string">&quot;info&quot;</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;生产者发送消息：&quot;</span>+message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h4><p><strong>Topic的要求</strong></p><p>发送到类型是topic交换机的消息的routing_key不能随便写，必须满足一定的要求，它必须是一个单词列表，以点分隔开。这些单词可以是任意单词，比如说：”stock.usd.nyse“，”nyse.vmw“这个单词列表最多不能超过255个字节</p><p>在这个规则列表中，其中有两个替换符是大家需要注意的</p><p>*可以替代一个单词</p><p>#可以替代零个或多个单词</p><p>当一个队列绑定键是#，那么这个队列将接收所有数据，就有点像fanout了，如果队列绑定键当中没有#和*,那么该队列绑定类型就是direct</p><p><strong>实例：</strong></p><p>消费者：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ReceiveLogsTopic &#123;</span><br><span class="line">    private static final String EXCHANGE_NAME=&quot;topic_logs&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(&quot;Q1&quot;,false,false,false,null);</span><br><span class="line"></span><br><span class="line">            channel.queueBind(&quot;Q1&quot;,EXCHANGE_NAME,&quot;*.orange.*&quot;);</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag, message)-&gt;&#123;</span><br><span class="line">                System.out.println(&quot;接收到的消息：&quot;+new String(message.getBody(),&quot;UTF-8&quot;));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(&quot;Q1&quot;,true,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveLogsTopic1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;Q2&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            channel.queueBind(<span class="string">&quot;Q2&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;*.*.rabbit&quot;</span>);</span><br><span class="line">            channel.queueBind(<span class="string">&quot;Q2&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;lazy.#&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag, message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到的消息：&quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(<span class="string">&quot;Q2&quot;</span>,<span class="keyword">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicEmitLog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME=<span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">            Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(scan.hasNext())&#123;</span><br><span class="line">                String message=scan.next();</span><br><span class="line"></span><br><span class="line">                channel.basicPublish(EXCHANGE_NAME,<span class="string">&quot;province.orange.rabbit&quot;</span>,<span class="keyword">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                System.out.println(<span class="string">&quot;生产者发送消息：&quot;</span>+message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><h4 id="死信队列的概念"><a href="#死信队列的概念" class="headerlink" title="死信队列的概念"></a>死信队列的概念</h4><p>死信就是指无法消费的消息，字面意思可以这样理解，一般来说，producer将消息传递到broker或者直接到queue里，consumer从queue取出消息进行消费，但某些时候由于<strong>特定的原因导致queue中的某些信息无法被消费</strong>，这样的消息如果没有后续处理就变成了死信，有死信自然就有死信队列</p><p><strong>应用场景：</strong></p><p>为了保证订单业务的消息数据不丢失，需要使用到RabbitMQ的死信队列机制，当消息消费发生异常时，将消息投入死信队列中，或者用户在商城下单成功并点击去支付后在指定时间未支付自动失效</p><h4 id="死信的来源"><a href="#死信的来源" class="headerlink" title="死信的来源"></a>死信的来源</h4><p>消息TTL过期</p><p>队列达到最大长度（队列满了，无法再添加数据到mq中）</p><p>消息被拒绝（basic.reject或basic.nack）并且requeue=false</p><h4 id="消息TTL过期实例"><a href="#消息TTL过期实例" class="headerlink" title="消息TTL过期实例"></a>消息TTL过期实例</h4><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_EXCHANGE=<span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_EXCHANGE=<span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Channel channel = conn.createChannel();</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE,BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明两个队列</span></span><br><span class="line">        <span class="comment">// 普通队列</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; arguments=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 可以设置过期时间（但不灵活，推荐发消息时指定过期时间）单位为ms</span></span><br><span class="line">        <span class="comment">// arguments.put(&quot;x-message-ttl&quot;,10000);</span></span><br><span class="line">        <span class="comment">// 正常队列设置死信交换机</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">// 设置死信队列routingKey</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;normal_queue&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,arguments);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 死信队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;dead_queue&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定交换机</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;normal_queue&quot;</span>,NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        channel.queueBind(<span class="string">&quot;dead_queue&quot;</span>,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 死信消息 设置TTL时间 单位是ms</span></span><br><span class="line">        AMQP.BasicProperties props=<span class="keyword">new</span> AMQP.BasicProperties().builder().expiration(<span class="string">&quot;10000&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String message=<span class="string">&quot;info&quot;</span>+i;</span><br><span class="line">            channel.basicPublish(NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>,props,message.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列达到最大长度"><a href="#队列达到最大长度" class="headerlink" title="队列达到最大长度"></a>队列达到最大长度</h4><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_EXCHANGE=<span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_EXCHANGE=<span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line">            <span class="comment">// 声明交换机</span></span><br><span class="line">            channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line">            channel.exchangeDeclare(DEAD_EXCHANGE,BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 声明两个队列</span></span><br><span class="line">            <span class="comment">// 普通队列</span></span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; arguments=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">// 可以设置过期时间（但不灵活，推荐发消息时指定过期时间）单位为ms</span></span><br><span class="line">            <span class="comment">// arguments.put(&quot;x-message-ttl&quot;,10000);</span></span><br><span class="line">            <span class="comment">// 正常队列设置死信交换机</span></span><br><span class="line">            arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);</span><br><span class="line">            <span class="comment">// 设置死信队列routingKey</span></span><br><span class="line">            arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置队列长度的限制</span></span><br><span class="line">            arguments.put(<span class="string">&quot;x-max-length&quot;</span>,<span class="number">6</span>);</span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;normal_queue&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,arguments);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 死信队列</span></span><br><span class="line">            channel.queueDeclare(<span class="string">&quot;dead_queue&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定交换机</span></span><br><span class="line">            channel.queueBind(<span class="string">&quot;normal_queue&quot;</span>,NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">            channel.queueBind(<span class="string">&quot;dead_queue&quot;</span>,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 死信消息 设置TTL时间 单位是ms</span></span><br><span class="line">            <span class="comment">// AMQP.BasicProperties props=new AMQP.BasicProperties().builder().expiration(&quot;10000&quot;).build();</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String message=<span class="string">&quot;info&quot;</span>+i;</span><br><span class="line">                channel.basicPublish(NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                String str = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;info5&quot;</span>.equals(str))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;consumer接受的信息是&quot;</span>+message+<span class="string">&quot;:此消息被拒绝&quot;</span>);</span><br><span class="line">                    channel.basicReject(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接收到的消息：&quot;</span>+str);</span><br><span class="line">                    channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(QUEUE_NAME,<span class="keyword">false</span>,deliverCallback,consumerTag -&gt; &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h3><p>延时队列，队列内部是有序的，最重要的特性就体现在它的延时属性上，延时队列中的元素是希望在指定时间到了以后或之前取出和处理，简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列</p><h4 id="延迟队列的应用场景"><a href="#延迟队列的应用场景" class="headerlink" title="延迟队列的应用场景"></a>延迟队列的应用场景</h4><p>订单在十分钟之内未支付则自动取消</p><p>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒</p><p>用户注册成功后，如果三天内没有登录则进行短信提醒</p><p>用户发起退款，如果三天内没有得到处理则通知相关运营人员</p><p>预定会议后，需要在预定的时间点前十分钟通知各个参会人员参加会议</p><h3 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--RabbitMQ--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--RabbitMQ测试依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Rabbitmq</span></span><br><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">116.62.122.89</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">123</span></span><br><span class="line"><span class="meta">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br></pre></td></tr></table></figure><h4 id="队列TTL"><a href="#队列TTL" class="headerlink" title="队列TTL"></a>队列TTL</h4><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211007152625669.png" class title="image-20211007152625669"><p>声明交换机和队列</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLQueueConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通交换机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String X_EXCHANGE = <span class="string">&quot;X&quot;</span>;</span><br><span class="line">    <span class="comment">// 死信交换机名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String Y_DEAD_LETTER_EXCHANGE = <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">    <span class="comment">// 普通队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_QUEUE_A = <span class="string">&quot;QA&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL_QUEUE_B = <span class="string">&quot;QB&quot;</span>;</span><br><span class="line">    <span class="comment">// 死信队列的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAD_QUEUE_NAME = <span class="string">&quot;QD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通交换机，起别名xExchange</span></span><br><span class="line">    <span class="meta">@Bean(&quot;xExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">xExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(X_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;yExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">yExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;queueA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置死信交换机</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">        <span class="comment">// 设置routingKey</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置过期时间</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.nonDurable(NORMAL_QUEUE_A).withArguments(arguments).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;queueB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置死信交换机</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">        <span class="comment">// 设置routingKey</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置过期时间</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">40000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.nonDurable(NORMAL_QUEUE_B).withArguments(arguments).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 死信队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueD&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.nonDurable(DEAD_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueABindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,<span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueA).to(xExchange).with(<span class="string">&quot;XA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueBBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueB&quot;)</span> Queue queueB,<span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueB).to(xExchange).with(<span class="string">&quot;XB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueDBindingY</span><span class="params">(<span class="meta">@Qualifier(&quot;queueD&quot;)</span> Queue queueD,<span class="meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueD).to(yExchange).with(<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ttl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMsgController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log=LoggerFactory.getLogger(SendMsgController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始发消息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMsg/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条消息给两个TTL队列:&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date(),message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XA&quot;</span>,<span class="string">&quot;消息来自ttl10s的队列：&quot;</span>+message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XB&quot;</span>,<span class="string">&quot;消息来自ttl40s的队列：&quot;</span>+message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLetterQueueListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log= LoggerFactory.getLogger(SendMsgController.class);</span><br><span class="line">    <span class="comment">// 接收消息</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues=&quot;QD&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveD</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String msg=<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;,接收到死信队列的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date(),msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="延时队列优化"><a href="#延时队列优化" class="headerlink" title="延时队列优化"></a>延时队列优化</h4><p>再声明一个普通队列不设置过期时间，在发送消息的时候设置过期时间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;queueC&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">queueC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 设置死信交换机</span></span><br><span class="line">    arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">    <span class="comment">// 设置routingKey</span></span><br><span class="line">    arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.nonDurable(NORMAL_QUEUE_C).withArguments(arguments).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueCBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueC&quot;)</span> Queue queueC,<span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueC).to(xExchange).with(<span class="string">&quot;XC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者发送消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/sendMsg/&#123;message&#125;/&#123;delayTime&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message,<span class="meta">@PathVariable</span> String delayTime)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条时延为&#123;&#125;ms的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date(),delayTime,message);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.convertSendAndReceive(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XC&quot;</span>,message, msg-&gt;&#123;</span><br><span class="line">        msg.getMessageProperties().setExpiration(delayTime);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在的问题：在消息属性上设置TTL的方式，消息可能并不会按时“死亡”，因为RabbitMQ只会检查第一个消息是否过期，如果过期则放到死信队列中，若第一个消息的延时时长很长，而第二条消息的延时时长很短，第二个消息并不会优先得到执行。</p><h4 id="RabbitMQ插件实现延时队列"><a href="#RabbitMQ插件实现延时队列" class="headerlink" title="RabbitMQ插件实现延时队列"></a>RabbitMQ插件实现延时队列</h4><p>安装插件</p><p>在<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases">Releases · rabbitmq/rabbitmq-delayed-message-exchange · GitHub</a>上下载</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211008145102905.png" class title="image-20211008145102905"><p>并将它拷贝到/usr/lib/rabbitmq/lib/rabbitmq_server-3.8.9/plugins/目录下</p><p>安装</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p>安装成功：</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211008145421500.png" class title="image-20211008145421500"><p>安装后，需要重新启动rabbitmq服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><p>安装成功后，客户端会出现一个新的类型的交换机</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211008145851281.png" class title="image-20211008145851281"><p>基于插件的延迟队列</p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211008150037546.png" class title="image-20211008150037546"><p><strong>代码实现：</strong></p><p>编写配置类，声明交换机和队列</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedQueueConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_EXCHANGE_NAME=<span class="string">&quot;delayed.exchange&quot;</span>;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_QUEUE_NAME=<span class="string">&quot;delayed.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// routingKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY=<span class="string">&quot;delayed.routingKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;delayExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayedExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; arguments=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        arguments.put(<span class="string">&quot;x-delayed-type&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAYED_EXCHANGE_NAME,<span class="string">&quot;x-delayed-message&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,arguments);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;delayedQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayedQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.nonDurable(DELAYED_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">queueBindExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;delayedQueue&quot;)</span> Queue delayedQueue,<span class="meta">@Qualifier(&quot;delayExchange&quot;)</span> CustomExchange delayExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue).to(delayExchange).with(ROUTING_KEY).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/sendDelayMsg/&#123;message&#125;/&#123;delayTime&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message,<span class="meta">@PathVariable</span> Integer delayTime)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条时延为&#123;&#125;ms的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date(),delayTime,message);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertSendAndReceive(DelayedQueueConfig.DELAYED_EXCHANGE_NAME,DelayedQueueConfig.ROUTING_KEY,message, msg-&gt;&#123;</span><br><span class="line">            msg.getMessageProperties().setDelay(delayTime);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编写消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayQueueConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log= LoggerFactory.getLogger(DelayQueueConsumer.class);</span><br><span class="line">    <span class="comment">// 接收消息</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues=DelayedQueueConfig.DELAYED_QUEUE_NAME)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMsg</span><span class="params">(Message message)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String msg=<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;当前时间:&#123;&#125;,接受到延迟队列的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date(),msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发布确认高级"><a href="#发布确认高级" class="headerlink" title="发布确认高级"></a>发布确认高级</h3><p>解决生产者在发送消息的过程中，由于交换机或队列挂了导致消息丢失的问题</p><p>实例：</p><p>编写配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_EXCHANGE=<span class="string">&quot;confirm.exchange&quot;</span>;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_QUEUE=<span class="string">&quot;confirm.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// routingKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY=<span class="string">&quot;confirmKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">confirmExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(CONFIRM_EXCHANGE,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">confirmQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.nonDurable(CONFIRM_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding  <span class="title">confirmQueueBindConfirmExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                    <span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(ROUTING_KEY);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log= LoggerFactory.getLogger(ProducerController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMsg/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息内容为：&#123;&#125;&quot;</span>,message);</span><br><span class="line">        rabbitTemplate.convertSendAndReceive(ConfirmConfig.CONFIRM_EXCHANGE,ConfirmConfig.ROUTING_KEY,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log= LoggerFactory.getLogger(Consumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues=ConfirmConfig.CONFIRM_QUEUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg=<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;当前时间为：&#123;&#125;，接收到来自交换机的信息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> Date(),msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallBack</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log= LoggerFactory.getLogger(MyCallBack.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在的这个实现类，并未在RabbitTemplate中，RabbitTemplate无法调用，需要进行注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData 保存回调信息的ID及内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack 交换机是否收到消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机成功接受到消息&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机未接收到消息，原因是：&#123;&#125;&quot;</span>,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开启发布确认：</strong></p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211008165944513.png" class title="image-20211008165944513"><h4 id="回退消息"><a href="#回退消息" class="headerlink" title="回退消息"></a>回退消息</h4><p><strong>Mandatory参数</strong></p><p>在仅开启了生产者确认机制的情况下，交换机接受到消息后，会直接给消息生产者发送确认信息，如果发现该消息不可路由，那么消息会被直接丢弃，此时生产者是不知道消息被丢弃这个事件的。通过设置Mandatory参数可以在当消息传递过程中不可达目的地时将消息返回给生产者</p><p>在application.properties设置发布退回</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.publisher-returns</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>回调实现ReturnCallBack接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallBack</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span>, <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log= LoggerFactory.getLogger(MyCallBack.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在的这个实现类，并未在RabbitTemplate中，RabbitTemplate无法调用，需要进行注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData 保存回调信息的ID及内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack 交换机是否收到消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机成功接受到消息&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机未接收到消息，原因是：&#123;&#125;&quot;</span>,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只有不可到达目的地时才进行回退</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息：&#123;&#125;,被交换机&#123;&#125;回退了，回退原因：&#123;&#125;,routingKey：&#123;&#125;&quot;</span>,<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>),exchange,replyText,routingKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h4><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211009111354020.png" class title="image-20211009111354020"><p>实例代码</p><p>声明交换机和队列</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_EXCHANGE=<span class="string">&quot;confirm.exchange&quot;</span>;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIRM_QUEUE=<span class="string">&quot;confirm.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// routingKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY=<span class="string">&quot;confirmKey&quot;</span>;</span><br><span class="line">    <span class="comment">// 备份交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BACK_UP_EXCHANGE=<span class="string">&quot;backup.exchange&quot;</span>;</span><br><span class="line">    <span class="comment">// 备份队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BACK_UP_QUEUE=<span class="string">&quot;backup.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 警告队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WARNING_QUEUE=<span class="string">&quot;warning.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">confirmExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.directExchange(CONFIRM_EXCHANGE).durable(<span class="keyword">true</span>).withArgument(<span class="string">&quot;alternate-exchange&quot;</span>,BACK_UP_EXCHANGE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">confirmQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;backupExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">backupExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(BACK_UP_EXCHANGE,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;backupQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">backupQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(BACK_UP_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;warningQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">warningQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(WARNING_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding  <span class="title">confirmQueueBindConfirmExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                    <span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(ROUTING_KEY);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">backupQueueBindExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="meta">@Qualifier(&quot;backupQueue&quot;)</span> Queue backupQueue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(backupQueue).to(backupExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">warningQueueBindExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           <span class="meta">@Qualifier(&quot;warningQueue&quot;)</span> Queue warningQueue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(warningQueue).to(backupExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarningConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log= LoggerFactory.getLogger(WarningConsumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues=ConfirmConfig.WARNING_QUEUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessageWarn</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String str=<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;接收到不可路由的一条消息：&#123;&#125;&quot;</span>,str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log= LoggerFactory.getLogger(ProducerController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMsg/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息内容为：&#123;&#125;&quot;</span>,message);</span><br><span class="line">        rabbitTemplate.convertSendAndReceive(ConfirmConfig.CONFIRM_EXCHANGE,ConfirmConfig.ROUTING_KEY,message);</span><br><span class="line">        rabbitTemplate.convertSendAndReceive(ConfirmConfig.CONFIRM_EXCHANGE,ConfirmConfig.ROUTING_KEY+<span class="string">&quot;12&quot;</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mandatory参数与备份交换机可以一起使用时，若两者同时开启，<strong>备份交换机的优先级高</strong></p><h3 id="RabbitMQ的其它知识点"><a href="#RabbitMQ的其它知识点" class="headerlink" title="RabbitMQ的其它知识点"></a>RabbitMQ的其它知识点</h3><h4 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h4><p><strong>概念：</strong></p><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。</p><p><strong>消息重复消费</strong></p><p>消费者在消费MQ中的消息时，MQ已把消息发给消费者，消费者在给MQ返回ack时网络中断，导致MQ未收到消息确认，该消息会重新发给其它的消费者，或者在网络重连后再次将消息发给消费者，而该消费者之前已经消费过该消息了，导致消息重复消费。</p><p>解决方案：</p><p><strong>唯一ID+指纹码机制</strong></p><p>指纹码：我们的一些规则或者时间戳加别的服务得到的唯一信息码，它并不一定是我们系统生成的，基本都是由我们的业务规则拼接而来，但是一定要保证唯一性，然后就利用查询语句进行判断这个id是否存在在数据库中，优势就是实现简单就一个拼接，然后查询判断是否重复；劣势就是在高并发时，如果是单个数据库就会有写入性能瓶颈当然也可以采用分库分表提升性能。</p><p><strong>Redis原子性</strong></p><p>利用redis执行setnx命令，天然具有幂等性。从而实现不重复消费。</p><h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><p>实现实例</p><p>生产者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;priority.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            Map&lt;String,Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            arguments.put(<span class="string">&quot;x-max-priority&quot;</span>,<span class="number">10</span>);</span><br><span class="line">            channel.queueDeclare(QUEUE_NAME,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,arguments);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String message=<span class="string">&quot;info&quot;</span>+i;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">                    AMQP.BasicProperties props=<span class="keyword">new</span> AMQP.BasicProperties().builder().priority(<span class="number">5</span>).build();</span><br><span class="line">                    channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,props,message.getBytes());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送完毕！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;priority.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = RabbitMqUtil.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Channel channel = conn.createChannel();</span><br><span class="line"></span><br><span class="line">            DeliverCallback deliverCallback=(consumerTag,message)-&gt;&#123;</span><br><span class="line">                String msg=<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：&quot;</span>+msg);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,consumerTag-&gt;&#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211009121919944.png" class title="image-20211009121919944"><h4 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h4><p><strong>使用场景</strong></p><p>RabbitMQ从3.6.0版本开始引入了惰性队列的概念。惰性队列会尽可能的将消息存入磁盘中，而在消费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标是能够支持更长的队列，即支持更多的消息存储。当消费者由于各种各样的原因（比如消费者下线、宕机亦或是由于维护而关闭等）而致使长时间内不能消费消息造成堆积时，惰性队列就很有必要了。</p><p>默认情况下，当生产者将消息发送到RabbitMQ的时候，队列中的消息会尽可能的存储在内存中，这样可以更加快速的将消息发送给消费者。即使是持久化的消息，在被写入磁盘的同时也会在内存中驻留一份备份。当RabbitMQ需要释放内存时，会将内存中的信息换页至磁盘中，这个操作会耗费较长时间，也会阻塞队列的操作，进而无法接收新的消息。</p><p><strong>两种模式</strong></p><img src="/2021/09/28/RabbitMq%E5%AD%A6%E4%B9%A0/image-20211009133542836.png" class title="image-20211009133542836"><h3 id="RabbitMQ集群搭建"><a href="#RabbitMQ集群搭建" class="headerlink" title="RabbitMQ集群搭建"></a>RabbitMQ集群搭建</h3><p>准备三台机器</p><p>修改3台机器的主机名称</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure><p>配置各个节点的hosts文件，让各个节点能够互相识别对方</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p>确保各个节点的cookie文件使用的是同一个值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp /var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmq/.erlang.cookie</span><br><span class="line">scp /var/lib/rabbitmq/.erlang.cookie root@node1:/var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><p>启动RabbitMQ服务顺带启动Erlang虚拟机和RabbitMQ应用服务（在三台节点上分别执行以下命令）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>在节点2执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rabbitmqctl stop 会将erlang虚拟机关闭，rabbitmqctl stop_app只关闭RabbitMQ服务</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"></span><br><span class="line">rabbitmqctl join_cluster rabbit@node1</span><br><span class="line"><span class="comment">#只启动应用服务</span></span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>在节点3执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rabbitmqctl stop 会将erlang虚拟机关闭，rabbitmqctl stop_app只关闭RabbitMQ服务</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"></span><br><span class="line">rabbitmqctl join_cluster rabbit@node2</span><br><span class="line"><span class="comment">#只启动应用服务</span></span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>查看集群状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p>需要重新设置用户</p><p>创建账户</p><p>rabbitmqctl add_user admin 1234</p><p>设置用户角色：</p><p>rabbitmqctl set_user_tags admin administrator</p><p>设置用户权限</p><p>rabbitmqctl set_permissions -p “/“ admin “.<em>“ “.</em>“ “.*”</p><p>解除集群节点(node2和node3分别执行)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line">rabbitmqctl forget_cluster_node rabbit@node2(node1机器执行)</span><br></pre></td></tr></table></figure><h4 id="镜像队列"><a href="#镜像队列" class="headerlink" title="镜像队列"></a>镜像队列</h4><p>如果RabbitMQ集群中只有一个Broker节点，那么该节点的失效将导致整体服务的临时不可用，并且也可能会导致消息的丢失。可以将消息设置为持久化，并且对应的队列也进行持久化，但是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被写入磁盘并执行刷盘动作之间存在一个短暂却会产生问题的时间窗。引入镜像队列的机制，可以将队列镜像到集群中的其它Broker节点之上，如果集群中的一个节点失效了，队列能自动地切换到镜像的另一个节点上，保证服务的可用性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>秒杀项目（一）：准备</title>
      <link href="/2021/09/28/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%87%86%E5%A4%87/"/>
      <url>/2021/09/28/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><h4 id="在数据库中新创建一个数据库"><a href="#在数据库中新创建一个数据库" class="headerlink" title="在数据库中新创建一个数据库"></a><strong>在数据库中新创建一个数据库</strong></h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database seckill</span><br></pre></td></tr></table></figure><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><p>商品详情表：<code>sk_goods</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sk_goods` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;商品ID&#x27;</span>,</span><br><span class="line">  `goods_name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `goods_title` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  `goods_img` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品图片&#x27;</span>,</span><br><span class="line">  `goods_detail` longtext COMMENT <span class="string">&#x27;商品详情&#x27;</span>,</span><br><span class="line">  `goods_price` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `goods_stock` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;商品库存，-1表示没有限制&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>商品秒杀详情：<code>sk_goods_seckill</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sk_goods_seckill` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;秒杀商品id&#x27;</span>,</span><br><span class="line">  `goods_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  `seckill_price` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0.00&#x27;</span> COMMENT <span class="string">&#x27;秒杀价&#x27;</span>,</span><br><span class="line">  `stock_count` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">  `start_date` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秒杀开始时间&#x27;</span>,</span><br><span class="line">  `end_date` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秒杀结束时间&#x27;</span>,</span><br><span class="line">  `version` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;并发版本控制&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>订单表：<code>sk_order</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sk_order` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `goods_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `u_uid_gid` (`user_id`,`goods_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>订单详情：<code>sk_order_info</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sk_order_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `goods_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `delivery_addr_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `goods_name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `goods_count` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `goods_price` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `order_channel` tinyint <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单渠道，1在线，2android，3ios&#x27;</span>,</span><br><span class="line">  `status` tinyint <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态，0新建未支付，1已支付，2已发货，3已收货，4已退款，5已完成&#x27;</span>,</span><br><span class="line">  `create_date` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pay_date` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>用户表：<code>sk_user</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sk_user` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;MD5(MD5(pass明文+固定salt)+salt&#x27;</span>,</span><br><span class="line">  `salt` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;混淆盐&#x27;</span>,</span><br><span class="line">  `head` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头像，云存储的ID&#x27;</span>,</span><br><span class="line">  `register_date` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;注册时间&#x27;</span>,</span><br><span class="line">  `last_login_date` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;上次登录时间&#x27;</span>,</span><br><span class="line">  `login_count` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;登录次数&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><img src="/2021/09/28/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%87%86%E5%A4%87/image-20210928192032332.png" class title="image-20210928192032332"><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p><strong>技术栈</strong>：</p><p>SpringBoot、Redis、Mybatis、RabbitMQ、thymeleaf</p><h5 id="新建一个SpringBoot项目"><a href="#新建一个SpringBoot项目" class="headerlink" title="新建一个SpringBoot项目"></a>新建一个SpringBoot项目</h5><p>这里使用了aliyun作为源</p><img src="/2021/09/28/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%87%86%E5%A4%87/image-20210928192329898.png" class title="image-20210928192329898"><h5 id="导入相关依赖"><a href="#导入相关依赖" class="headerlink" title="导入相关依赖"></a>导入相关依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.project<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seckill<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>seckill<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--验证JavaBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--RabbitMq--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.project.seckill.SeckillApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发，秒杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h3><h4 id="1-1-NoSQL数据库概述"><a href="#1-1-NoSQL数据库概述" class="headerlink" title="1.1 NoSQL数据库概述"></a>1.1 NoSQL数据库概述</h4><p>NoSQL(Not Only SQL)，泛指<strong>非关系型数据库</strong>，NoSQL不依赖业务逻辑方式存储，而以简单的<strong>key-value</strong>模式存储。因此大大的增加了数据库的扩展能力。</p><p><strong>特点：</strong></p><ul><li>不遵循SQL标准</li><li>不支持ACID</li><li>远超SQL的性能</li></ul><h4 id="1-2-NoSQL的适用场景"><a href="#1-2-NoSQL的适用场景" class="headerlink" title="1.2 NoSQL的适用场景"></a>1.2 NoSQL的适用场景</h4><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据搞扩展性的</li></ul><h4 id="1-3-NoSQL不适用-的场景"><a href="#1-3-NoSQL不适用-的场景" class="headerlink" title="1.3 NoSQL不适用 的场景"></a>1.3 NoSQL不适用 的场景</h4><ul><li>需要事务支持</li><li>基于sql的结构化查询，处理复杂的关系，需要即席查询</li></ul><h4 id="1-4-NoSQL数据库"><a href="#1-4-NoSQL数据库" class="headerlink" title="1.4 NoSQL数据库"></a>1.4 NoSQL数据库</h4><p><strong>Memcache</strong></p><p><strong>特点：</strong></p><ul><li>数据都在内存中，一般不持久化</li><li>支持简单的key-value模式，<strong>支持类型单一</strong></li><li>一般作为<strong>缓存数据库</strong>辅助持久化的数据库</li></ul><p><strong>Redis</strong></p><p><strong>特点：</strong></p><ul><li>几乎覆盖了Memcache的绝大部分功能</li><li>数据都在内存中，<strong>支持持久化</strong>，主要用作数据备份恢复</li><li>除了支持简单的<strong>key-value</strong>模式，还支持多种数据结构的存储，如 <strong>list、set、hash、zset</strong>等</li><li>一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</li></ul><p><strong>MongoDB</strong></p><p><strong>特点：</strong></p><ul><li>高性能、开源、模式自由的文档型数据库</li><li>数据都在内存中，如果内存不足，把不常用的数据保存到硬盘上</li><li>虽然是key-value模式，但是对value（尤其是json）提供了丰富的查询功能。</li><li>支持二进制数据及大型对象</li><li>可以根据数据的特点替代RDBMS，成为独立的数据库。或者配合RDBMS，存储特定的数据</li></ul><h3 id="Redis概述安装"><a href="#Redis概述安装" class="headerlink" title="Redis概述安装"></a>Redis概述安装</h3><h4 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h4><ul><li>Redis是一个开源的key-value存储系统</li><li>和Memcached类似，它支持存储的value类型相对更多，包括String、list、set、zset(有序集合)、hash</li><li>这些数据操作都支持push/pop、add/remove及取交集并集和差集及更丰富的的操作，而且这些操作都是原子性的</li><li>在此基础上，Redis支持各种不同方式的排序</li><li>数据缓存在内存中，Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件 </li><li>实现了主从同步</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>配合关系型数据库做高速缓存</p><ul><li>高频次，热门访问的数据，减少数据库I/O</li><li>分布式架构，做session共享</li></ul><p>多样数据结构存储持久化数据：</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210920132655339.png" class title="image-20210920132655339"><h4 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h4><p>具体安装步骤略</p><p><strong>默认安装目录：</strong></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">/usr/local/bin</span><br></pre></td></tr></table></figure><p>查看默认安装目录：</p><p>redis-benchmark：性能检测工具，可以在 自己本机运行，看看自己本机性能如何</p><p>redis-check-aof：修复有问题的AOF文件</p><p>redis-check-dump：修复有问题的dump.rdb文件</p><p>redis-sentinel：Redis集群使用</p><p><strong>redis-server</strong>：Redis服务器启动命令</p><p><strong>redis-cli</strong>：客户端，操作入口</p><p><strong>启动方式：</strong></p><p>前台启动（不推荐）：不能关闭启动界面</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>后台启动（推荐）：</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210920144819288.png" class title="image-20210920144819288"><p>将redis.conf文件复制一份到/etc/redis.conf</p><p>将/etc目录下的redis.conf文件中的 <code>daemonize</code>  改成yes</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210920145549953.png" class title="image-20210920145549953"><h4 id="Redis相关知识介绍"><a href="#Redis相关知识介绍" class="headerlink" title="Redis相关知识介绍"></a>Redis相关知识介绍</h4><p>Redis的默认端口号为：6379</p><p>默认16个数据库，类似数组下标从0开始，初始默认使用<strong>0号库</strong></p><p>使用select dbid来切换数据库，例如：select 8</p><p>同一密码管理，所有库同样的密码</p><p><strong>dbsize</strong>：查看当前数据库的key的数量</p><p><strong>flushdb 清空当前库</strong></p><p><strong>flushall  清空所有库</strong></p><p>Redis是单线程+多路IO复用技术</p><p>多路复用是指使用一个线程来检查多个文件描述符(Socket)的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。</p><p>Memcached：多线程+锁</p><p>Redis：单线程+多路IO复用技术</p><h3 id="常用五大数据类型"><a href="#常用五大数据类型" class="headerlink" title="常用五大数据类型"></a>常用五大数据类型</h3><p>获得redis常见数据类型操作命令：<a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p><h4 id="Redis键-key"><a href="#Redis键-key" class="headerlink" title="Redis键(key)"></a>Redis键(key)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前库所有key</span></span><br><span class="line">keys *</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断key是否存在</span></span><br><span class="line">exists key</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看你的key是什么类型的</span></span><br><span class="line"><span class="built_in">type</span> key</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除指定的key数据</span></span><br><span class="line">del key</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据value选择非阻塞删除:仅将keys从keyspace元数据中删除，真#正的删除会在后续异步操作</span></span><br><span class="line">unlink key</span><br><span class="line"></span><br><span class="line"><span class="comment">#为给定的key设置过期时间</span></span><br><span class="line">expire key 10</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看还有多少秒过期，-1表示永不过期，-2表示已过期</span></span><br><span class="line">ttl key</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置key-value</span></span><br><span class="line"><span class="built_in">set</span> key value</span><br></pre></td></tr></table></figure><h4 id="Redis字符串（String）"><a href="#Redis字符串（String）" class="headerlink" title="Redis字符串（String）"></a>Redis字符串（String）</h4><p>String是Redis最基本的类型，一个key对应一个value</p><p>String类型<strong>是二进制安全的</strong>。意味着Redis的string可以包含任何数据。比如jpg图片或序列化的对象</p><p>一个Redis中字符串value最多可以是<strong>512M</strong></p><p><strong>常用命令：</strong></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#添加键值对</span><br><span class="line">#NX：当数据库中key不存在时，可以将key-value添加到数据库</span><br><span class="line">#XX：当数据库中key存在时，可以将key-value添加到数据库，与NX参数互斥</span><br><span class="line">#EX：key的超时秒数</span><br><span class="line">#PX：key的超时毫秒数，与EX互斥</span><br><span class="line"><span class="built_in">set</span> key value 参数</span><br><span class="line"></span><br><span class="line">#查询对应键值</span><br><span class="line">get key</span><br><span class="line"></span><br><span class="line">#将给定的value追加到原值的末尾</span><br><span class="line"><span class="built_in">append</span> key value</span><br><span class="line"></span><br><span class="line">#获得值的长度</span><br><span class="line">strlen key</span><br><span class="line"></span><br><span class="line">#只有在key不存在时，设置key的值</span><br><span class="line">setnx key value</span><br><span class="line"></span><br><span class="line">#将key中存储的数字值增<span class="number">1</span>，只能对数字进行操作，如果为空，新增值为<span class="number">1</span></span><br><span class="line">incr key</span><br><span class="line"></span><br><span class="line">#将key中存储的数字值减<span class="number">1</span>,只能对数字进行操作，如果为空，新增值为-<span class="number">1</span></span><br><span class="line">decr key</span><br><span class="line"></span><br><span class="line">#将key中存储的数字值增减。自定义步长</span><br><span class="line">incrby/decrby key 步长</span><br><span class="line"></span><br><span class="line">#同时设置一个或多个键值对</span><br><span class="line">mset key1 value1 key2 value2</span><br><span class="line"></span><br><span class="line">#同时获取一个或多个value</span><br><span class="line">mget key1 key2 key3</span><br><span class="line"></span><br><span class="line">#同时设置一个或多个key-value对，当且仅当所有给定key都不存在</span><br><span class="line">#原子性，有一个失败则都失败</span><br><span class="line">msetnx key1 value1 key2 value2</span><br><span class="line"></span><br><span class="line">#获取值的范围，类似于substring,前闭、后闭</span><br><span class="line">getrange key 起始位置 结束位置</span><br><span class="line"></span><br><span class="line">#用value覆写key所存储的字符串值，从起始位置开始（索引从<span class="number">0</span>开始）</span><br><span class="line">setrange key 起始位置 value</span><br><span class="line"></span><br><span class="line">#设置键值的同时，设置过期时间，单位秒</span><br><span class="line">setex key 过期时间 value</span><br><span class="line"></span><br><span class="line">#以新换旧，设置了心智同时获得旧值</span><br><span class="line">getset key value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>incr是原子操作</p><p>原子操作：不会被线程调度机制打断的操作</p><p>这种操作一旦开始，就一直运行到结束，中间不会有任何context switch（切换到另一个线程）</p><ul><li>在单线程中，能够在单挑指令中完成的操作都可以被认为是“原子操作”，因为中断只能发生于指令之间</li><li>在多线程中，不能被其它进程（线程）打断的操作就叫原子操作</li></ul><p>Redis单命令的原子性主要得益于Redis的单线程</p><p>Redis String底层数据结构为简单动态字符串，是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配</p><h4 id="Redis-List"><a href="#Redis-List" class="headerlink" title="Redis(List)"></a>Redis(List)</h4><p>单值多键，Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部或者尾部</p><p>它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标操作中间的节点性能会较差。</p><p><strong>常用命令：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从左边|右边插入一个或多个值</span></span><br><span class="line">lpush/rpush key value1 value2</span><br><span class="line"></span><br><span class="line"><span class="comment">#从左边|右边取出一个值（并移除），值在键在，值光键亡</span></span><br><span class="line">lpop/rpop key</span><br><span class="line"></span><br><span class="line"><span class="comment">#从key1列表中右边取出一个值，插到key2列表的左边</span></span><br><span class="line">rpoplpush key1 key2</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照索引下标获得元素（从左到右）0 -1指取所有值</span></span><br><span class="line">lrange key start stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照索引下标获得元素（从左到右）</span></span><br><span class="line">lindex key index</span><br><span class="line"></span><br><span class="line"><span class="comment">#获得列表长度</span></span><br><span class="line">llen key</span><br><span class="line"></span><br><span class="line"><span class="comment">#在value后面插入newvalue</span></span><br><span class="line">linsert key before value newvalue</span><br><span class="line"></span><br><span class="line"><span class="comment">#从左边删除n个value</span></span><br><span class="line">lrem key n value</span><br><span class="line"></span><br><span class="line"><span class="comment">#将列表下标为index的值替换成value</span></span><br><span class="line">lset key value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Redis（List）底层结构</strong></p><p>List底层数据结构为quickList,在列表元素较少的情况下会使用一块连续的的内存存储，这个结构是zipList，即压缩列表。</p><p>压缩列表：将所有的元素紧挨着一起存储，分配的是一块连续的内存</p><p>当数据量比较大时才会改成quicklist</p><p>普通的链表需要的附加指针空间太大，会比较浪费空间，比如列表中存储的是int类型的数据，结构上还需要两个额外的指针prev和next</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210920174603605.png" class title="image-20210920174603605"><p>Redis将链表和ziplist结合起来组成了quicklist。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余</p><h4 id="Redis（set）"><a href="#Redis（set）" class="headerlink" title="Redis（set）"></a>Redis（set）</h4><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将一个或多个member元素加到集合key中，已经存在的member元素将被忽略</span></span><br><span class="line">sadd key value1 value2</span><br><span class="line"></span><br><span class="line"><span class="comment">#取出该集合的所有值</span></span><br><span class="line">smembers key</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断集合key是否含有该value值，有1，没有0</span></span><br><span class="line">sismember key value</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回该集合的元素的个数</span></span><br><span class="line">scard key</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除集合中的某个元素</span></span><br><span class="line">srem key value1 value2</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机从该集合中吐出一个值</span></span><br><span class="line">spop key</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机从集合中取出n个值。不会从集合中删除</span></span><br><span class="line">srandmember key n</span><br><span class="line"></span><br><span class="line"><span class="comment">#把集合中一个值从一个集合移动到另一个集合</span></span><br><span class="line">smove <span class="built_in">source</span> destination value</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回两个集合的交集元素</span></span><br><span class="line">sinter key1 key2</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回两个集合的并集元素</span></span><br><span class="line">sunion key1 key2</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回集合的差集元素（key1中的，不包含key2中的）</span></span><br><span class="line">sdiff key1 key2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>数据结构：</strong></p><p>Set数据结构是dict字典，字典是用哈希表实现的</p><h4 id="Redis（hash）"><a href="#Redis（hash）" class="headerlink" title="Redis（hash）"></a>Redis（hash）</h4><p>Redis hash 是一个键值对集合</p><p>Redis hash是一个String类型的field和value的映射表，hash特别适合存储对象，类似于Java中的Map</p><p>​    </p><p><strong>常用命令：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给key集合中的field键赋值value</span></span><br><span class="line">hset key field value</span><br><span class="line"></span><br><span class="line"><span class="comment">#从key集合field取出value</span></span><br><span class="line">hget key field</span><br><span class="line"></span><br><span class="line"><span class="comment">#批量设置hash的值</span></span><br><span class="line">hmset key1 field1 value1 filed2 value2</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看哈希表key中，给定field是否存在</span></span><br><span class="line">hexists key field</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出该hash集合的所有field</span></span><br><span class="line">hkeys key</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出该hash集合的所有value</span></span><br><span class="line">hvals key</span><br><span class="line"></span><br><span class="line"><span class="comment">#为哈希表key中的域field的值加上增量 1 -1</span></span><br><span class="line">hincrby key field increment</span><br><span class="line"></span><br><span class="line"><span class="comment">#将哈希表key中的域field值设置成value，当且仅当field不存在</span></span><br><span class="line">hsetnx key field value</span><br></pre></td></tr></table></figure><p><strong>数据结构：</strong></p><p>Hash类型对应的数据结构是两种：ziplist（压缩列表）,hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable</p><h4 id="Redis有序集合Zset（sorted-set）"><a href="#Redis有序集合Zset（sorted-set）" class="headerlink" title="Redis有序集合Zset（sorted set）"></a>Redis有序集合Zset（sorted set）</h4><p><strong>常用命令：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将一个或多个member元素及其score值加入到有序集key当中</span></span><br><span class="line">zadd key score1 value score2 value2</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回有续集key中,下标start stop之间的元素，带WITHSCORED可以让分数一起和值返回到结果集</span></span><br><span class="line">zrange key start stop </span><br><span class="line"></span><br><span class="line"><span class="comment">#返回有续集,所有score 介于min和max之间（包括min和max）有序集合集key中，有序列表成员按score值大小按序排列</span></span><br><span class="line">zrangebyscore key min max [withscores] [<span class="built_in">limit</span> offset count]</span><br><span class="line"></span><br><span class="line"><span class="comment">#同上，改为从大到小</span></span><br><span class="line">zrevrangebyscore key max min [withscores] [<span class="built_in">limit</span> offset count]</span><br><span class="line"></span><br><span class="line"><span class="comment">#为元素的score加上增量</span></span><br><span class="line">zincrby key increment value</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除该集合下，指定值的元素</span></span><br><span class="line">zrem key value</span><br><span class="line"></span><br><span class="line"><span class="comment">#统计该集合，分数区间内的元素个数</span></span><br><span class="line">zcount key min max</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回该值在集合中的排名，从0开始</span></span><br><span class="line">zrank key value</span><br></pre></td></tr></table></figure><h3 id="Redis配置文件介绍"><a href="#Redis配置文件介绍" class="headerlink" title="Redis配置文件介绍"></a>Redis配置文件介绍</h3><h3 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h3><h4 id="什么是发布和订阅"><a href="#什么是发布和订阅" class="headerlink" title="什么是发布和订阅"></a>什么是发布和订阅</h4><p>Redis发布订阅（pub/sub）是一种消息通信模式：发送者（pub）发送消息，订阅者（sub）接收消息</p><p>Redis客户端可以订阅任意数量的频道</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921181328953.png" class title="image-20210921181328953"><h4 id="发布订阅命令行实现"><a href="#发布订阅命令行实现" class="headerlink" title="发布订阅命令行实现"></a>发布订阅命令行实现</h4><p>1、打开一个客户端订阅channel1</p><p><code>SUBSCRIBE  channel1</code></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921181729571.png" class title="image-20210921181729571"><p>2、打开另一个客户端，给channel1发布消息hello</p><p><code>pushlish  channel1  xxxx</code></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921181951793.png" class title="image-20210921181951793"><p>3、第一个客户端可以看到发送的消息</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921182058932.png" class title="image-20210921182058932"><h3 id="Redis新数据类型"><a href="#Redis新数据类型" class="headerlink" title="Redis新数据类型"></a>Redis新数据类型</h3><h4 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h4><p>可进行位操作的字符串</p><p><strong>命令：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置Bitmaps中某个偏移量的值（0 或 1）</span></span><br><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921183140397.png" class title="image-20210921183140397"><p>注：在第一次初始化Bitmaps时，假如偏移量非常大，那么整个初始化过程执行会比较慢，可能会造成Redis阻塞</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取Bitmaps中某个偏移量的值</span></span><br><span class="line">getbit key offset</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921183554902.png" class title="image-20210921183554902"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#统计字符串从start字节到end字节比特为1的数量</span></span><br><span class="line">bitcount key start end</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bitop是一个复合操作，它可以做多个Bitmaps的and(交集),or(并集)，not(非)，xor(异或)操作，并将结果保存在destkey中</span></span><br><span class="line">bitop and(or/not/xor) destkey</span><br></pre></td></tr></table></figure><p>在2021-11-03和11-04日访问网站的记录</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921185106645.png" class title="image-20210921185106645"><p>计算出两天都访问过网站的用户数量</p><p>bitop and users:20211103_04 users:20211103 users:20211104</p><h4 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站pv(PageView页面访问量)，可以使用Redis的incr、incrby轻松实现。但像UV(UniqueVistor独立访客)、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><ul><li>数据存储在MySQL表中，使用distinct、count计算不重复个数</li><li>使用Redis提供的hash、set、bitmaps可解决</li></ul><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>Redis推出了HyperLogLog，通过降低一定的精度来平衡存储空间</p><p>Redis HyperLogLog是用来做基数统计的算法，HyperLogLog的优点是在输入元素的数量或者体积非常大时，计算基数所需的空间总是固定的，并且是很小的</p><p><strong>命令：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加指定元素到HyperLogLog中,若近似基数发生变化返回1，否则返回0</span></span><br><span class="line">pfadd key element</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921213017413.png" class title="image-20210921213017413"><p><strong>pfcount</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV,计算一周的UV可以使用7天的UV合并计算即可</span></span><br><span class="line">pfcount key1 key2</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921213419104.png" class title="image-20210921213419104"><p><strong>pfmerge</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</span></span><br><span class="line">pfmerge destkey sourcekey</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921213928595.png" class title="image-20210921213928595"><p><strong>Geospatial</strong></p><p>简介：Redis 3.2中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。Redis基于该类型提供了经纬度设置，查询，范围查询，距离查询，经纬度hash等操作</p><p><strong>geoadd</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加地理位置（经度、纬度、名称）</span></span><br><span class="line">geoadd key longitude latitude member</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921215007502.png" class title="image-20210921215007502"><p>两级无法直接添加，一般会下载城市信息，直接通过Java程序一次性导入</p><p>有效的经度从-180度到180度。有效的纬度从-85.05112878度到85.05112878</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的</p><p><strong>geopos</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获得指定地区的坐标值</span></span><br><span class="line">geopos key member</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921215954294.png" class title="image-20210921215954294"><p><strong>geodist</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取两个位置之间的直线距离</span></span><br><span class="line">geodist key member1 member2 [m|km|ft（英尺）|mi（英里）]（单位）</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921220200673.png" class title="image-20210921220200673"><p><strong>georadius</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以给定的经纬度为中心，找出某一半径内的元素</span></span><br><span class="line">georadius key longitude latitude radius m|km|ft|mi</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210921220651563.png" class title="image-20210921220651563"><h3 id="Redis-Jedis-测试"><a href="#Redis-Jedis-测试" class="headerlink" title="Redis_Jedis_测试"></a>Redis_Jedis_测试</h3><p><strong>需要的依赖</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>连接的注意事项</strong></p><p>关闭Linux的防火墙</p><h4 id="操作key"><a href="#操作key" class="headerlink" title="操作key"></a>操作key</h4><p>api中的方法名与前面的命令行操作的名字相同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 操作key</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建jedis对象</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;116.62.122.89&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    jedis.auth(<span class="string">&quot;mjy600811&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加key-value</span></span><br><span class="line">    jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取</span></span><br><span class="line">    String value = jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Long time = jedis.ttl(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(time);</span><br><span class="line"></span><br><span class="line">    System.out.println(value);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h3><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Spring2.x集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">redis-demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9002</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="comment">#服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">116.62.122.89</span></span><br><span class="line"><span class="comment">#redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#redis数据库索引</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有联系）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#最大阻塞等待时间(负数表示没有限制)</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接数</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接数</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><p>配置RedisConfig</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashMap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis-事务-锁机制-秒杀"><a href="#Redis-事务-锁机制-秒杀" class="headerlink" title="Redis-事务-锁机制-秒杀"></a>Redis-事务-锁机制-秒杀</h3><p><strong>Redis事务定义</strong>：</p><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序的执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队</p><h4 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h4><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210923211402229.png" class title="image-20210923211402229"><h4 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h4><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消；若执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他命令都会执行，不会回滚。</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210923212551067.png" class title="image-20210923212551067"><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210923212832973.png" class title="image-20210923212832973"><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>每次去拿数据的时候都认为别人会修改，所以每次拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁，表锁等，读锁、写锁等，都是在做操作前上锁。</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断以下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check_and_set机制实现事务</p><h4 id="Watch-key1-key2"><a href="#Watch-key1-key2" class="headerlink" title="Watch key1 key2"></a>Watch key1 key2</h4><p>在执行multi之前，先执行watch key1 key2，可以监视一个（或多个）key，如果在事务执行之前这个（这些）key被其他命令所改动，那么事务将被打断。</p><h4 id="Redis事务三特性"><a href="#Redis事务三特性" class="headerlink" title="Redis事务三特性"></a>Redis事务三特性</h4><ul><li>单独的隔离操作：事务中的所有命令都会序列化、按顺序的执行。事务在执行过程中，不会被其他客户端发来的请求所打断</li><li>没有隔离级别的概念：队列中的命令没有提交之前都不会被实际操作，因为事务提交前热河指令都不会被实际执行</li><li>不保证原子性：事务中如果有一条命令执行失败，其后的命令仍然会被执行，不会回滚</li></ul><h3 id="Redis事务秒杀案例"><a href="#Redis事务秒杀案例" class="headerlink" title="Redis事务秒杀案例"></a>Redis事务秒杀案例</h3><h4 id="解决计数器和人员记录的事务操作"><a href="#解决计数器和人员记录的事务操作" class="headerlink" title="解决计数器和人员记录的事务操作"></a>解决计数器和人员记录的事务操作</h4><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210923222648573.png" class title="image-20210923222648573"><p><strong>秒杀逻辑：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillServiceImpl</span> <span class="keyword">implements</span> <span class="title">SeckillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商品秒杀模拟</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doSeckill</span><span class="params">(String prodId, String uid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断商品prodId,或uid是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(prodId==<span class="keyword">null</span>||prodId.length()==<span class="number">0</span>||uid==<span class="keyword">null</span>||uid.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接key</span></span><br><span class="line">        String prodKey=<span class="string">&quot;prod:&quot;</span>+prodId+<span class="string">&quot;:num&quot;</span>;</span><br><span class="line">        String userKey=<span class="string">&quot;user:&quot;</span>+prodId+<span class="string">&quot;:success&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断秒杀活动是否已经开始</span></span><br><span class="line">        Integer count =(Integer)redisTemplate.opsForValue().get(prodKey);</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀成功还未开始或已经结束！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断该用户是否已经成功秒杀了一次</span></span><br><span class="line">        Boolean isExist = redisTemplate.opsForSet().isMember(userKey, uid);</span><br><span class="line">        <span class="keyword">if</span>(isExist)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您已经成功秒杀到商品，每人限购一件！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断秒杀活动是否剩余商品</span></span><br><span class="line">        <span class="keyword">if</span>(count&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀商品已经全部被购买！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行秒杀</span></span><br><span class="line">        redisTemplate.opsForValue().decrement(prodKey);</span><br><span class="line">        redisTemplate.opsForSet().add(userKey,uid);</span><br><span class="line">        System.out.println(<span class="string">&quot;成功秒杀&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redis事务–秒杀并发模拟"><a href="#Redis事务–秒杀并发模拟" class="headerlink" title="Redis事务–秒杀并发模拟"></a>Redis事务–秒杀并发模拟</h4><p>使用工具ab模拟测试，CentOS7需要手动安装</p><p>联网：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install httpd-tools</span><br></pre></td></tr></table></figure><p>无网络：</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210924145730867.png" class title="image-20210924145730867"><p><strong>ab命令</strong>：</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210924150610338.png" class title="image-20210924150610338"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab -n 1000 -c 100 -T application/x-www-form-urlencoded http://10.17.84.120:9002/redisTest/seckill</span><br></pre></td></tr></table></figure><p>由于服务器ping不通本地，所以没有测试</p><h4 id="超卖问题，通过事务实现"><a href="#超卖问题，通过事务实现" class="headerlink" title="超卖问题，通过事务实现"></a>超卖问题，通过事务实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillServiceImpl</span> <span class="keyword">implements</span> <span class="title">SeckillService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商品秒杀模拟</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doSeckill</span><span class="params">(String prodId, String uid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断商品prodId,或uid是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(prodId==<span class="keyword">null</span>||prodId.length()==<span class="number">0</span>||uid==<span class="keyword">null</span>||uid.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接key</span></span><br><span class="line">        String prodKey=<span class="string">&quot;prod:&quot;</span>+prodId+<span class="string">&quot;:num&quot;</span>;</span><br><span class="line">        String userKey=<span class="string">&quot;user:&quot;</span>+prodId+<span class="string">&quot;:success&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断秒杀活动是否已经开始</span></span><br><span class="line">        Integer count =(Integer)redisTemplate.opsForValue().get(prodKey);</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀成功还未开始或已经结束！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用事务</span></span><br><span class="line">        List list = (List) redisTemplate.execute(<span class="keyword">new</span> SessionCallback&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(RedisOperations redisOperations)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">                <span class="comment">// 监视库存</span></span><br><span class="line">                redisOperations.watch(prodKey);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断该用户是否已经成功秒杀了一次</span></span><br><span class="line">                Boolean isExist = redisOperations.opsForSet().isMember(userKey, uid);</span><br><span class="line">                <span class="keyword">if</span>(isExist)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;您已经成功秒杀到商品，每人限购一件！！&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断秒杀活动是否剩余商品</span></span><br><span class="line">                <span class="keyword">if</span>(count&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;秒杀商品已经全部被购买！！&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                redisOperations.multi();</span><br><span class="line">                redisOperations.opsForValue().decrement(prodKey);</span><br><span class="line">                redisOperations.opsForSet().add(userKey, uid);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> redisOperations.exec();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>||list.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秒杀失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功秒杀&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="乐观锁造成库存遗留问题"><a href="#乐观锁造成库存遗留问题" class="headerlink" title="乐观锁造成库存遗留问题"></a>乐观锁造成库存遗留问题</h4><h5 id="Lua脚本"><a href="#Lua脚本" class="headerlink" title="Lua脚本"></a>Lua脚本</h5><p>Lua是一个小巧的<strong>脚本语言</strong>，Lua脚本可以很容易的被C/C++代码调用，也可以反过来调用C/C++的函数，Lua并没有提供强大的库，一个Lua解释器不超过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。</p><h5 id="LUA脚本在Redis中的优势"><a href="#LUA脚本在Redis中的优势" class="headerlink" title="LUA脚本在Redis中的优势"></a>LUA脚本在Redis中的优势</h5><p>将复杂的或者多步的Redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</p><p>LUA脚本是类似redis事务，有一定原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p><p>redis的Lua脚本功能，只有在Redis2.6以上的版本才可以使用</p><p>利用lua脚本淘汰用户，解决超卖问题</p><p>redis2.6版本以后，通过lua脚本解决争抢问题，实际上是redis利用其单线程的特性，用任务队列的方式解决多任务并发问题。</p><p><strong>Lua脚本：</strong></p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> userId=KEYS[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">local</span> prodId=KEYS[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">local</span> qtkey=<span class="string">&quot;prod:&quot;</span>..prodId..<span class="string">&quot;:num&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> userkey=<span class="string">&quot;sk:&quot;</span>..prodId..<span class="string">&quot;:usr&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> userExists=redis.call(<span class="string">&quot;sismember&quot;</span>,userkey,userId);</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">tonumber</span>(userExists)==<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> num=redis.call(<span class="string">&quot;get&quot;</span>,qtkey);</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">tonumber</span>(num)&lt;=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">redis.call(<span class="string">&quot;decr&quot;</span>,qtkey);</span><br><span class="line">redis.call(<span class="string">&quot;sadd&quot;</span>,userkey,userId);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="持久化之RDB"><a href="#持久化之RDB" class="headerlink" title="持久化之RDB"></a>持久化之RDB</h3><h4 id="RDB-Redis-Database"><a href="#RDB-Redis-Database" class="headerlink" title="RDB(Redis Database)"></a>RDB(Redis Database)</h4><p>在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照</strong>写入磁盘，它恢复时是将快照文件直接读到内存中。</p><h4 id="备份是如何执行的"><a href="#备份是如何执行的" class="headerlink" title="备份是如何执行的"></a>备份是如何执行的</h4><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入一个临时文件中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化</strong>的文件，整个过程中，主进程是不进行任何操作，这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是特别敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是<strong>最后一次持久化后的数据可能丢失</strong></p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><p>Fork的作用是复制一个与当前进程<strong>一样的进程</strong>，新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p><p>在linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，linux中引入了“写时赋值技术”</p><p><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p><h4 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h4><p><strong>rdb文件的优势：</strong></p><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><p><strong>劣势：</strong></p><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了写时拷贝技术，但是如果数据庞大时还是比较消耗性能</li><li>备份周期在一定时间间隔内做一次备份，如果Redis意外挂掉的话，就会丢失最后一次快照的所有修改</li></ul><h3 id="Redis持久化之AOF"><a href="#Redis持久化之AOF" class="headerlink" title="Redis持久化之AOF"></a>Redis持久化之AOF</h3><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p><strong>以日志的形式来记录每个写操作（增量保存）</strong>，将Redis执行过的所有写指令记录下来（<strong>读操作不记录</strong>），<strong>只许追加内容但不可以改写文件</strong>，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h4 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="AOF默认不开启"></a>AOF默认不开启</h4><p>可以在redis.conf中配置文件名称，默认为<strong>appendonly.aof</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启AOF</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925153837342.png" class title="image-20210925153837342"><p>AOF文件的保存路径，同RDB的路径一致</p><h4 id="AOF和RDB同时开启，Redis听谁的"><a href="#AOF和RDB同时开启，Redis听谁的" class="headerlink" title="AOF和RDB同时开启，Redis听谁的"></a>AOF和RDB同时开启，Redis听谁的</h4><p>AOF和RDB同时开启，系统默认读取AOF的数据（数据不会存在丢失）</p><h4 id="AOF异常恢复"><a href="#AOF异常恢复" class="headerlink" title="AOF异常恢复"></a>AOF异常恢复</h4><p>如遇到AOF文件损坏，通过/usr/local/bin/redis-check-aof –fix</p><p>appendonly.aof进行恢复</p><h4 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="AOF同步频率设置"></a>AOF同步频率设置</h4><p><strong>appendfsync always</strong></p><p>始终同步，每次redis的写入都会立刻写入日志，性能较差但数据完整性比较好</p><p><strong>appendfsync everysec</strong> </p><p>每秒同步，每秒记入日志一次，如果宕机，当前秒的数据可能会丢失</p><p><strong>appendfsync no</strong></p><p>redis不主动进行同步，把<strong>同步时机交给操作系统</strong></p><h4 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h4><p>AOF采用文件追加方式，文件会越来越大为避免这种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令<strong>bgrewriteaof</strong></p><p><strong>重写原理，如何实现重写</strong></p><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后再rename）,<strong>redis4.0版本后的重写，是指把rdb的快照以二进制的形式附在新的aof头部，作为已有的历史数据，替换掉</strong>原来的流水账操作</p><p><strong>触发机制，何时重写</strong></p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的以呗且文件大于64M时触发</p><p>重写虽然可以节约大量磁盘空间，减少恢复时间，但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写</p><p><strong>auto-aof-rewrite-percentage</strong>：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p><p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件64M。达到这个值开始重写</p><p><strong>重写流程：</strong></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925160906610.png" class title="image-20210925160906610"><h4 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h4><ul><li>客户端的请求写命令会被追加到AOF缓冲区中</li><li>AOF缓冲区根据AOF持久化策略【always、everysec、no】将操作sync同步到磁盘的aof文件中</li><li>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量</li><li>redis服务重启时，会重新load加载AOF文件中的写操作达到恢复数据的目的</li></ul><p><strong>优点：</strong></p><ul><li>备份机制更加稳健，丢失数据概率更低</li><li>刻度的日志文本，通过操作AOF稳健，可以处理误操作</li></ul><p><strong>缺点：</strong></p><ul><li><p>比起RDB占用更多的磁盘空间</p></li><li><p>恢复备份速度慢</p></li><li><p>每次读写都同步的话，有一定的性能压力</p></li><li><p>存在个别bug,造成不能恢复</p></li></ul><h4 id="总结：选哪个好"><a href="#总结：选哪个好" class="headerlink" title="总结：选哪个好"></a>总结：选哪个好</h4><p>官方推荐两个都启用</p><p>如果对数据不明干，可以选单独用RDB</p><p>不建议单独用AOF，因为可能会出现Bug</p><p>如果知识做纯内存缓存，可以都不用</p><h3 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis_主从复制"></a>Redis_主从复制</h3><p>主机数据更新后根据配置和策略，自动同步到备机的<strong>master/slaver</strong>机制，<strong>Master以写为主，Slave以读为主</strong></p><p><strong>用处：</strong></p><ul><li>读写分离，性能扩展</li><li>容灾快速恢复 </li></ul><h4 id="配置一主两从"><a href="#配置一主两从" class="headerlink" title="配置一主两从"></a>配置一主两从</h4><ul><li><p>创建/myredis文件夹</p></li><li><p>将redis.conf配置文件复制到/myredis中</p></li><li><p>配置一主两从，创建三个配置文件</p><p>redis6379.conf</p><p>redis6380.conf</p><p>redis6381.conf</p></li><li><p>在三个配置文件写入配置内容</p><p><strong>在redis6379.conf中写入以下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br></pre></td></tr></table></figure><p>另外两个文件同上。</p></li><li><p>启动三个redis服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">redis-server myredis/redisxxx.conf</span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line">redis-cli -p xxx</span><br></pre></td></tr></table></figure></li><li><p>查看三台主机的运行情况</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#打印主从复制的相关信息</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925180158541.png" class title="image-20210925180158541"><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925180224781.png" class title="image-20210925180224781"><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925180249219.png" class title="image-20210925180249219"></li><li><p>配从（库）不配主（库）</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#成为某个实例的从服务器</span><br><span class="line">slaveof ip port</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925180649399.png" class title="image-20210925180649399"><p><strong>出现问题：</strong>主节点不显示从节点信息</p><p>原因：master设置了密码，若需要实现主从复制，需要在配置文件中设置<code>masterauth  password</code></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925183208343.png" class title="image-20210925183208343"><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925184456075.png" class title="image-20210925184456075"><p> 配置成功显示（上述操作知识临时的，当redis重启会失效）</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210925184602872.png" class title="image-20210925184602872"></li></ul><h4 id="常用三招"><a href="#常用三招" class="headerlink" title="常用三招"></a>常用三招</h4><p><strong>一主二仆：</strong></p><p>主服务器可以写和读，从服务器只能读不能写</p><p>从服务器挂掉之后重启服务器，会变成主服务器，重新操作之后会将主服务器中的数据从头复制。</p><p>当主服务器挂掉后，从服务器不做任何操作，当主服务器重启之后，仍然是之前的从服务器的主服务器。</p><p><strong>主从复制的原理：</strong></p><ul><li>当从服务器连接上主服务器之后，从服务器向主服务器发送进行数据同步的消息</li><li>主服务器接到从服务器发送过来的同步消息后，把主服务器数据进行持久化，将数据放到rdb文件，再将rdb文件发送给从服务器，从服务器拿到rdb进行读取</li><li>每次主服务器进行写操作 之后，和从服务器进行数据同步</li></ul><p><strong>薪火相传：</strong></p><p>从服务器下面还能有从服务器，主服务器进行写操作之后，从服务器依旧将数据进行同步。</p><p><strong>反客为主：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把从机变成主机</span></span><br><span class="line">slaveof no one</span><br></pre></td></tr></table></figure><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p><strong>实现哨兵模式</strong></p><p>先将服务器变成一主二仆的形式</p><p>在自定义的/myredis目录下新建sentinel.conf 文件，名字不能错</p><p>sentinel.conf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mymaster为监控对象起的服务器名称，1为至少有多少个哨兵同意迁移的数量</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>启动哨兵</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-sentinel myredis/sentinel.conf</span><br></pre></td></tr></table></figure><p>当主服务器挂掉后，会在从服务器中选出一个作为主服务器，而挂掉的主服务器会作为新的主服务器的一个从服务器。</p><p><strong>复制延时</strong></p><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更严重，Slave机器数量的增加也会使这个问题更加严重。</p><p><strong>选取主服务器的规则：</strong></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926004720025.png" class title="image-20210926004720025"><h3 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h3><h4 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h4><p>Redis集群实现了对Redis的水平扩容，及启动N个Redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N</p><p>Redis集群通过分区（partition）来提供一定程度的可用性（availability）:即使集群中有一部分节点失效或者无法进行通信，集群也可以继续处理命令请求</p><h4 id="搭建Redis集群"><a href="#搭建Redis集群" class="headerlink" title="搭建Redis集群"></a>搭建Redis集群</h4><p><strong>删除持久化数据：</strong></p><p>将rdb，aof文件都删除掉</p><p><strong>制作6个实例，6379，6380，6381，6389，6390，6391</strong></p><p><strong>配置基本信息：</strong></p><p>开启daemonize yes</p><p>Pid文件名字</p><p>指定端口</p><p>log文件名字</p><p>dump.rdb 名字</p><p>appendonly 关掉或换名字</p><p><strong>Redis cluster配置修改</strong></p><p>cluster-enable yes  打开集群模式</p><p>cluster-config-file nodes-6379.conf  设置节点配置文件名</p><p>cluster-node-timeout 15000  设节点失联时间，超过该时间（毫秒），集群自动进行主从切换</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926204453558.png" class title="image-20210926204453558"><p>其它节点的配置文件类似</p><p><strong>启动节点：</strong></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926205056793.png" class title="image-20210926205056793"><p><strong>将6个节点合成一个集群</strong></p><p>组合之前请确保所有redis实例启动后，nodes-xxx.conf文件都正常生成</p><p>cd 到/usr/local/redis/redis-6.2.3/src目录下（该目录为自己安装的redis的地址）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#合成集群 --replicas 1采用最简单的方式配置集群，一台主机，一台从机，正好三组(这里的ip使用的阿里云服务器的内网ip)</span></span><br><span class="line">redis-cli -a mjy600811 --cluster create --cluster-replicas 1 172.19.11.126:6379 172.19.11.126:6380 172.19.11.126:6381 172.19.11.126:6389 172.19.11.126:6390 172.19.11.126:6391</span><br><span class="line"></span><br><span class="line">redis-cli -a mjy600811 --cluster create --cluster-replicas 1 116.62.122.89:6379 116.62.122.89:6380 116.62.122.89:6381 116.62.122.89:6389 116.62.122.89:6390 116.62.122.89:6391</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926212055531.png" class title="image-20210926212055531"><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926212110418.png" class title="image-20210926212110418"><p>使用公网ip一直waiting的解决办法</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927123520744.png" class title="image-20210927123520744"><p><strong>采用集群策略连接，设置数据会自动切换到相应的写主机</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-c指采用集群策略连接</span></span><br><span class="line">redis-cli -c -p xxx</span><br><span class="line"><span class="comment">#查看节点信息</span></span><br><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><p>采用cluster nodes 查看节点信息</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926212752329.png" class title="image-20210926212752329"><h4 id="redis-cluster如何分配这六个节点"><a href="#redis-cluster如何分配这六个节点" class="headerlink" title="redis cluster如何分配这六个节点"></a>redis cluster如何分配这六个节点</h4><p>一个集群至少有<strong>三个主节点</strong></p><p>–cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p><p>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上</p><h4 id="什么是slots"><a href="#什么是slots" class="headerlink" title="什么是slots"></a>什么是slots</h4><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926221101029.png" class title="image-20210926221101029"><p>一个Redis集群包含16384个插槽（hash slot），数据库中的每个键都属于这16384个插槽中的其中一个</p><p>集群使用公式CRC16(key)%16384来计算key属于哪个插槽，其中CRC16(key)语句用于计算键key的CRC16校验和。其中集群中的每个节点负责处理一部分插槽。</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926221543281.png" class title="image-20210926221543281"><h4 id="在集群中录入值"><a href="#在集群中录入值" class="headerlink" title="在集群中录入值"></a>在集群中录入值</h4><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926225324838.png" class title="image-20210926225324838"><p>直接使用mset命令会出错</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926225405961.png" class title="image-20210926225405961"><p>设置多个值</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926225529108.png" class title="image-20210926225529108"><p>查询集群中的值</p><p>cluster keyslot key:查看key计算出的插槽值</p><p>cluster countkeysinslot  slotval:查看插槽值对应的插槽中的键的个数</p><p>cluster getkeysinslot slotval  num：查看插槽值对应的插槽中的num个值</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926225947889.png" class title="image-20210926225947889"><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p>如果主节点下线，从节点能否自动升为主节点。注意：15秒超时</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210926232023054.png" class title="image-20210926232023054"><p>主节点恢复后，会变成从机</p><p>如果所有某一段插槽的主从都挂掉，而cluster-require-full-coverage为yes，那么整个集群都挂掉</p><p>如果所有某一段插槽的主从都挂掉，而cluster-require-full-coverage为no，那么该插槽数据全都不能使用，也无法存储</p><h4 id="集群的Jedis开发"><a href="#集群的Jedis开发" class="headerlink" title="集群的Jedis开发"></a>集群的Jedis开发</h4><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p><p>无中心化主从集群，无论从哪台主机写的数据，其它主机上都能读到数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClusterDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Set&lt;HostAndPort&gt; nodes=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;116.62.122.89&quot;</span>,<span class="number">6379</span>));</span><br><span class="line">        <span class="comment">//注意：这里超时时间不要太短，他会有超时重试机制。而且其他像httpclient、dubbo等RPC框架也要注意这点</span></span><br><span class="line">        JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodes,<span class="number">1000</span>,<span class="number">1000</span>,<span class="number">1</span>,<span class="string">&quot;mjy600811&quot;</span>,<span class="keyword">new</span> GenericObjectPoolConfig());</span><br><span class="line"></span><br><span class="line">        jedisCluster.set(<span class="string">&quot;uid&quot;</span>,<span class="string">&quot;378423&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String uid = jedisCluster.get(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">        System.out.println(uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Redis集群提供了以下好处"><a href="#Redis集群提供了以下好处" class="headerlink" title="Redis集群提供了以下好处"></a>Redis集群提供了以下好处</h4><p>实现扩容</p><p>分摊压力</p><p>无中心配置相对简单</p><h4 id="Redis集群的不足"><a href="#Redis集群的不足" class="headerlink" title="Redis集群的不足"></a>Redis集群的不足</h4><p>多键操作是不被支持的</p><p>多键的Redis事务是不被支持的。lua脚本不被支持</p><p>由于集群方案出现交完，很多公司已经采用了其他的集群方案，而代理或客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p><h3 id="Redis6应用问题解决"><a href="#Redis6应用问题解决" class="headerlink" title="Redis6应用问题解决"></a>Redis6应用问题解决</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p><strong>问题描述：</strong></p><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存中获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不了缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927163719793.png" class title="image-20210927163719793"><p>可能发生的条件：</p><ul><li>访问量剧增，应用服务器压力变大了</li><li>redis命中率降低</li><li>一直查询数据库</li><li>出现很多非正常的url访问</li></ul><p><strong>解决方案：</strong></p><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致每次请求都要到存储层去查询，失去了缓存的意义。</p><p>解决办法：</p><p><strong>对空值进行缓存</strong>：如果一个查询返回的数据为空（不管数据是否存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过5分钟</p><p><strong>设置可访问的名单（白名单）</strong>：使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmaps里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问</p><p><strong>采用布隆过滤器</strong>：布隆过滤器是1970年由布隆提出的，它实际上是一个很长的二进制向量（位图）和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的识别率和删除困难将所有困难存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的压力</p><p><strong>进行实时监控：</strong></p><p>当发现Redis的命中率开始急速下降，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p><strong>问题描述</strong></p><p>key对应的数据存在，但在Redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候高并发的请求可能会瞬间把后端DB压垮</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927170931378.png" class title="image-20210927170931378"><p><strong>特点：</strong></p><p>数据库访问压力瞬时增大</p><p>redis里面没有出现大量key过期</p><p>redis正常运行</p><p><strong>造成的原因</strong></p><p>redis某个key刚好过期，大量访问使用这个key,例如热搜</p><p><strong>解决方案</strong></p><p>key可能会在某些时间点被超高并发的访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被击穿</p><p><strong>解决方法：</strong></p><p><strong>预先设置热门数据：</strong>在redis访问高峰期之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的有效期</p><p><strong>实时调整：</strong>现场监控哪些是热门数据，实时调整key的过期时长</p><p><strong>使用锁：</strong></p><ul><li>在缓存失效的时候（判断拿出来的值为空），而不是立即去load db</li><li>先使用缓存工具的某些带成功操作返回值的操作（比如 Redis的setnx）去set 一个mutex key</li><li>当操作返回成功时，再进行load db操作，并回设缓存，最后删除mutex key</li><li>当操作返回失败，这名有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法</li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p><strong>问题描述</strong></p><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发请求可能会瞬间把后端DB压垮</p><p>缓存雪崩与缓存击穿的区别在于缓存雪崩针对很多key缓存，而缓存击穿则是针对某一个热点key</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927173323503.png" class title="image-20210927173323503"><p>特点：</p><p>数据库压力变大，服务器崩溃</p><p>造成原因：</p><p>在某一时间内，大量key过期，且出现大量请求</p><p><strong>解决方案：</strong></p><p><strong>构建多级缓存架构：</strong>nginx缓存+redis缓存+其它缓存（echache）等</p><p><strong>使用锁或队列：</strong>用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，不适用于高并发情况下。</p><p><strong>设置过期标志更新缓存：</strong>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际的key的缓存</p><p><strong>将缓存失效时间分散开</strong></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="redis实现分布式锁"><a href="#redis实现分布式锁" class="headerlink" title="redis实现分布式锁"></a>redis实现分布式锁</h4><p>使用setnx上锁，del释放锁</p><p>但这样会存在一个问题，当setnx操作完以后，程序挂掉了del操作未能执行，锁没能释放。</p><p>解决方法：使用expire命令给锁设置一个过期时间</p><p>但这样同样还有问题，若在上锁后，设置过期时间之前，服务挂掉了，那么会导致未能设置过期时间，从而导致锁一直不能释放</p><p>解决办法：将上锁和设置过期时间的命令写成一条命令</p><p><code>set  key  val  nx  ex 过期时间</code></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927213757267.png" class title="image-20210927213757267"><p>设置了过期时间后还有一个问题，若当某个线程拿到锁后进行操作，由于操作时间比较长，锁已经过期了，这时另一个线程拿到了锁，当之前的线程执行完成后，又手动释放了另一个线程的锁。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String key=<span class="string">&quot;lock&quot;</span>;</span><br><span class="line">        <span class="keyword">long</span> timeout=<span class="number">30</span>;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">        String uuid= UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置lock的值为1，过期时间为30，单位为秒</span></span><br><span class="line">        Boolean lock = redisTemplate.opsForValue().setIfAbsent(key, <span class="number">1</span>, timeout, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">            <span class="comment">// 记录值</span></span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 业务执行完之后，手动释放锁</span></span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 没能拿到锁，每隔0.1秒再获取</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                getLock();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="UUID防误删"><a href="#UUID防误删" class="headerlink" title="UUID防误删"></a>UUID防误删</h4><p>解决办法：将lock的值设为UUID，在释放锁之前比较uuid是否相同，若相同则释放锁，若不是则不释放锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String key=<span class="string">&quot;lock&quot;</span>;</span><br><span class="line">    <span class="keyword">long</span> timeout=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    String uuid= UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置lock的值为1，过期时间为30，单位为秒</span></span><br><span class="line">    Boolean lock = redisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="comment">// 记录值</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line"></span><br><span class="line">        String val = (String)redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(uuid.equals(val))&#123;</span><br><span class="line">            <span class="comment">// 业务执行完之后，手动释放锁</span></span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 没能拿到锁，每隔0.1秒再获取</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            getLock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原子性操作造成问题"><a href="#原子性操作造成问题" class="headerlink" title="原子性操作造成问题"></a>原子性操作造成问题</h4><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927215858620.png" class title="image-20210927215858620"><p><strong>问题描述：</strong></p><p>当a线程获得锁，并且操作完后，会获取lock的值，获得的lock的值与uuid相同，正要执行下面的操作时，key过期了，此时b拿到了锁，而a线程则删除了b的锁</p><p>解决办法：使用Lua脚本（只能在单机上操作，集群不行）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String key=<span class="string">&quot;lock&quot;</span>;</span><br><span class="line">    <span class="keyword">long</span> timeout=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    String uuid= UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置lock的值为1，过期时间为30，单位为秒</span></span><br><span class="line">    Boolean lock = redisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        <span class="comment">// 记录值</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>,++num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*String val = (String)redisTemplate.opsForValue().get(key);</span></span><br><span class="line"><span class="comment">        if(uuid.equals(val))&#123;</span></span><br><span class="line"><span class="comment">            // 业务执行完之后，手动释放锁</span></span><br><span class="line"><span class="comment">            redisTemplate.delete(key);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        String str=<span class="string">&quot;if ARGV[1]==redis.call(&#x27;get&#x27;,KEYS[1]) then&quot;</span> +</span><br><span class="line">                <span class="string">&quot;return redis.call(&#x27;del&#x27;,KYES[1]) else return 0 end&quot;</span>;</span><br><span class="line">        <span class="comment">// 设置Lua脚本返回的数据类型</span></span><br><span class="line">        RedisScript&lt;Long&gt; script = RedisScript.of(str, Long.class);</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        redisTemplate.execute(script,list,uuid);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 没能拿到锁，每隔0.1秒再获取</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            getLock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927221241645.png" class title="image-20210927221241645"><h3 id="Redis6-0新功能"><a href="#Redis6-0新功能" class="headerlink" title="Redis6.0新功能"></a>Redis6.0新功能</h3><h4 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h4><p>Redis ACL是Access Control List(访问控制列表)的缩写，该功能允许根据可执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis安全规则只有密码控制，还有通过rename来调整高危命令比如flushdb，keys *,shutdown等，Redis6 则提供ACL的功能对用户进行更细粒度的权限控制</p><ul><li>接入权限：用户名和密码</li><li>可以执行的命令</li><li>可以操作的key</li></ul><p>参考官网：<a href="https://redis.io/topic/acl">https://redis.io/topic/acl</a></p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>使用acl  list命令展现用户列表</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927222115093.png" class title="image-20210927222115093"><p>acl cat命令</p><p>（1）查看添加权限指令类别</p><p>​            <img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927222619437.png" class title="image-20210927222619437"></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927222649327.png" class title="image-20210927222649327"><p>acl whoami 命令查看当前用户</p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927222843968.png" class title="image-20210927222843968"><p>设置有用户名、密码、ACL权限、并启用用户</p><p>acl setuser user2 on &gt;password ~cached:* +get</p><h4 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h4><p>简介：</p><p>Redis6终于支持多线程了。IO多线程其实指<strong>客户端交互部分的网络IO</strong>交互模块多线程，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p><p><strong>原理架构：</strong></p><p>Redis6 加入多线程，但跟Memcached这种从IO处理到数据访问多线程的实现模式有些差异。Redis的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制key ,lua、事务、LPUSH/LPOP等等的并发问题</p><p><strong>多线程IO默认是不开启的，需要在配置文件中配置</strong></p><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927225139877.png" class title="image-20210927225139877"><p>io-threads-do-redis yes ：开启</p><h4 id="工具支持Cluster"><a href="#工具支持Cluster" class="headerlink" title="工具支持Cluster"></a>工具支持Cluster</h4><img src="/2021/09/20/Redis%E5%AD%A6%E4%B9%A0/image-20210927225255453.png" class title="image-20210927225255453">]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Swagger2</title>
      <link href="/2021/09/14/SpringBoot%E6%95%B4%E5%90%88Swagger2/"/>
      <url>/2021/09/14/SpringBoot%E6%95%B4%E5%90%88Swagger2/</url>
      
        <content type="html"><![CDATA[<p>作为一个后端开发人员，测试是必不可少的工作，而swagger2作为一个测试接口的工具会为我们的工作带来方便。</p><h4 id="首先，创建一个SpringBoot项目，导入依赖"><a href="#首先，创建一个SpringBoot项目，导入依赖" class="headerlink" title="首先，创建一个SpringBoot项目，导入依赖"></a>首先，创建一个SpringBoot项目，导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置Swagger2"><a href="#配置Swagger2" class="headerlink" title="配置Swagger2"></a>配置Swagger2</h4><p>配置Swagger2需要开发者自己提供一个Docket的Bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.servicebase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-05-09 22:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line"><span class="comment">//                .paths(Predicates.not(PathSelectors.regex(&quot;/admin/.*&quot;)))</span></span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;网站-课程中心API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;Helen&quot;</span>, <span class="string">&quot;http://mjy.com&quot;</span>, <span class="string">&quot;55317332@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个Bean中，我们需要配置映射路径和要扫描接口的位置。</p><p>ApiInfo主要配置一下Swagger2文档页面显示的一些信息，例如：网站的title、网站的描述、联系人的信息、使用的协议等。</p><h4 id="Swagger的注解"><a href="#Swagger的注解" class="headerlink" title="Swagger的注解"></a>Swagger的注解</h4><p>@Api：可以用来标记当前Controller的功能</p><p>@ApiOperation：用来标记一个方法的作用</p><p>@ApiImplicitParam：用来描述一个参数，可以配置参数的中文含义，也可以给参数设置默认值。</p><p>注：若有多个参数，则需要使用多个@ApiImplicitParam注解来描述，多个@ApiImplicitParam注解需要放在一个@ApiImplicitParams</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;讲师管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduService/teacher&quot;)</span></span><br><span class="line"><span class="comment">//@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询讲师表所有数据</span></span><br><span class="line">    <span class="meta">@ApiOperation(value=&quot;所有讲师列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">getAllTeacher</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;Teacher&gt; list = teacherService.list(<span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="string">&quot;items&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> RebackInfo.ok().data(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除</span></span><br><span class="line">    <span class="meta">@ApiOperation(value=&quot;通过id逻辑删除讲师&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">deleteTeacherById</span><span class="params">(<span class="meta">@ApiParam(name=&quot;id&quot;,value=&quot;讲师ID&quot;,required=true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">                                         <span class="meta">@PathVariable</span> String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = teacherService.removeById(id);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> RebackInfo.ok();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> RebackInfo.error();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询讲师</span></span><br><span class="line">    <span class="meta">@ApiOperation(value=&quot;分页查修讲师&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;pageTeacher/&#123;current&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">pageTeacher</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">long</span> current,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  <span class="meta">@PathVariable</span> <span class="keyword">long</span> limit)</span></span>&#123;</span><br><span class="line">        Page&lt;Teacher&gt; page = <span class="keyword">new</span> Page&lt;&gt;(current,limit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法实现</span></span><br><span class="line">        <span class="comment">//底层会将查询到的数据封装到传入的page中，我们可以通过page获得数据</span></span><br><span class="line">        teacherService.page(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Teacher&gt; records = page.getRecords();</span><br><span class="line">        Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;total&quot;</span>,page.getTotal());</span><br><span class="line">        map.put(<span class="string">&quot;teachers&quot;</span>,records);</span><br><span class="line">        <span class="keyword">return</span> RebackInfo.ok().data(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件查询带分页的方法</span></span><br><span class="line">    <span class="meta">@ApiOperation(value=&quot;条件带分页查询讲师&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;pageTeacherCondition/&#123;current&#125;/&#123;limit&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">pageTeacherCondition</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">long</span> current,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           <span class="meta">@PathVariable</span> <span class="keyword">long</span> limit,</span></span></span><br><span class="line"><span class="params"><span class="function">                                           <span class="meta">@RequestBody(required=false)</span> TeacherQuery teacherQuery)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建page对象</span></span><br><span class="line">        Page&lt;Teacher&gt; page = <span class="keyword">new</span> Page&lt;&gt;(current,limit);</span><br><span class="line">        <span class="comment">//构建条件</span></span><br><span class="line">        QueryWrapper&lt;Teacher&gt; wrapper=<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String name = teacherQuery.getName();</span><br><span class="line">        Integer level = teacherQuery.getLevel();</span><br><span class="line">        String begin = teacherQuery.getBegin();</span><br><span class="line">        String end = teacherQuery.getEnd();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断条件值是否为空，如果不为空拼接条件</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(name))&#123;</span><br><span class="line">            wrapper.like(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(level))&#123;</span><br><span class="line">            wrapper.eq(<span class="string">&quot;level&quot;</span>,level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(begin))&#123;</span><br><span class="line">            wrapper.ge(<span class="string">&quot;gmt_create&quot;</span>,begin);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(end))&#123;</span><br><span class="line">            wrapper.le(<span class="string">&quot;gmt_create&quot;</span>,end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按照时间降序排列</span></span><br><span class="line">        wrapper.orderByAsc(<span class="string">&quot;gmt_create&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法实现分页</span></span><br><span class="line">        teacherService.page(page,wrapper);</span><br><span class="line">        List&lt;Teacher&gt; records = page.getRecords();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;items&quot;</span>,records);</span><br><span class="line">        map.put(<span class="string">&quot;total&quot;</span>,page.getTotal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RebackInfo.ok().data(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对于参数的描述，也可以应用在实体类中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;edu_teacher&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(value=&quot;Teacher对象&quot;, description=&quot;讲师&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师ID&quot;)</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ID_WORKER_STR)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师简介&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师资历,一句话说明讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String career;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;头衔 1高级讲师 2首席讲师&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;讲师头像&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;排序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="meta">@TableField(fill=FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill=FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill=FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmtModified;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置完成后，访问swagger:<a href>localhost:8001/swagger-ui.html</a></p><img src="/2021/09/14/SpringBoot%E6%95%B4%E5%90%88Swagger2/image-20210510093614533.png" class title="image-20210510093614533">]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级</title>
      <link href="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/"/>
      <url>/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="在Linux上安装MySQL"><a href="#在Linux上安装MySQL" class="headerlink" title="在Linux上安装MySQL"></a>在Linux上安装MySQL</h3><p>检查当前系统是否安装过mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询命令</span></span><br><span class="line">rpm -qa|grep - i mysql</span><br><span class="line"><span class="comment">#删除命令</span></span><br><span class="line">rpm -e RPM软件包名（该名字是查询命令查询出来的名字）</span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">rpm -e --nodeps mysql-libs-5.1.73-5.el6_6.x86_64</span><br><span class="line"><span class="comment">#普通删除模式</span></span><br><span class="line">rpm -e mysql</span><br><span class="line"><span class="comment">#强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span></span><br><span class="line">rpm -e --nodeps mysql　　</span><br></pre></td></tr></table></figure><p>下载MySQL rpm安装包（MySQL官网：<a href="https://dev.mysql.com/downloads/mysql/">MySQL :: Download MySQL Community Server</a>）</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912154148995.png" class title="image-20210912154148995"><h5 id="使用rpm命令安装"><a href="#使用rpm命令安装" class="headerlink" title="使用rpm命令安装"></a>使用rpm命令安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#参数用rpm --help自行查看</span><br><span class="line">rpm -ivh mysql-community-common-5.7.35-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h5 id="查看mysql安装目录"><a href="#查看mysql安装目录" class="headerlink" title="查看mysql安装目录"></a>查看mysql安装目录</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef |grep mysql</span><br></pre></td></tr></table></figure><h5 id="可能会出现以下错误"><a href="#可能会出现以下错误" class="headerlink" title="可能会出现以下错误"></a>可能会出现以下错误</h5><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912152734558.png" class title="image-20210912152734558"><p><strong>首先查看libaio是否安装使用</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">rpm -qa|grep libaio</span><br></pre></td></tr></table></figure><h5 id="若无libaio-则使用命令进行安装"><a href="#若无libaio-则使用命令进行安装" class="headerlink" title="若无libaio,则使用命令进行安装"></a>若无libaio,则使用命令进行安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install  libaio-devel.x86_64</span><br></pre></td></tr></table></figure><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912153015786.png" class title="image-20210912153015786"><p>安装好之后，继续使用上述命令进行安装</p><h5 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h5><p>安装顺序：common-&gt;libs-&gt;client-&gt;server</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.35-1.el7.x86_64.rpm mysql-community-libs-5.7.35-1.el7.x86_64.rpm mysql-community-client-5.7.35-1.el7.x86_64.rpm mysql-community-server-5.7.35-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912154416564.png" class title="image-20210912154416564"><h5 id="安装完成后，进行验证"><a href="#安装完成后，进行验证" class="headerlink" title="安装完成后，进行验证"></a>安装完成后，进行验证</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start　　　　　　　　<span class="comment">#开启MySQL服务　　　　只要没有错误信息就表示已经正常启动了。</span></span><br><span class="line">service mysqld stop　　　　　　　　<span class="comment">#关闭MySQL服务</span></span><br><span class="line">service mysqld restart　　　　　　<span class="comment">#重启MySQL服务 </span></span><br><span class="line">service mysqld status　　　　　　<span class="comment">#查看服务状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以是</span></span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h5 id="查看默认密码"><a href="#查看默认密码" class="headerlink" title="查看默认密码"></a>查看默认密码</h5><p>MySQL5.7会在安装后为root用户生成一个随机临时密码，系统赋予了***默认的且临时的***密码，打开mysql默认日志文件/var/log/mysqld.log</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看日志文件</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"><span class="comment">#或直接在日志文件中搜索</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912155134257.png" class title="image-20210912155134257"><p>拿到密码后可以进行登录，但是当我们执行SQL命令时就会报错（提示我们必须先重置密码）</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912155951893.png" class title="image-20210912155951893"><p>MySQL安装时默认安装了 <a href="http://dev.mysql.com/doc/refman/5.7/en/validate-password-plugin.html">validate_password</a>，MySQL的密码策略比较复杂。这个插件要求密码至少包含一个大写字母，一个小写字母，一个数字和一个特殊字符，并且密码长度至少8个字符。过于简单的密码，不会被通过。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 重置MySQL（root）登录密码</span><br><span class="line"><span class="keyword">set</span> password <span class="operator">=</span> password(<span class="string">&#x27;MySQL5.7&#x27;</span>);　　　　　　</span><br><span class="line">#或者如下格式：</span><br><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> 用户名<span class="variable">@localhost</span><span class="operator">/</span>ip<span class="operator">/</span><span class="operator">%</span> <span class="operator">=</span> password(<span class="string">&#x27;新密码&#x27;</span>); #Ccr600811<span class="operator">!</span></span><br></pre></td></tr></table></figure><h5 id="查看密码策略相关参数"><a href="#查看密码策略相关参数" class="headerlink" title="查看密码策略相关参数"></a>查看密码策略相关参数</h5><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912160955545.png" class title="image-20210912160955545"><h5 id="禁用validate-password密码策略"><a href="#禁用validate-password密码策略" class="headerlink" title="禁用validate_password密码策略"></a>禁用validate_password密码策略</h5><p>在/etc/my.cnf中添加以下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">validate_password = off</span><br></pre></td></tr></table></figure><p>修改后需要重启mysql服务</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912161147171.png" class title="image-20210912161147171"><h4 id="数据库乱码问题（推荐设置）"><a href="#数据库乱码问题（推荐设置）" class="headerlink" title="数据库乱码问题（推荐设置）"></a>数据库乱码问题（推荐设置）</h4><p>查看MySQL编码问题</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%character_set%&#x27;</span></span><br></pre></td></tr></table></figure><p>添加如下配置：（注意下图中配置的所在位置，不要乱了，否则可能无法启动数据库服务了）</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912161934612.png" class title="image-20210912161934612"><p><strong>开放远程连接</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h5 id="设置mysql服务开机自启动"><a href="#设置mysql服务开机自启动" class="headerlink" title="设置mysql服务开机自启动"></a>设置mysql服务开机自启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld.service</span><br></pre></td></tr></table></figure><h5 id="停止mysql服务开机自启动"><a href="#停止mysql服务开机自启动" class="headerlink" title="停止mysql服务开机自启动"></a>停止mysql服务开机自启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> mysqld.service</span><br></pre></td></tr></table></figure><p>关于用户授权</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">####创建用户并授权</span><br><span class="line">grant  all  on  *.*  to  &#x27;xsge&#x27;@&#x27;%&#x27;  identified  by  &#x27;SQLxsge1.&#x27;;　　　　#创建用户xsge，密码SQLxsge1.  授权所有权限（all），允许正在任意主机登录（%），任意库任意表（*.*）</span><br><span class="line">----------------------------------如需其他修改请看参考下面的SQL-----------------------------------</span><br><span class="line">####修改xsge主机访问权限范围(前提，该用户xsge已经存在)</span><br><span class="line">update  mysql.user  set  host=&#x27;localhost&#x27;  where  user=&#x27;xsge&#x27;;　　　#修改xsge账户访问范围：localhost只能在Linux系统本机访问</span><br><span class="line"></span><br><span class="line">####修改权限</span><br><span class="line">Grant select，update on test.*  to  &#x27;xsge&#x27;@&#x27;%&#x27;;　　　　#给xsge授权查询，更新，test库中所有表（test.*）</span><br></pre></td></tr></table></figure><p><strong>注：</strong>注意若是服务器，记得开放3306端口。</p><h3 id="MySQL主要配置文件"><a href="#MySQL主要配置文件" class="headerlink" title="MySQL主要配置文件"></a>MySQL主要配置文件</h3><p>1、二进制日志log-bin(主从复制)</p><p>2、错误日志log-error:默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等</p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="MySQL架构"><a href="#MySQL架构" class="headerlink" title="MySQL架构"></a>MySQL架构</h4><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用，主要体现在存储引擎上，<strong>插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离</strong>。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912185607685.png" class title="image-20210912185607685"><p><strong>连接层：</strong></p><p>一些客户端和连接服务，包含本地socket通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引用了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它据有的操作权限。</p><p><strong>服务端：</strong></p><p>第二层架构主要完成大多的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如果成、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化确定如查询表的顺序，是否利用索引等，最后生成相应的执行操作。</p><p><strong>引擎层：</strong></p><p>存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，可以根据业务需求进行选取。</p><p><strong>存储层：</strong></p><p>数据存储层，主要是将数据存储在运行于裸设备的文件系统上，并完成与存储引擎的交互。</p><h5 id="查看引擎："><a href="#查看引擎：" class="headerlink" title="查看引擎："></a>查看引擎：</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> engines</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%storage_engine%&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><h5 id="Join的几种类型"><a href="#Join的几种类型" class="headerlink" title="Join的几种类型"></a>Join的几种类型</h5><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210912230026548.png" class title="image-20210912230026548"><p><strong>索引：</strong>索引是帮助MySQL高效获取数据的数据结构，即排好序的快速查找数据结构</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上</p><p>我们平常所说的索引，如果没有特别指明，都是指B树（多路搜索树，并不一定是二叉树的）结构组织的索引。其中聚集索引、次要索引、覆盖索引、符合索引，前缀索引、唯一索引默认都是使用B+树索引，统称索引。当然，除了B+树这种类型的索引之外，还有哈希索引等</p><p><strong>索引的优势：</strong></p><ul><li>提高数据检索的效率，降低数据库的I/O成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗</li></ul><p><strong>索引的劣势：</strong></p><ul><li>索引在本质上也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的</li><li>索引大大提高了查询速度，但却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件每次更新添加了索引列的字段，会调整因为更新所带来的键值变化后的索引信息</li><li>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询</li></ul><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><p>1、单值索引：即一个索引只包含单个列，一个表可以有多个单列索引</p><p>2、唯一索引：索引列的值必须唯一，但允许有空值</p><p>3、复合索引：即一个索引包含多个列</p><h5 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h5><p>创建：<code>create [UNIQUE] index indexName on table（columnName(length)）</code></p><p><code>alter table add [unique] index [indexName]  on (columnName(length))</code></p><p>删除：<code>drop index [indexName] on table</code></p><p>查看：show index from table</p><h5 id="需要建立索引的情况："><a href="#需要建立索引的情况：" class="headerlink" title="需要建立索引的情况："></a>需要建立索引的情况：</h5><ul><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其它表关联的字段，外键关系建立索引</li><li>频繁更新的字段不适合创建索引</li><li>where条件里用不到的字段不创建索引</li><li>在高并发下倾向创建组合索引</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li><li>查询中统计或者分组字段</li></ul><p><strong>不需要建立索引的情况：</strong></p><ul><li>表记录太少</li><li>经常增删改的表</li><li>如果某个数据列包含许多重复的内容，为它建立索引就没有必要</li></ul><h5 id="MySQL常见瓶颈："><a href="#MySQL常见瓶颈：" class="headerlink" title="MySQL常见瓶颈："></a>MySQL常见瓶颈：</h5><p>CPU:CPU在饱和的时候一般发生在数据装入内存或从磁盘读取数据的时候</p><p>I/O:磁盘I/O瓶颈发生在装入数据远大于内存容量的时候。</p><p>服务器硬件的性能瓶颈：top、free、iostat和vmstat来查看系统的性能状态</p><h3 id="Explain：执行计划"><a href="#Explain：执行计划" class="headerlink" title="Explain：执行计划"></a>Explain：执行计划</h3><p>使用Explain关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的，可以通过Explain关键字分析你的查询语句或是表结构的性能瓶颈</p><p><strong>使用方法：</strong><code>Explain+SQL语句</code></p><h5 id="Explain能干什么："><a href="#Explain能干什么：" class="headerlink" title="Explain能干什么："></a>Explain能干什么：</h5><ul><li>查看表的读取顺序</li><li>查看数据读取操作的操作类型</li><li>查看哪些索引可以使用</li><li>查看哪些索引被实际使用</li><li>查看表之间的引用</li><li>查看每张表有多少行被优化器查询</li></ul><h5 id="执行计划中包含的信息"><a href="#执行计划中包含的信息" class="headerlink" title="执行计划中包含的信息"></a>执行计划中包含的信息</h5><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210913154201651.png" class title="image-20210913154201651"><h4 id="表字段的解释："><a href="#表字段的解释：" class="headerlink" title="表字段的解释："></a>表字段的解释：</h4><p><strong>id</strong>：select查询的序列号，包含一组数字，表示查询中执行select字句或者操作表的顺序</p><ul><li><p>id相同：执行顺序由上至下</p></li><li><p>id不同：如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p></li><li><p>id中有相同的也有不同的：id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</p><p>DERIVED=衍生</p></li></ul><p><strong>select_type</strong>：</p><ul><li>SIMPLE:简单select查询，查询中不包含子查询或者UNION</li><li>PRIMARY:查询中若包含任何复杂的子部分，最外层查询则被标记为PRIMARY</li><li>SUBQUERY:在SQL语句中包含了子查询</li><li>DERIVED:在FROM列表中包含的子查询被标记为DERIVED(衍生)，MySQL会递归执行这些子查询，把结果放在临时表里</li><li>UNION：若第二个SELECT出现在UNION之后，则被标记为UNION;若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED</li><li>UNION RESULT:从UNION表获取结果的SELECT</li></ul><p><strong>type：</strong>访问类型排列，显示查询使用了何种类型</p><p><strong>从最好到最差依次是</strong>：<code>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</code></p><p>一般来说，得保证查询至少达到range级别，最好能达到ref</p><ul><li>system：表只有一行记录（等于系统表），这是const类型的特列，平时不会出现</li><li>const表示通过索引一次就找到了，const用于比较primary key或unique索引。因为只匹配一行数据，所以很快，如将主键置于where列表中，MySQL就能将该查询转换为一个常量</li><li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</li><li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而它可能会找到多个符合条件的行，所以它应该属于查找和扫描的混合体</li><li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引一般就是在你的where语句中出现了between、&gt;、&lt;、in等的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引</li><li>index：index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和index都是从索引中读取，而all是从硬盘中读的）</li><li>all：全表扫描找到匹配的行</li></ul><p><strong>possible_keys:</strong></p><p>显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p><p><strong>key:</strong></p><p>实际使用的索引。如果为NULL，则没有使用索引。<strong>查询中若使用覆盖索引，则该索引仅出现在key列表中</strong></p><p>覆盖索引：指查询的字段数量顺序都与所建的索引相同</p><p><strong>key_len:</strong></p><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好</p><p>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</p><p><strong>ref:</strong></p><p>显示索引的哪一列被使用了，如果可能的话是一个常数。哪些列或常量被用于查找索引列上的值。</p><p><strong>rows:</strong></p><p>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数</p><p><strong>Extra:</strong></p><p>包含不适合在其它列中显示但十分重要的额外信息 </p><p>Using filesort：说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL中无法利用索引完成的排序操作称为“文件排序”。</p><p>Using temporary:使用了临时表保存中间结果，MySQL在对查询结果排序使用临时表。常见于排序order by和分组查询group by(尽量按照所建索引进行分组)</p><p>Using index:</p><p>表示相应的select操作中使用了覆盖索引，避免访问表的数据行，效率不错。</p><p>如果同时出现using where ,表明索引被用来执行索引键值的查找</p><p>如果没有同时出现using where,表明索引用来读取数据而非执行查找操作。</p><p>Using where:表明使用了where过滤</p><p>Using join buffer：使用了连接缓存</p><p>impossible where：where 字句的值总是false，不能用来获取任何元组</p><p>select tables optimized away：在没有GROUP BY子句的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化count(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</p><p>distinct:</p><p>优化distinct操作，在找到第一匹配的元组后即停止找同样值动作。1</p><h5 id="覆盖索引（索引覆盖）"><a href="#覆盖索引（索引覆盖）" class="headerlink" title="覆盖索引（索引覆盖）"></a>覆盖索引（索引覆盖）</h5><p>理解方式一：select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件，换句话说<strong>查询列要被所建的索引覆盖</strong></p><p><strong>注：</strong></p><p>如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</p><h5 id="建立索引的关键点"><a href="#建立索引的关键点" class="headerlink" title="建立索引的关键点"></a>建立索引的关键点</h5><p>SQL语句中排序前有范围过滤语句的，可能会导致创建的索引失效。</p><p>由于左右连接的特性，作为“主表”的那个表的所有记录都会存在，因此需要将索引加在另一张表上。</p><p>尽可能减少join语句中的NestedLoop的循环总次数，“永远用小结果集驱动大结果集”</p><p><strong>全值匹配我最爱</strong>：</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210914170203644.png" class title="image-20210914170203644"><p>最佳左前缀法则：如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且<strong>不跳过索引中的列</strong></p><p>不在索引列上做任何操作（计算、函数、（自动或手动）类型转换），会导致索引失效而转向全表扫描</p><p>存储引擎不能使用索引中范围条件右边的列，即索引范围右边的索引都会失效</p><p>尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</p><p>mysql在使用!=或&lt;&gt;的时候无法使用索引会导致全表扫描</p><p>is null，is not null 也无法使用索引</p><p>like以通配符开头（’%abc….’）mysql索引失效会变成全表扫描的操作</p><p>字符串不加单引号索引失效</p><p>少用or,用它来连接时会索引失效</p><p>对于单值索引，尽量选择当前查询过滤性更好的索引。</p><p>在选择组合索引的时候，当前查询中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p><p>在选择组合索引的适合，尽量选择可以能够包含当前查询中的where字句中更多字段的索引尽可能通过分析统计信息和调整查询的写法来达到选择合适索引的目的。</p><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><p>1、观察SQL运行情况，至少跑一天，看看生产的慢SQL情况</p><p>2、开启慢查询日志，设置阙值，比如超过5秒钟就是慢SQL，并将它抓取出来</p><p>3、explain+慢SQL分析</p><p>4、show profile</p><p><strong>总结：</strong></p><ul><li>慢查询的开启并捕获</li><li>explain+慢SQL分析</li><li>show profile 查询SQL在MySQL服务器里面的执行细节和生命周期情况</li><li>SQL数据库服务器的参数调优</li><li>始终小表驱动大表</li></ul><h4 id="Order-By排序优化"><a href="#Order-By排序优化" class="headerlink" title="Order By排序优化"></a>Order By排序优化</h4><p>MySQL支持两种方式的排序，FileSort和Index，Index效率高。Index指MySQL扫描索引本身完成排序，FileSort方式效率较低。</p><h5 id="Order-By-满足两情况，会使用Index方式排序"><a href="#Order-By-满足两情况，会使用Index方式排序" class="headerlink" title="Order By 满足两情况，会使用Index方式排序"></a>Order By 满足两情况，会使用Index方式排序</h5><p>Order By语句使用索引最左前列</p><p>使用Where字句与Order By字句条件组合满足索引最左前列</p><p>尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀</p><h5 id="若不在索引列上，firesort有两种算法："><a href="#若不在索引列上，firesort有两种算法：" class="headerlink" title="若不在索引列上，firesort有两种算法："></a>若不在索引列上，firesort有两种算法：</h5><p>单路排序：一次磁盘扫描，但因为单路排序是将数据取出放到buffer钟进行排序，若数据量超过buffer的大小，那么就会造成多次磁盘扫描。</p><p>双路排序：两次磁盘扫描</p><p><strong>提高Order By的速度的方式：</strong></p><ul><li><p>当查询的字段大小总和小于max_length_for_sort_data而且排序字段不是TEXT|BLOB类型时，会用改进后的算法（单路排序），否则使用多路排序</p><p>两种排序算法的数据都可能超出sort_buffer的容量，超出之后，会创建tmp文件进行合并排序，导致多次I/O，但是用单路排序算法的风险会更大一些，所以要提高sort_buffer_size</p></li><li><p>尝试提高sort_buffer_size</p></li><li><p>尝试提高max_length_for_sort_data</p><p>提高这个参数，会增加用改进算法的概率。但是如果设得太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率</p></li></ul><h4 id="Group-By关键字优化"><a href="#Group-By关键字优化" class="headerlink" title="Group By关键字优化"></a>Group By关键字优化</h4><p>与Order By相似，Group By实质是先排序后进行分组，遵照索引建的最佳左前缀</p><p>where高于having，能写在where限定的条件就不要去having中限定了。</p><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志。</p><p>慢查询日志默认是未开启的，若不是调优需要，尽量不要开启慢查询日志，因为它或多或少会对查询效率产生影响</p><p><strong>查看慢查询日志开启状态：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>开启慢查询</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只针对当前数据库有效，MySQL重启后会失效</span></span><br><span class="line"><span class="built_in">set</span> global show_query_log=1;</span><br></pre></td></tr></table></figure><p>若需要永久生效，则需要修改配置文件my.cnf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在[mysqld]下面添加以下内容</span></span><br><span class="line">show_query_log=1;</span><br><span class="line">slow_query_log_file=/var/lib/mysql/laity-slow.log;</span><br></pre></td></tr></table></figure><p>查看慢查询日志的阈值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看</span></span><br><span class="line">show variables like <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"><span class="comment">#修改值:修改的值需要重新开启一个会话或使用</span></span><br><span class="line"><span class="comment">#show global variables like &#x27;%long_query_time%&#x27;;</span></span><br><span class="line"><span class="comment">#才能查看到</span></span><br><span class="line"><span class="built_in">set</span> global long_query_time=3;</span><br><span class="line"><span class="comment">#查询当前有多少条慢SQL</span></span><br><span class="line">show global status like <span class="string">&#x27;%Slow_queries&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这个阈值可以用命令修改，也可以修改配置文件（默认为10s）。且只有<strong>运行时间大于阈值的SQL</strong>才能被记录下来</p><h5 id="使用mysqldumpslow查看日志"><a href="#使用mysqldumpslow查看日志" class="headerlink" title="使用mysqldumpslow查看日志"></a>使用mysqldumpslow查看日志</h5><p>mysqldumpslow  参数</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210915235556032.png" class title="image-20210915235556032"><p>实例：</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210915235638963.png" class title="image-20210915235638963"><h4 id="批量插入数据库脚本"><a href="#批量插入数据库脚本" class="headerlink" title="批量插入数据库脚本"></a>批量插入数据库脚本</h4><h5 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h5><p>创建函数可能会报错：the function has none of deterministic</p><p>由于开启过慢查询日志，我们开启了bin-log,我们就必须为我们的function指定一个参数。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看参数</span></span><br><span class="line">show variables like <span class="string">&#x27;log_bin_trust_function_creators&#x27;</span></span><br><span class="line"><span class="comment">#为参数赋值</span></span><br><span class="line"><span class="built_in">set</span> global log_bin_trust_function_creators=1;</span><br></pre></td></tr></table></figure><p>上述方法，若mysql服务重启，上述参数会失效，若要永久生效需要修改配置文件my.cnf</p><p>在[mysqld]下添加<code>log_bin_trust_function_creators=1;</code></p><p>定义函数，生成随机字符串和随机数字</p><p>生成随机字符串</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> rand_string(n <span class="type">int</span>) <span class="keyword">returns</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">DECLARE</span> chars_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">default</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">while i <span class="operator">&lt;</span> n do</span><br><span class="line"><span class="keyword">set</span> return_str<span class="operator">=</span>concat(return_str,<span class="built_in">substring</span>(chars_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">26</span>),<span class="number">1</span>));</span><br><span class="line"><span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">return</span> return_str;</span><br><span class="line"><span class="keyword">end</span> $$</span><br></pre></td></tr></table></figure><p>生成随机数字</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> rand_num <span class="keyword">returns</span> <span class="type">int</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">DECLARE</span> res <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> res<span class="operator">=</span><span class="built_in">FLOOR</span>(<span class="number">100</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">end</span> $$</span><br></pre></td></tr></table></figure><p>向emp表中插入一千万条数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure insert_emp(<span class="keyword">in</span> start int(10),<span class="keyword">in</span> max_num int(10))</span><br><span class="line">begin</span><br><span class="line">DECLARE i int DEFAULT 0;</span><br><span class="line"><span class="comment">#关闭自动提交</span></span><br><span class="line"><span class="built_in">set</span> autocommit=0;</span><br><span class="line">repeat</span><br><span class="line"><span class="built_in">set</span> i=i+1;</span><br><span class="line">insert into emp(empno,ename,job,mgr,hiredate,sal,comm,deptno) values(start+i,rand_string(6),<span class="string">&#x27;SALESMAN&#x27;</span>,0001,curdate(),2000,400,rand_num());</span><br><span class="line">until i=max_num</span><br><span class="line">end repeat;</span><br><span class="line">commit;</span><br><span class="line">end $$</span><br></pre></td></tr></table></figure><p>向dept表中插入数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure insert_dept(<span class="keyword">in</span> start int(10),<span class="keyword">in</span> max_num int(10))</span><br><span class="line">begin</span><br><span class="line">DECLARE i int DEFAULT 0;</span><br><span class="line"><span class="comment">#关闭自动提交</span></span><br><span class="line"><span class="built_in">set</span> autocommit=0;</span><br><span class="line">repeat</span><br><span class="line"><span class="built_in">set</span> i=i+1;</span><br><span class="line">insert into dept(deptno,dname,loc) values(start+i,rand_string(10),rand_string(8));</span><br><span class="line">until i=max_num</span><br><span class="line">end repeat;</span><br><span class="line">commit;</span><br><span class="line">end $$</span><br></pre></td></tr></table></figure><h4 id="Show-profile"><a href="#Show-profile" class="headerlink" title="Show profile"></a>Show profile</h4><p>是mysql提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量。</p><p> 默认情况下处于关闭状态，使用前需要开启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看是否开启</span><br><span class="line">show variables like &#x27;profiling&#x27;;</span><br><span class="line">#开启</span><br><span class="line">set profiling=on;</span><br><span class="line"></span><br><span class="line">#查看sql语句的具体运行情况</span><br><span class="line">show profile cpu,block io for query 哪条sql </span><br></pre></td></tr></table></figure><p>除开cpu,block id之外，还能查看的其它参数<img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210916124104260.png" class title="image-20210916124104260"></p><p>若出现以下过程，SQL需要进行进一步优化：</p><ul><li>converting HEAP to MyISAM：查询结果太大，内存都不够用了往磁盘上搬</li><li>creating tmp table：创建临时表，将数据拷贝到临时表，用完再删除，大大影响效率</li><li>Copying to tmp table on disk：把内存中临时表复制到磁盘，危险</li><li>locked</li></ul><h4 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h4><p>注：永远不要在生产环境开启这个功能。</p><p>启用方式：</p><p>配置文件方式：</p><p>在mysql的my.cnf中设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启</span></span><br><span class="line">general_log=1</span><br><span class="line"><span class="comment">#记录日志文件的路径</span></span><br><span class="line">general_log_file=/path/xxx</span><br><span class="line"><span class="comment">#输出格式</span></span><br><span class="line">log_output=FILE</span><br></pre></td></tr></table></figure><p>命令方式启用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> general_log=1</span><br><span class="line"><span class="comment">#编写的sql语句会记录到mysql库里的general_log表中</span></span><br><span class="line"><span class="built_in">set</span> global log_output=<span class="string">&#x27;TABLE&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁"></a>数据库锁</h3><h4 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h4><p><strong>从对数据操作的粒度分：</strong></p><ul><li>表锁（偏向：MyISAM引擎）</li><li>行锁（InnoDB）</li></ul><p><strong>从对数据操作的类型分：</strong></p><ul><li><p>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行，而不会互相干扰</p><p>每一个Session对表加锁后，只能读被锁的表，不能读其它表，更不能修改被加锁的表</p></li><li><p>写锁（排它锁）：当前写操作没有完成前，它会阻断其它写锁和读锁</p></li></ul><p>简而言之：读锁会阻塞写，但是不会阻塞读。写锁会把读和写都阻塞</p><p>查看被锁过的表：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show open tables;</span><br></pre></td></tr></table></figure><p>手动增加表锁</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lock table 表名 read|write，表名1 read|write ...</span><br></pre></td></tr></table></figure><p>MyISAM表</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210918124347690.png" class title="image-20210918124347690"><h4 id="分析表锁定"><a href="#分析表锁定" class="headerlink" title="分析表锁定"></a>分析表锁定</h4><p>可以通过检查table_locks_waited和table_locks_immediate状态变量来分析系统上的表锁定。</p><p>SQL：show status like ‘table%’’</p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210918145807087.png" class title="image-20210918145807087"><p>这里有两个状态变量记录MySQL内部表级锁定的情况，两个变量说明如下：</p><p>Table_locks_immediate：产生表级锁定的次数，表示可以立即获取锁的查询次数</p><p>Table_locks_waited：出现标记锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值加一），此值搞说明存在着较严重的表级锁争用情况。</p><p><strong>MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的引擎，因为写锁后，其它线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</strong></p><h4 id="行锁："><a href="#行锁：" class="headerlink" title="行锁："></a>行锁：</h4><p>偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁粒度最小，发生锁冲突的概率最低，并发度也最高。</p><p>InnoDB与MyISAM的最大不同：</p><ul><li>支持事务</li><li>采用了行级锁</li></ul><p>MySQL的默认事务级别为 <strong>Repeatable read</strong></p><p>查看当前数据库的事务隔离级别：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;tx_isolation&#x27;</span>;</span><br></pre></td></tr></table></figure><p>无索引或索引失效会导致行锁升级为表锁，会大大影响性能。</p><h5 id="间隙锁："><a href="#间隙锁：" class="headerlink" title="间隙锁："></a>间隙锁：</h5><p>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值再条件范围内但并不存在的记录，叫做’间隙(GAP)‘，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-key锁）。</p><p>危害：</p><p>在查询过程中通过范围查找的话，他会锁定整个范围内的所有索引键值，即使这个键值并不存在，当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下，这可能会对性能造成很大的伤害。</p><p><strong>面试题：如何锁定一行</strong></p><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210918160357131.png" class title="image-20210918160357131"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> xxx <span class="keyword">for</span> update</span><br></pre></td></tr></table></figure><h4 id="行锁分析"><a href="#行锁分析" class="headerlink" title="行锁分析"></a>行锁分析</h4><p>命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br></pre></td></tr></table></figure><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210918160843936.png" class title="image-20210918160843936"><p>Innodb_row_lock_current_waits：当前正在正在等待锁定的数量</p><p>Innodb_row_lock_time：从系统启动到现在锁定总时间长度</p><p>Innodb_row_lock_time_avg：每次等待所花平均时间</p><p>Innodb_row_lock_time_max：从系统启动到现在等待最长的一次所花的时间</p><p>Innodb_row_lock_waits：系统启动后到现在总共等待的次数</p><p><strong>优化建议：</strong></p><ul><li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少检索条件，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可能低级别事务隔离</li></ul><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>MySQL复制过程分为三步：</p><ul><li>master将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events</li><li>slave将master的binary log events拷贝到它的中继日志（relay log）</li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL的复制是异步且串行化的</li></ul><p>复制的基本原则：</p><ul><li>每个slave只有一个master</li><li>每个slave只能有一个唯一的服务器ID</li><li>每个master可以有多个slave</li></ul><h4 id="一主一从常见配置"><a href="#一主一从常见配置" class="headerlink" title="一主一从常见配置"></a>一主一从常见配置</h4><p>mysql版本一致且后台以服务运行</p><p>组从都配置在[mysqld]节点下，都是小写</p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210919233248908.png" class title="image-20210919233248908"><p>B树（m叉树）是一种数据结构，具有以下特点：</p><ul><li>根节点至少有两个子节点</li><li>每个中间节点都包含k-1个元素和k个子节点，其中m/2&lt;=k&lt;=m</li><li>每一个叶子节点都包含k-1个元素，其中m/2&lt;=k&lt;=m</li><li>所有叶子节点都位于同一层</li><li>每个节点中关键字从小到大排列，并且当该节点的孩子是非叶子节点时，该k-1个元素正好是k个子节点包含的元素的值域的分划</li></ul><p><strong>B树在保留二叉树预划分范围从而提升查询效率的思想的前提，做了以下优化：</strong></p><p>二叉树变成m叉树，这个m的大小可以根据单个页的大小做对应调整，从而使得一个页可以存储更多的数据，从磁盘上读取一页可以读到的数据就更多，随机I/O次数变少，大大提升效率。但是只能通过中序遍历查询全表，当进行范围查询时，可能会需要中序回溯。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><img src="/2021/09/11/MySQL%E9%AB%98%E7%BA%A7/image-20210919234754977.png" class title="image-20210919234754977"><p>B+树在B树的基础上加了以下优化：</p><ul><li>叶子节点增加了指针进行连接，即叶子节点间形成了链表</li><li>非叶子节点只存关键字key，不再存储数据，只在叶子节点存储数据</li></ul><p>说明：叶子之间用双向链表连接比单向链表连接是通过链表的任一节点都可以通过往前或往后遍历找到链表中指定的其它节点</p><p>好处：</p><ul><li>范围查询时可以通过访问叶子节点的链表进行有序遍历，而不再需要中序回溯访问节点</li><li>非叶子节点只存储关键字key，一方面这种结构相当于划分出了更多的范围，加快了查询速度，另一方面相当于单个索引值大小变小，同一个页可以存储更多的关键字，读取单个页就可以得到更多的关键字，可检索的范围变大了，相对读写次数就降低了</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2021/09/10/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/09/10/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统一返回结果集</title>
      <link href="/2021/08/23/%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E9%9B%86/"/>
      <url>/2021/08/23/%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h4 id="SSM的统一返回结果集（供以后做参考）"><a href="#SSM的统一返回结果集（供以后做参考）" class="headerlink" title="SSM的统一返回结果集（供以后做参考）"></a>SSM的统一返回结果集（供以后做参考）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUCCESS=<span class="string">&quot;success&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ERROR=<span class="string">&quot;error&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultEntity</span><span class="params">(String result, String message, String code, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//&lt;Type&gt;:声明一个泛型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求成功且没有返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;Type&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResultEntity&lt;Type&gt; <span class="title">successWithOutData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultEntity&lt;Type&gt;(SUCCESS,<span class="keyword">null</span>,<span class="string">&quot;200&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理成功，且有返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;Type&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResultEntity&lt;Type&gt; <span class="title">successWithData</span><span class="params">(Type data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultEntity&lt;Type&gt;(SUCCESS,<span class="keyword">null</span>,<span class="string">&quot;200&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;Type&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Type&gt; <span class="function">ResultEntity&lt;Type&gt; <span class="title">failure</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultEntity&lt;Type&gt;(ERROR,message,<span class="string">&quot;500&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringBoot项目学到的统一返回结果集"><a href="#SpringBoot项目学到的统一返回结果集" class="headerlink" title="SpringBoot项目学到的统一返回结果集"></a>SpringBoot项目学到的统一返回结果集</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RebackInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否成功&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回状态码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; data=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RebackInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RebackInfo <span class="title">ok</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RebackInfo info = <span class="keyword">new</span> RebackInfo();</span><br><span class="line">        info.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">        info.setCode(ResultCode.SUCCESS);</span><br><span class="line">        info.setMessage(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RebackInfo <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RebackInfo info=<span class="keyword">new</span> RebackInfo();</span><br><span class="line">        info.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">        info.setCode(ResultCode.ERROR);</span><br><span class="line">        info.setMessage(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">success</span><span class="params">(Boolean success)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSuccess(success);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">code</span><span class="params">(Integer code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">message</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">data</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.put(key,value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RebackInfo <span class="title">data</span><span class="params">(Map&lt;String,Object&gt; data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setData(data);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 框架 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范返回结果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5加密</title>
      <link href="/2021/08/23/md5%E5%8A%A0%E5%AF%86/"/>
      <url>/2021/08/23/md5%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h4 id="md5加密代码："><a href="#md5加密代码：" class="headerlink" title="md5加密代码："></a>md5加密代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * md5加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String source)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 对传入参数进行校验</span></span><br><span class="line">        <span class="keyword">if</span>( source ==<span class="keyword">null</span> || source.length() == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="comment">//字符串为空抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(CrowdConstant.MESSAGE_ILLEGAL_PARAM);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取MessageDigest对象</span></span><br><span class="line">            String algorithm = <span class="string">&quot;md5&quot;</span>;</span><br><span class="line">            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取明文对应的字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] input = source.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行加密</span></span><br><span class="line">            <span class="keyword">byte</span>[] output = messageDigest.digest(input);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建BigInteger对象</span></span><br><span class="line">            <span class="keyword">int</span> signum=<span class="number">1</span>;</span><br><span class="line">            BigInteger bigInteger = <span class="keyword">new</span> BigInteger(signum, output);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 按照16进制将bigInteger的值传唤为字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 指定进制</span></span><br><span class="line">            <span class="keyword">int</span> radix=<span class="number">16</span>;</span><br><span class="line">            String encoded = bigInteger.toString(radix);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> encoded;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 框架 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单配置PageHelper分页插件</title>
      <link href="/2021/08/22/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AEPageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/"/>
      <url>/2021/08/22/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AEPageHelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="PageHelper是Mybatis的一款分页插件"><a href="#PageHelper是Mybatis的一款分页插件" class="headerlink" title="PageHelper是Mybatis的一款分页插件"></a>PageHelper是Mybatis的一款分页插件</h4><h3 id="使用方法（maven）"><a href="#使用方法（maven）" class="headerlink" title="使用方法（maven）"></a>使用方法（maven）</h3><h4 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、配置拦截器插件"><a href="#2、配置拦截器插件" class="headerlink" title="2、配置拦截器插件"></a>2、配置拦截器插件</h4><p>注意：新版的PageHelper的拦截器是<code>com.github.pagehelper.PageInterceptor</code>,<code>com.github.pagehelper.PageHelper</code> 现在是一个特殊的 <code>dialect</code> 实现类，是分页插件的默认实现类，提供了和以前相同的用法。</p><h5 id="1-在MyBatis的mybatis-config-xml中配置拦截器插件"><a href="#1-在MyBatis的mybatis-config-xml中配置拦截器插件" class="headerlink" title="(1) 在MyBatis的mybatis-config.xml中配置拦截器插件"></a>(1) 在MyBatis的mybatis-config.xml中配置拦截器插件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下:</span></span><br><span class="line"><span class="comment">    properties?, settings?,</span></span><br><span class="line"><span class="comment">    typeAliases?, typeHandlers?,</span></span><br><span class="line"><span class="comment">    objectFactory?,objectWrapperFactory?,</span></span><br><span class="line"><span class="comment">    plugins?,</span></span><br><span class="line"><span class="comment">    environments?, databaseIdProvider?, mappers?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-在Spring配置文件（spring-dao-xml）中配置拦截器插件"><a href="#2-在Spring配置文件（spring-dao-xml）中配置拦截器插件" class="headerlink" title="(2) 在Spring配置文件（spring-dao.xml）中配置拦截器插件"></a>(2) 在Spring配置文件（spring-dao.xml）中配置拦截器插件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--绑定mybatis的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mybatis/mapper/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置pageHelper插件,新版拦截器是 com.github.pagehelper.PageInterceptor--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--配置页码的合理化修正,在1~总页数之间修正页码--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;reasonable&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、分页插件参数"><a href="#3、分页插件参数" class="headerlink" title="3、分页插件参数"></a>3、分页插件参数</h4><p><a href="https://pagehelper.github.io/docs/howtouse/">如何使用分页插件 (pagehelper.github.io)</a></p><p><strong>注意：</strong>上述的两种配置分页插件的方法任选一种配置即可，不能重复配置</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo&lt;Admin&gt; <span class="title">getPageInfo</span><span class="params">(String keyword, <span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用PageHelper的静态方法开启分页功能</span></span><br><span class="line">    <span class="comment">// 充分体现了PageHelper的&quot;非侵入式&quot;设计：原本要做的查询不必有任何修改</span></span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    List&lt;Admin&gt; adminList = adminMapper.selectAdminWithLimit(keyword);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装到PageInfo对象中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;&gt;(adminList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// defaultValue设置参数初始值</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/get/page.html&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPageInfo</span><span class="params">(<span class="meta">@RequestParam(value = &quot;keyword&quot;, defaultValue = &quot;&quot;)</span> String keyword,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span> <span class="keyword">int</span> pageNum,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(value = &quot;pageSize&quot;, defaultValue = &quot;5&quot;)</span> <span class="keyword">int</span> pageSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ModelMap modelMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageInfo&lt;Admin&gt; pageInfo = adminService.getPageInfo(keyword, pageNum, pageSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将pageInfo存入模型中</span></span><br><span class="line">    modelMap.addAttribute(CrowdConstant.ATTR_NAME_PAGE_INFO, pageInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;admin-page&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端生成页码导航器"><a href="#前端生成页码导航器" class="headerlink" title="前端生成页码导航器"></a>前端生成页码导航器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;css/pagination.css&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;jquery/jquery.pagination.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        initPagination();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">initPagination</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 获取总记录数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> totalRecord=$&#123;requestScope.pageInfo.total&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 声明一个JSON对象存储Pagination要设置的属性</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> properties=&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 边缘页数，即显示在最左边的页码的数量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">num_edge_entries</span>: <span class="number">3</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 主体页，即显示在最右边的页码的数量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">num_display_entries</span>: <span class="number">4</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 指定用户点击&quot;翻页&quot;按钮时跳转页面的回调函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">callback</span>: pageSelectCallback,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// 每页要显示的数据的数量</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">items_per_page</span>: $&#123;requestScope.pageInfo.pageSize&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// current_page：从0开始，而pageNum从1开始，所以需要减一</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">current_page</span>: $&#123;requestScope.pageInfo.pageNum-<span class="number">1</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">prev_text</span>: <span class="string">&quot;上一页&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">next_text</span>: <span class="string">&quot;下一页&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 生成页码导航器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $(<span class="string">&quot;#Pagination&quot;</span>).pagination(totalRecord,properties);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 回调函数的含义：声明出来以后不是自己调用，而是交给系统或框架调用</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 用户点击页码时调用这个函数实现页面跳转</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// pageIndex是Pagination传给我们的那个“从0开始”的那个页码</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">pageSelectCallback</span>(<span class="params">pageIndex,jQuery</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 根据pageIndex计算得到pageNum</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> pageNum=pageIndex+<span class="number">1</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 跳转页面</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">window</span>.location.href=<span class="string">&quot;admin/get/page.html?pageNum=&quot;</span>+pageNum+<span class="string">&quot;&amp;keyword=$&#123;param.keyword&#125;&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 由于每一个页码按钮都是超链接，所以在这个函数最后取消超链接的默认行为</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2021/08/13/SpringMVC/"/>
      <url>/2021/08/13/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="MVC简介："><a href="#MVC简介：" class="headerlink" title="MVC简介："></a>MVC简介：</h2><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的件写，是一种软件设计规范</li><li>它能讲业务逻辑、数据、显示分离的方法来组织代码</li><li>MVC只要作用是<strong>降低了视图与业务逻辑间的双向耦合</strong></li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>，当然不同的MVC存在差异</li></ul><p>**Model(模型)**：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object(数据Dao)和服务层（行为Service)。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务</p><p>**View(视图)**：负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西</p><p>**Controller(控制器)**：接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作</p><h2 id="回顾servlet"><a href="#回顾servlet" class="headerlink" title="回顾servlet"></a>回顾servlet</h2><ol><li><p>创建一个maven项目</p></li><li><p>导入相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个web项目</p><img src="/2021/08/13/SpringMVC/image-20210405144947118.png" class title="image-20210405144947118"></li></ol><h3 id="SpringMVC的特点"><a href="#SpringMVC的特点" class="headerlink" title="SpringMVC的特点"></a>SpringMVC的特点</h3><ul><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题</li><li>简洁灵活</li></ul><h3 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h3><img src="/2021/08/13/SpringMVC/image-20210405170346590.png" class title="image-20210405170346590"><ul><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求</p><ul><li><p>我们假设请求的url为：<a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p></li><li><p>url分为三部分</p><p>服务器域名：<a href="http://localhost:8080/">http://localhost:8080</a></p><p>部署在服务器上的web站点：SpringMVC</p><p>控制器：hello</p></li><li><p>如上url表示：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</p></li></ul></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping，HandlerMapping根据请求url查找Handler</p></li><li><p>HandlerExecution表示具体的Handler，其主要作用是根据url查找控制器，如上url被查找控制器为:hello</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler</p></li><li><p>Handler让具体的Controller执行</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView.</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet</p></li><li><p>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</p></li><li><p>最终将视图呈现给用户</p></li></ul><h3 id="第一个SpringMVC程序"><a href="#第一个SpringMVC程序" class="headerlink" title="第一个SpringMVC程序"></a>第一个SpringMVC程序</h3><ol><li><p>创建一个maven项目</p></li><li><p>导入相关的依赖jar包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>确定依赖导入</p><img src="/2021/08/13/SpringMVC/image-20210405173403353.png" class title="image-20210405173403353"><img src="/2021/08/13/SpringMVC/image-20210405173431380.png" class title="image-20210405173431380"></li><li><p>编写web.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置DispatcherServlet:SpringMVC的核心;请求分发器;前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DispatcherServlet要绑定的Spring的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启动级别:1,与服务器一同启动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在SpringMVC中，/ /*</span></span><br><span class="line"><span class="comment">/:只匹配所有的请求，不会去匹配jsp页面</span></span><br><span class="line"><span class="comment">/*:匹配所有的请求，会匹配jsp页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--处理器映射器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--真正在开发中不用配，可以自动配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--视图解析器:模板引擎Thymeleaf Freemarker....--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--BeanNameUrlHandlerMapping:根据bean的名称来适配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">    String result=<span class="string">&quot;HelloSpringMVC&quot;</span>;</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图跳转</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用注解方式编写SpringMVC程序"><a href="#使用注解方式编写SpringMVC程序" class="headerlink" title="使用注解方式编写SpringMVC程序"></a>使用注解方式编写SpringMVC程序</h3><ol><li><p>创建maven对象，导入相关依赖，jar包</p></li><li><p>确定依赖导入成功，创建web工程</p></li><li><p>编写web.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置DispatcherServlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-annotaion.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置启动级别：1,和服务器同时启动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Spring配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启自动扫描包，让指定包下的注解生效，由IOC容器统一管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mjy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--让SpringMVC不处理静态资源 .css  .js   .html  .mp3 .mp4--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">h</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//真实访问地址：项目名/HelloController/hello</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        <span class="comment">//向模型中添加属性msg与值,可以在JSP页面中取出并渲染</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello SpringMVC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// web-inf/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;<span class="comment">//会被视图解析器处理,视图名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ul><li><p>只要实现了Controller接口的类，说明就是一个控制器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>不使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler/&gt;</span><br><span class="line"></span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br></pre></td></tr></table></figure><p>通过以下方法也能进行跳转</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelAndViewTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    HttpSession session = request.getSession();</span><br><span class="line">    System.out.println(session.getId());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;control&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过SpringMVC来实现转发和重定向-无需视图解析器"><a href="#通过SpringMVC来实现转发和重定向-无需视图解析器" class="headerlink" title="通过SpringMVC来实现转发和重定向-无需视图解析器"></a>通过SpringMVC来实现转发和重定向-无需视图解析器</h3><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelAndViewTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/forward&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;转发&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/WEB-INF/jsp/control.jsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发:会使用到视图解析器</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/forward1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;转发&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/jsp/control.jsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/resend&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//redirect:重定向</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;重定向&quot;</span>);</span><br><span class="line">        <span class="comment">//redirect不会使用视图解析器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:index.jsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC数据处理"><a href="#SpringMVC数据处理" class="headerlink" title="SpringMVC数据处理"></a>SpringMVC数据处理</h3><h4 id="处理提交的数据"><a href="#处理提交的数据" class="headerlink" title="处理提交的数据"></a>处理提交的数据</h4><ol><li><p><strong>提交的域名陈和处理方法的参数名一致</strong></p><p>提交数据：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%90%8D/user/t1?name=">http://localhost:8080/项目名/user/t1?name=</a>???</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="comment">//只要是要从前端接收的参数，无论参数名一不一样，都建议把@RequestParam写上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span>String name, Model model)</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收前端参数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;接受到前端的参数为：&quot;</span>+name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将返回的结果传递给前端</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图跳转</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;control&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接收到的是一个对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前端传递的是一个对象：age,name address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、接收前端用户传递的参数，判断参数的名称，假设名称自接在方法上，可以直接使用</span></span><br><span class="line"><span class="comment">2、假设传递的是一个对象User,匹配User对象中的字段名：如果名字一致则ok,否则匹配不到</span></span><br><span class="line"><span class="comment">3、前端传递的参数需要与对象中的字段名一致，否则该字段为null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;control&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="将数据展示到前端页面上的方式"><a href="#将数据展示到前端页面上的方式" class="headerlink" title="将数据展示到前端页面上的方式"></a>将数据展示到前端页面上的方式</h5><ul><li><p>Model:精简版（大部分使用Model）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/resend&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//redirect:重定向</span></span><br><span class="line">      model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;重定向&quot;</span>);</span><br><span class="line">      <span class="comment">//redirect不会使用视图解析器</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;redirect:index.jsp&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>ModelMap：继承了LinkedHashMap,所以他拥有LinkedHashMap的全部功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(User user, ModelMap map)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        map.addAttribute(<span class="string">&quot;msg&quot;</span>,map);</span><br><span class="line">        </span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;control&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>ModelAndView:可以在存储数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Controller详解&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mv.setViewName(<span class="string">&quot;control&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决乱码问题："><a href="#解决乱码问题：" class="headerlink" title="解决乱码问题："></a>解决乱码问题：</h3><p>配置SpringMVC配置过滤器</p><p>自定义的Filter</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在web.xml中配置过滤器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.mjy.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong>/:只匹配所有的请求，不会去匹配jsp页面<br>/*:匹配所有的请求，会匹配jsp页面</p><p>SpringMVC自带的过滤器（但不知道为什么，我的没有生效，反倒是自己写的生效了）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encode1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encode1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：有些极端情况下，这个过滤器对get的支持不好</p><p>处理方法：</p><ol><li><p>修改tomcat配置文件：设置编码</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义filter</p></li><li><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSON乱码问题配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li>JSON(JavaScript Object Notation,JS对象标记)，是一种轻量级的数据交换格式，目前使用广泛</li><li>采用完全独立于编程语言的文本格式来存储和表示数据</li><li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</li></ul><h3 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        要下载的图片地址</span></span><br><span class="line">        String realPath = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        String fileName=<span class="string">&quot;带眼镜的女生.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置response响应头</span></span><br><span class="line">        <span class="comment">// 设置页面不缓存，清空buffer</span></span><br><span class="line">        response.reset();</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);<span class="comment">//二进制传输数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        File file=<span class="keyword">new</span> File(realPath,fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取文件-输入流</span></span><br><span class="line">        InputStream is=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="comment">//写出文件的输出流</span></span><br><span class="line">        OutputStream output = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            output.write(buff,<span class="number">0</span>,len);</span><br><span class="line">            output.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        output.close();</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习</title>
      <link href="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h2><ul><li>Spring是轻量级的开源的JavaEE框架</li><li>Spring可以解决企业应用开发的复杂性</li><li>Spring有两个核心部分：IOC和AOP<ol><li>IOC:控制反转，把创建对象过程交给Spring进行管理</li><li>AOP：面向切面，不修改源代码进行功能增强</li></ol></li><li>Spring特点<ol><li>方便解耦，简化开发</li><li>AOP编程支持</li><li>方便程序测试</li><li>方便和其它框架进行整合</li><li>方便进行事务操作</li><li>降低API开发难度</li></ol></li></ul><p><strong>Spring下载地址：</strong><a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a></p><p><strong>源码地址</strong>：<a href="https://github.com/spring-projects/spring-framework">GitHub - spring-projects/spring-framework: Spring Framework</a></p><p><strong>导入依赖：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Spring7大组件:</strong></p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/1010726-20190908042152777-1895820426.png" class title="img"><h3 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h3><p><strong>之前(每多增加一个需求需要修改底层代码，程序主动创建对象，创建对象的控制权在程序员手中)：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao=<span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userDao.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用set方法对属性进行动态赋set方法对属性进行动态赋值</strong></p><p>程序不再具有主动性，而是变成了被动的接受对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用set方法对属性进行动态赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    userDao.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><h3 id="IOC的概念和原理"><a href="#IOC的概念和原理" class="headerlink" title="IOC的概念和原理"></a>IOC的概念和原理</h3><ol><li><p>什么是IOC</p><ul><li>控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IOC的目的：降低耦合度</li></ul></li><li><p>IOC底层原理</p><ul><li><p>xml解析、工厂模式、反射</p></li><li><p>IOC过程</p><p><img src="/Sparing%E5%AD%A6%E4%B9%A0/image-20210328175720678.png" alt="image-20210328175720678"></p></li></ul></li><li><p>IOC：接口</p><ul><li><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p></li><li><p>Spring提供IOC容器事项的两种方式：两个接口</p><ol><li><p>BeanFactory:IOC容器基本实现方式，是Spring内部的使用接口，不提供给开发人员进行使用</p><p>区别：<strong>BeanFactory加载配置文件时不会创建对象，在获取对象（使用）才会去创建对象</strong></p></li><li><p>ApplicationContext：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用</p><p><strong>ApplocationContext:加载配置文件时就会把在配置文件的对象进行创建</strong></p></li><li><p>ApplicationContext接口的实现类</p><p><img src="/Sparing%E5%AD%A6%E4%B9%A0/image-20210328181936073.png" alt="image-20210328181936073"></p></li></ol></li></ul></li></ol><h3 id="IOC操作Bean管理"><a href="#IOC操作Bean管理" class="headerlink" title="IOC操作Bean管理"></a>IOC操作Bean管理</h3><p><strong>什么是Bean管理</strong></p><ol><li><p>Bean管理指的是两个操作</p><p>Spring创建对象</p><p>Spring注入属性</p></li></ol><p><strong>Bean管理操作有两种方式</strong></p><ol><li>基于xml配置文件方式实现</li><li>基于注解方式实现</li></ol><h3 id="基于xml方式创建对象"><a href="#基于xml方式创建对象" class="headerlink" title="基于xml方式创建对象"></a>基于xml方式创建对象</h3><ol><li><h4 id="基于xml方式创建对象-1"><a href="#基于xml方式创建对象-1" class="headerlink" title="基于xml方式创建对象"></a>基于xml方式创建对象</h4></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置User对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建</p><p>bean标签中有很多属性，常用的属性</p><ol><li>id属性：唯一的标识</li><li>class属性：创建对象所属类的全路径（包类路径）</li><li>name属性：作用与id属性相同。区别：name可以使用特殊符号，id不能使用特殊符号</li></ol><p>创建对象的时候，默认执行无参构造器</p><h4 id="2-基于xml方式注入属性"><a href="#2-基于xml方式注入属性" class="headerlink" title="2.基于xml方式注入属性"></a>2.基于xml方式注入属性</h4><ul><li><p>DI:依赖注入，就是注入属性—-DI是IOC的一种具体的实现，</p><ol><li><p>使用set方法进行注入</p><ol><li><p>创建对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件配置对象创建，配置属性注入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--set方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property标签完成属性注入</span></span><br><span class="line"><span class="comment">        name:类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;老人与海&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">value</span>=<span class="string">&quot;海明威&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>有参构造器注入</p><ol><li><p>创建有参构造器的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造注入属性--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--报错是因为无无参构造器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--不建议使用：通过类型创建--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.entity.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;莫枫舞&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--下标赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.entity.User&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;莫语诸&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--起别名，有别名的对象，也可以通过别名来从Spring容器中取出对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;animal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id:bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">  class:bean对象所对应的全限定名：报名+类型</span></span><br><span class="line"><span class="comment">    name：也是别名，而且name可以同时取多个别名</span></span><br><span class="line"><span class="comment">    scope:可以设置单例，还是每次创建不同的东西</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.entity.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2,user3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;夏雨&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        </span><br><span class="line">      </span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><ol start="3"><li>p名称空间注入使用p名称空间注入，可以简化基于xml配置方式<ol><li>添加p名称空间在配置文件中<img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210330180400748.png" class title="image-20210330180400748"></li><li>进行属性注入，在bean标签里面进行操作<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Book&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;斗破苍穹&quot;</span> <span class="attr">p:author</span>=<span class="string">&quot;天蚕土豆&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>IOC操作Bean管理（xml注入其它类型属性）<ol><li><p>null值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--向属性赋空值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性值包含特殊符号</p><p>1、把特殊符号进行转义</p><p>2、把带特殊符号内容写到CDATA</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;hell&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性-外部bean"></a>注入属性-外部bean</h4><ol><li><p>创建两个类service类和dao类</p></li><li><p>在service调用dao里面的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建UserMapper类型的属性，并提供set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service....&quot;</span>);</span><br><span class="line">        userMapper.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    创建UserMapper的实现类对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.dao.UserMapperImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="注入属性–内部bean和级联赋值"><a href="#注入属性–内部bean和级联赋值" class="headerlink" title="注入属性–内部bean和级联赋值"></a>注入属性–内部bean和级联赋值</h4><p>一对多关系：员工和部门</p><p>一个部门有多个员工，一个员工属于一个部门</p><p>部门是一，员工是多</p><p><strong>在实体类之间表示一对多关系</strong></p><p>创建对应的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Development dep;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDep</span><span class="params">(Development dep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dep = dep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Development</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小芳&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dep&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Development&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;人事部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="级联赋值"><a href="#级联赋值" class="headerlink" title="级联赋值"></a>级联赋值</h4><ul><li>```xml<?xml version="1.0" encoding="UTF-8"?>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;">http://www.springframework.org/schema/beans&quot;</a><pre><code>   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;   xmlns:p=&quot;http://www.springframework.org/schema/p&quot;   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;&lt;!--级联赋值--&gt;&lt;bean id=&quot;employee&quot; class=&quot;com.mjy.pojo.Employee&quot;&gt;    &lt;property name=&quot;name&quot; value=&quot;李信&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;dep&quot; ref=&quot;dep&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;dep&quot; class=&quot;com.mjy.pojo.Development&quot;&gt;    &lt;property name=&quot;dname&quot; value=&quot;安保部&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 第二种方法：</span><br><span class="line"></span><br><span class="line">  ```xml</span><br><span class="line">  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">  &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;!--级联赋值--&gt;</span><br><span class="line">      &lt;bean id=&quot;employee&quot; class=&quot;com.mjy.pojo.Employee&quot;&gt;</span><br><span class="line">          &lt;property name=&quot;name&quot; value=&quot;李信&quot;&gt;&lt;/property&gt;</span><br><span class="line">          &lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;</span><br><span class="line">          &lt;property name=&quot;dep&quot; ref=&quot;dep&quot;&gt;&lt;/property&gt;</span><br><span class="line">          &lt;!--使用之前需要获得该属性的get方法--&gt;</span><br><span class="line">          &lt;property name=&quot;dep.dname&quot; value=&quot;财务部&quot;&gt;&lt;/property&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">      &lt;bean id=&quot;dep&quot; class=&quot;com.mjy.pojo.Development&quot;&gt;</span><br><span class="line">      &lt;/bean&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="xml注入集合属性"><a href="#xml注入集合属性" class="headerlink" title="xml注入集合属性"></a>xml注入集合属性</h4><ol><li><p>注入数组类型属性</p></li><li><p>注入List集合类型属性</p></li><li><p>注入Map集合类型属性</p></li><li><p>步骤</p><ol><li><p>创建类并定义数组、list、map、set类型属性，生成对应set方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组类型</span></span><br><span class="line">    <span class="keyword">private</span> String[] course;</span><br><span class="line">    <span class="comment">//list类型</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map类型</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set类型</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getCourse() &#123;</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(String[] course)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.course = course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMaps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--集合类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;course&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--list类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>宁毅<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>苏檀儿<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;数据库&quot;</span> <span class="attr">value</span>=<span class="string">&quot;陈老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;操作系统&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吴老师&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注入集合对象的属性</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建多个Course对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;英语&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;数学&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>把结合注入部分提取出来</p><ol><li><p>在Spring配置文件中引入名称J空间</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用util标签完成list集合注入提取</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--提取list集合类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>降龙十八掌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>打狗棍法<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>玉女心经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--提取list集合类型属性注入使用--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Book&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="IOC操作bean管理（FactoryBean）"><a href="#IOC操作bean管理（FactoryBean）" class="headerlink" title="IOC操作bean管理（FactoryBean）"></a>IOC操作bean管理（FactoryBean）</h3><ol><li>Spring有两种类型bean，一种普通bean，另外一种工厂bean(FactoryBean)</li><li>普通bean：在配置文件中定义bean类型就是返回类型</li><li>工厂bean：在配置文件定义bean类型可以和返回类型不一样</li></ol><p>创建一个FactoryBean的步骤：</p><ul><li><p>创建类，让这个类作为工厂bean，实现接口FactoryBean</p></li><li><p>实现接口里面的方法，在实现的方法中定义返回的bean类型</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public class MyBean implements FactoryBean<span class="tag">&lt;<span class="name">Book</span>&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Book getObject() throws Exception &#123;</span><br><span class="line">        Book book = new Book();</span><br><span class="line">        ArrayList<span class="tag">&lt;<span class="name">String</span>&gt;</span> strings = new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">        strings.add(&quot;hello&quot;);</span><br><span class="line">        strings.add(&quot;西游记&quot;);</span><br><span class="line">        book.setList(strings);</span><br><span class="line">        return book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isSingleton() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    ApplicationContext context=new ClassPathXmlApplicationContext(&quot;bean2.xml&quot;);</span><br><span class="line"></span><br><span class="line">    Book myBean = context.getBean(&quot;myBean&quot;, Book.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(myBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="IOC操作Bean管理（bean作用域）"><a href="#IOC操作Bean管理（bean作用域）" class="headerlink" title="IOC操作Bean管理（bean作用域）"></a>IOC操作Bean管理（bean作用域）</h3><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210811165359915.png" class title="image-20210811165359915"><ul><li><p>在Spring里面，可以设置创建bean实例是单实例还是多实例</p></li><li><p>在Spring里面，默认情况下，bean是单实例例对象</p></li><li><p>设置单实例还是多实例</p><ol><li><p>在Spring配置文件bean标签里面有属性(scope)用于设置单实例还是多实例</p></li><li><p>scope常用属性值：</p><p>singleton：默认值，表示是单实例对象</p><p>prototype：表示是多实例对象</p></li><li><p>singleton和prototype的区别</p><p>设置scope为singleton的时候，加载spring配置文件时就会创建单实例对象</p><p>设置scope值是prototype的时候，不是在加载spring 配置文件的时候创建对象，而是在调用getBean方法的时候去创建多实例对象</p></li><li></li></ol></li><li><p>在配置文件中配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单实例还是多实例设置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单例：singleton，原型：prototype--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Course&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="IOC操作Bean管理（bean生命周期）"><a href="#IOC操作Bean管理（bean生命周期）" class="headerlink" title="IOC操作Bean管理（bean生命周期）"></a>IOC操作Bean管理（bean生命周期）</h3><ul><li><p>生命周期：从对象创建到对象销毁的过程</p></li><li><p>bean生命周期</p><ol><li>通过构造器创建bean实例（无参数构造）</li><li>为bean的属性设置值和对其他bean引用（调用set方法）</li><li>调用bean的初始化方法（需要进行配置初始化的方法）</li><li>bean能够使用（对象获取到了）</li><li>当容器关闭时，调用bean的销毁的方法（需要进行配置销毁的方法）</li></ol></li><li><p>bean生命周期的演示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用set方法设置属性&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Order&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;外卖&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcess</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Order order = context.getBean(<span class="string">&quot;order&quot;</span>, Order.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;获取了order对象&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210401111652522.png" class title="image-20210401111652522"></li><li><p>有bean的后置处理器的情况下，bean的生命周期有七步</p><ol><li>通过构造器创建bean实例（无参数构造）</li><li>为bean的属性设置值和对其他bean引用（调用set方法）</li><li>把bean实例传递给bean后置处理器的方法<strong>postProcessBeforeInitialization</strong></li><li>调用bean的初始化方法（需要进行配置初始化的方法）</li><li>把bean实例传给bean后置处理器的方法<strong>postProcessAfterInitialization</strong></li><li>bean能够使用（对象获取到了）</li><li>当容器关闭时，调用bean的销毁的方法（需要进行配置销毁的方法）</li></ol></li><li><p>演示添加后置处理器效果</p><ol><li><p>创建类，实现BeanPostProcessor接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置bean后置处理器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Order&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;外卖&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置bean后置处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBoonPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.MyBeanPost&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210401113427712.png" class title="image-20210401113427712"></li></ol></li></ul><h3 id="IOC操作Bean管理（xml自动装配）"><a href="#IOC操作Bean管理（xml自动装配）" class="headerlink" title="IOC操作Bean管理（xml自动装配）"></a>IOC操作Bean管理（xml自动装配）</h3><ul><li><p>什么是自动装配</p><p>根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入</p></li><li><p>演示自动装配的过程</p><ol><li><p>根据属性名称自动注入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Employee&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;阿里巴巴&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>根据属性类型进行注入  注意：不能定义两个相同类型的bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Employee&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.pojo.Development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;阿里巴巴&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="IOC操作Bean管理（外部属性文件）"><a href="#IOC操作Bean管理（外部属性文件）" class="headerlink" title="IOC操作Bean管理（外部属性文件）"></a>IOC操作Bean管理（外部属性文件）</h3><ol><li><p>直接配置数据库信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mjy600811&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>把外部properties属性文件引入到spring配置文件中</p><p>步骤：</p><ol><li><p>引入context名称空间</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210401194647861.png" class title="image-20210401194647861"></li><li><p>在spring配置文件中使用标签引入外部属性文件</p></li></ol></li></ol><h3 id="IOC操作Bean管理（基于注解方式）"><a href="#IOC操作Bean管理（基于注解方式）" class="headerlink" title="IOC操作Bean管理（基于注解方式）"></a>IOC操作Bean管理（基于注解方式）</h3><ol><li><p>什么是注解</p><ol><li>注解是代码特殊标记，格式：@注解名称（属性名称=属性值，属性名称=属性值..）</li><li>使用注解，注解作用在类上面，方法上面，属性上面</li><li>使用注解的目的：简化xml配置</li></ol></li><li><p>Spring针对Bean管理中创建对象提供注解</p><p>下面四个注解的功能是一样的，都可以用来创建bean实例，按照mvc架构区分</p><ol><li>@Component</li><li>@Service 【service】</li><li>@Controller 【controller】</li><li>@Repository 【dao】</li></ol></li><li><p>基于注解方式实现对象创建</p><ol><li><p>引入依赖</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210401204132106.png" class title="image-20210401204132106"></li><li><p>开启组件扫描：需要引入context名称空间</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启组件扫描</span></span><br><span class="line"><span class="comment">    1、如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment">    2、扫描包上层目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;context:component-scan base-package=&quot;com.mjy.dao,com.mjy.service&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mjy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建类，在类上面添加创建对象注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面的操作相当于：&lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="meta">@Service(value=&quot;userService&quot;)</span></span><br><span class="line"><span class="comment">//注解方式可以不写value值，默认为类名首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>开启组件扫描细节配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例一</span></span><br><span class="line"><span class="comment">    use-default-filter=false 表示现在不使用默认filter,自己配置filter</span></span><br><span class="line"><span class="comment">    context:include-filter ,设置扫描哪些内容</span></span><br><span class="line"><span class="comment">    默认扫描全部</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mjy&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--示例2</span></span><br><span class="line"><span class="comment">下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment">context:exclude-filter 设置不扫描哪些内容</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mjy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基于注解方式实现属性注入</p><ul><li><p>@Autowired:根据属性类型进行自动装配</p><ol><li><p>把service和dao对象创建，在service和dao类添加创建对象注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户信息。。。。balabala&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在service注入dao对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面的操作相当于：&lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="meta">@Service(value=&quot;userService&quot;)</span></span><br><span class="line"><span class="comment">//注解方式可以不写value值，默认为类名首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义dao属性</span></span><br><span class="line">    <span class="comment">//不需要添加set方法，内部已经帮我们实现了</span></span><br><span class="line">    <span class="comment">//添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service.....&quot;</span>);</span><br><span class="line">        userDao.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>@Qualifier：根据属性名称进行注入(使用需要和@AUtowired一起使用)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(value=&quot;userDaoImpl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户信息。。。。balabala&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面的操作相当于：&lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="meta">@Service(value=&quot;userService&quot;)</span></span><br><span class="line"><span class="comment">//注解方式可以不写value值，默认为类名首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义dao属性</span></span><br><span class="line">    <span class="comment">//不需要添加set方法，内部已经帮我们实现了</span></span><br><span class="line">    <span class="comment">//添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//根据类型进行注入</span></span><br><span class="line">    <span class="meta">@Qualifier(value=&quot;userDaoImpl&quot;)</span><span class="comment">//根据名称进行注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service.....&quot;</span>);</span><br><span class="line">        userDao.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@Resource：可以根据类型注入，也可以根据名称注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-01 20:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的操作相当于：&lt;bean id=&quot;userService&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="meta">@Service(value=&quot;userService&quot;)</span></span><br><span class="line"><span class="comment">//注解方式可以不写value值，默认为类名首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义dao属性</span></span><br><span class="line">    <span class="comment">//不需要添加set方法，内部已经帮我们实现了</span></span><br><span class="line">    <span class="comment">//添加注入属性注解</span></span><br><span class="line"><span class="comment">//    @Autowired //根据类型进行注入</span></span><br><span class="line"><span class="comment">//    @Qualifier(value=&quot;userDaoImpl&quot;)//根据名称进行注入</span></span><br><span class="line"><span class="comment">//    @Resource  //根据类型注入</span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDaoImpl&quot;)</span><span class="comment">//根据名称进行注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service.....&quot;</span>);</span><br><span class="line">        userDao.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>@Value：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li></li></ul></li><li><p>完全注解开发</p><ul><li><p>创建配置类，替代xml配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(value=&#123;&quot;com.mjy&quot;&#125;)</span></span><br><span class="line"><span class="comment">//上面的ComponentScan等同于  &lt;context:component-scan base-package=&quot;com.mjy&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写测试类</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">    UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">    userService.service();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用Java的方式配置Spring"><a href="#使用Java的方式配置Spring" class="headerlink" title="使用Java的方式配置Spring"></a>使用Java的方式配置Spring</h3><p>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心功能</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210811220213960.png" class title="image-20210811220213960"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//说明这个类被Spring接管了，注册到了容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @Value(&quot;小敖&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;曦雨&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(UserConfig1.class)</span> <span class="comment">//引入UserConfig1配置类合成一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">//        User bean = context.getBean(User.class);</span></span><br><span class="line"><span class="comment">//        System.out.println(bean.name);</span></span><br><span class="line"></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(UserConfig.class);</span><br><span class="line">    User bean = context.getBean(User.class);</span><br><span class="line">    System.out.println(bean.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>什么是AOP<ul><li>面向切面编程（方面），利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发效率</li><li>通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</li><li>使用登录例子说明AOP</li></ul></li></ol><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实的角色：被代理的角色</li><li>代理角色：代理真实的角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人</li></ul><p>租房：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房这件事</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RentHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>房东：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseMaster</span> <span class="keyword">implements</span> <span class="title">RentHouse</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中介：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">RentHouse</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HouseMaster master;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(HouseMaster master)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.master=master;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        viewHouse();</span><br><span class="line">        recommendHouse();</span><br><span class="line">        writePact();</span><br><span class="line">        master.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介可以带你参观房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recommendHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介推荐符合要求的房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writePact</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签定合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>租客：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Agent agent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Agent agent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.agent = agent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rentHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        agent.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用关注一些公共的业务</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理对象；代码量会翻倍~开发效率会变低</li></ul><h3 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h3><ol><li><p>AOP底层使用动态代理</p><p>动态代理有两种情况</p><ol><li><p>有接口情况，使用JDK动态代理</p><p>创建接口实现类代理对象，增强类的方法</p></li><li><p>没有接口情况，使用CGLIB动态代理</p><p>创建子类的代理对象，增强类的方法</p></li></ol></li></ol><h3 id="JDK动态代理的代码实现"><a href="#JDK动态代理的代码实现" class="headerlink" title="JDK动态代理的代码实现"></a>JDK动态代理的代码实现</h3><ol><li><p>使用JDK动态代理，使用Proxy类里面的方法创建代理对象</p><p>java.lang.reflect.Proxy</p><p>调用newProxyInsatance方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure><p>方法有三个参数：</p><p>第一个参数，类加载器</p><p>第二个参数，增强方法所在的类，这个类实现的接口，支持多个接口</p><p>第三个参数，实现这个接口的InvocationHandler,创建代理对象，写增强方法</p></li><li><p>编写JDK动态代理代码</p><ol><li><p>创建接口，定义方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">discountPrice</span><span class="params">(<span class="keyword">double</span> discount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建接口实现类，实现方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;图书的信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">discountPrice</span><span class="params">(<span class="keyword">double</span> discount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">89</span>*discount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Proxy类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class[] interfaces=<span class="keyword">new</span> Class[]&#123;BookDao.class&#125;;</span><br><span class="line"></span><br><span class="line">        BookDaoImpl bookDao = <span class="keyword">new</span> BookDaoImpl();</span><br><span class="line"></span><br><span class="line">        BookDao bookDao1 = (BookDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> BookDaoProxy(bookDao));</span><br><span class="line">        bookDao1.info();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建代理对象的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建的是谁的代理对象，需要把该对象传递过来</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookDaoProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj=obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//增强的功能就是指在指定方法执行之前和之后进行的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行指定方法&quot;</span>+method.getName()+<span class="string">&quot;之前进行的操作&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行，res表示方法的返回值</span></span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;执行指定方法之后进行的操作&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="AOP术语：专业术语"><a href="#AOP术语：专业术语" class="headerlink" title="AOP术语：专业术语"></a>AOP术语：专业术语</h3><ul><li><p>连接点</p><p>类里面可以被增强的方法，称为连接点</p></li><li><p>切入点</p><p>实际被真正增强的方法，称其为切入点</p></li><li><p>通知（增强）</p><ol><li> 实际增强的逻辑部分称为通知（增强）</li><li>通知有多种类型<ul><li>前置通知：在增强方法之前执行的操作</li><li>后置通知：在增强方法之后执行的操作</li><li>环绕通知：在增强方法之前及之后执行的操作</li><li>异常通知：在增强方法出现异常时执行的操作</li><li>最终通知：与finally类似</li></ul></li></ol></li><li><p>切面</p><p>把通知应用到切入点</p></li></ul><h3 id="AOP操作准备工作"><a href="#AOP操作准备工作" class="headerlink" title="AOP操作准备工作"></a>AOP操作准备工作</h3><ul><li><p>Spring框架一般都是基于AspectJ实现AOP操作</p><p>AspectJ:AspectJ不是Spring组成部分，是一个独立AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</p></li><li><p>基于AspectJ实现AOP操作</p><ul><li>基于xml配置文件实现</li><li>基于注解方式实现（使用较方便）</li></ul></li><li><p>在项目工程里面引入相关依赖</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210402164639866.png" class title="image-20210402164639866"></li><li><p>切入点表达式</p><ul><li><p>切入点表达式的作用：知道对哪个类里面的哪个方法进行增强</p></li><li><p>语法结构：</p><p>execution(【权限修饰符】【返回值类型】【类全路径】【方法名称】（【参数列表】）)</p></li><li><p>举例</p><p>1、对com.atguigu.dao.BookDao类里面的add进行增强</p><p>​    execution(* com.atguigu.dao.BookDao.add(..)) 注：*指任意类型的权限修饰符（可以省略） . .可以代表参数列表，返回值类型也可以省略</p><p>2、对com.atguigu.dao.BookDao类里面的所有方法进行增强</p><p>​    execution(* com.atguigu.dao.BookDao.*(..))  </p><p>3、对com.atguigu.dao所有类里面的所有方法进行增强</p><p>​    execution(* com.atguigu.dao.*.*(..))                                                                    </p></li></ul></li></ul><h3 id="AOP操作（AspectJ注解）"><a href="#AOP操作（AspectJ注解）" class="headerlink" title="AOP操作（AspectJ注解）"></a>AOP操作（AspectJ注解）</h3><ol><li><p>创建类，在类里面定义方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个善良的人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建增强类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我虽然不漂亮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进行通知的配置</p><ol><li><p>在Spring配置文件中，开启注解扫描</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mjy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用注解创建User和UserProxy对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个善良的人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我虽然不漂亮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在增强类上面添加注解@Aspect</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//创建对象</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我虽然不漂亮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在spring配置文件中开启生成代理对象</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置不同类型的通知</p><ul><li>在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式</li></ul></li><li><p>公共切入点抽取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//增强类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//创建对象</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//公共切入点抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(value=&quot;execution(* com.mjy.dao.User.info(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(value=&quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我虽然不漂亮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(value=&quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置对象通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(value=&quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value=&quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value=&quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前.....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有多个增强类对同一个方法进行增强，设置增强类优先级</p><p>在增强类上面添加注解@Order(数字类型值)，数字类型值越小优先级越高</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(value=&quot;execution(* com.mjy.dao.User.info(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;personProxy before....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完全使用注解开发</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启注解扫描</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;com.mjy&quot;&gt;&lt;/context:component-scan&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages=&#123;&quot;com.mjy&quot;&#125;)</span></span><br><span class="line"><span class="comment">//&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line"><span class="comment">//&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigAop</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="AOP-基于AspectJ配置文件"><a href="#AOP-基于AspectJ配置文件" class="headerlink" title="AOP 基于AspectJ配置文件"></a>AOP 基于AspectJ配置文件</h3><ol><li><p>创建两个类，增强类和被增强类，创建方法</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件中创建两个类对象</p></li><li><p>在Spring配置文件中配置切入点</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置aop增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;po&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.mjy.aopxml.Book.info(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;po&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Spring-API"><a href="#Spring-API" class="headerlink" title="Spring API"></a>Spring API</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(o.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;方法，执行结果为：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop：需要导入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点:expression表达式，execution(要执行的位置)--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.mjy.service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义实现AOP"><a href="#自定义实现AOP" class="headerlink" title="自定义实现AOP"></a>自定义实现AOP</h3><p>切入的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行之前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--注册bean--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mjy.service.impl.UserServiceImpl&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;log&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mjy.log.Log&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;afterLog&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mjy.log.AfterLog&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &amp;lt;!&amp;ndash;配置aop：需要导入&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">&lt;!--    &lt;aop:config&gt;--&gt;</span><br><span class="line">&lt;!--        &amp;lt;!&amp;ndash;切入点:expression表达式，execution(要执行的位置)&amp;ndash;&amp;gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        &lt;aop:pointcut id=<span class="string">&quot;pointcut&quot;</span> expression=<span class="string">&quot;execution(* com.mjy.service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        &amp;lt;!&amp;ndash;执行环绕增加&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">&lt;!--        &lt;aop:advisor advice-ref=<span class="string">&quot;log&quot;</span> pointcut-ref=<span class="string">&quot;pointcut&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;aop:advisor advice-ref=<span class="string">&quot;afterLog&quot;</span> pointcut-ref=<span class="string">&quot;pointcut&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;/aop:config&gt;--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--自定义类--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;diy&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mjy.diy.PointCut&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!--自定义切面,ref要引用的对象--&gt;</span><br><span class="line">        &lt;aop:aspect ref=<span class="string">&quot;diy&quot;</span>&gt;</span><br><span class="line">            &lt;!--切入点--&gt;</span><br><span class="line">            &lt;aop:pointcut id=<span class="string">&quot;pointcut&quot;</span> expression=<span class="string">&quot;execution(* com.mjy.service.impl.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br><span class="line">            &lt;!--通知--&gt;</span><br><span class="line">            &lt;aop:before method=<span class="string">&quot;before&quot;</span> pointcut-ref=<span class="string">&quot;pointcut&quot;</span>/&gt;</span><br><span class="line">            &lt;aop:after method=<span class="string">&quot;after&quot;</span> pointcut-ref=<span class="string">&quot;pointcut&quot;</span>/&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h2><p><strong>导入依赖：</strong></p><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关</li><li>aop相关</li><li>mybatis-spring</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--aop织入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写配置文件：</strong></p><p>mybatis-config.xml:配置别名和一些设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置日志--&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;setting name=<span class="string">&quot;logImpl&quot;</span> value=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="line">        &lt;!--开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn--&gt;</span><br><span class="line">        &lt;setting name=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;!--开启全局缓存--&gt;</span><br><span class="line">        &lt;setting name=<span class="string">&quot;cacheEnabled&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line"></span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">&quot;com.mjy.entity&quot;</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>spring-dao.xml：配置跟数据源相关的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;mjy600811&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置sqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="line">        &lt;!--绑定mybatis-config.xml--&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;configLocation&quot;</span> value=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;mapperLocations&quot;</span> value=<span class="string">&quot;classpath*:com/mjy/mapper/xml/*Mapper.xml&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置sqlSession--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;sqlSession&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br><span class="line">        &lt;!--只能用有参构造注入，没有set方法--&gt;</span><br><span class="line">        &lt;constructor-arg name=<span class="string">&quot;sqlSessionFactory&quot;</span> ref=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>applicationContext.xml：各配置文件的汇总</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">import</span> resource=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置UserMapper--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userMapper&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mjy.mapper.UserMapperImpl&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sqlSessionTemplate&quot;</span> ref=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userMapper1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.mjy.mapper.UserMapperImpl1&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;sqlSessionFactory&quot;</span> ref=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.mjy.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;getUserList&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">        select * from user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSessionTemplate.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper1&quot;</span>, UserMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jdbcTemplate"><a href="#jdbcTemplate" class="headerlink" title="jdbcTemplate"></a>jdbcTemplate</h2><h3 id="1、概念和准备工作"><a href="#1、概念和准备工作" class="headerlink" title="1、概念和准备工作"></a>1、概念和准备工作</h3><ol><li><p>什么是jdbcTemplate</p><p>Spring框架对JDBC进行封装，使用jdbcTemplate方便实现对数据库操作</p></li><li><p>准备工作</p><ol><li><p>导入相关的jar包</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210403115606606.png" class title="image-20210403115606606"></li><li></li><li><p>配置jdbcTemplate对象，注入DataSource</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入dataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建service类，创建dao类，在dao注入jdbcTemplate都对象</p><p>配置文件开启注解扫描</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mjy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在service里面注入BookDao</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dao中注入JdbcTemplate</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="2、JdbcTemplate操作数据库"><a href="#2、JdbcTemplate操作数据库" class="headerlink" title="2、JdbcTemplate操作数据库"></a>2、JdbcTemplate操作数据库</h3><p><strong>插入：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">    String sql=<span class="string">&quot;insert into book values(?,?,?)&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql,book.getId(),book.getName(),book.getPrice());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">    String sql=<span class="string">&quot;update book set name=?,price=? where id=?&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql,book.getName(),book.getPrice(),book.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBook</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    String sql=<span class="string">&quot;delete from book where id=?&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql,id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询返回某个值</strong></p><p>使用方法：</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210403150712109.png" class title="image-20210403150712109"><p>第一个参数是sql语句，第二个参数是返回值类型的class</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">selectCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql=<span class="string">&quot;select count(*) from book&quot;</span>;</span><br><span class="line">    Integer count = jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询返回对象</strong></p><p>使用方法</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210403151949757.png" class title="image-20210403151949757"><p>第一个参数sql语句，第二个参数：RowMapper是接口，返回不同类型数据，使用这个接口里面的实现类完成数据的封装，sql语句的参数值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">queryBook</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String sql=<span class="string">&quot;select * from book where id=?&quot;</span>;</span><br><span class="line">    Book book = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Book&gt;(Book.class), id);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询返回集合</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String sql=<span class="string">&quot;select * from book&quot;</span>;</span><br><span class="line">    List&lt;Book&gt;  bookList= jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Book.class));</span><br><span class="line">    <span class="keyword">return</span> bookList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jdbcTemplate操作数据库（批量操作）"><a href="#jdbcTemplate操作数据库（批量操作）" class="headerlink" title="jdbcTemplate操作数据库（批量操作）"></a>jdbcTemplate操作数据库（批量操作）</h3><p><strong>批量添加</strong></p><p>使用方法：</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210404135636831.png" class title="image-20210404135636831"><p>第一个参数预编译的sql语句，第二个参数，需要添加的信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchAdd</span><span class="params">(List&lt;Object[]&gt; list)</span> </span>&#123;</span><br><span class="line">    String sql=<span class="string">&quot;insert into book values(?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回影响的行数的数组</span></span><br><span class="line">    <span class="keyword">int</span>[] ints = jdbcTemplate.batchUpdate(sql, list);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>批量修改和批量删除同上</strong></p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="搭建事务操作的环境"><a href="#搭建事务操作的环境" class="headerlink" title="搭建事务操作的环境"></a>搭建事务操作的环境</h3><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210404142623903.png" class title="image-20210404142623903"><h3 id="Spring事务管理的介绍"><a href="#Spring事务管理的介绍" class="headerlink" title="Spring事务管理的介绍"></a>Spring事务管理的介绍</h3><ul><li><p>事务添加到JavaEE三层结构里面的Service层</p></li><li><p>在Spring中有两种方式进行事务管理</p><ol><li>编程式事务管理</li><li>声明式事务管理（常用）</li></ol></li><li><p>声明式事务管理</p><ol><li>基于注解方式（常用）</li><li>基于xml配置文件方式</li></ol></li><li><p>在Spring进行声明式事务管理，底层使用AOP原理</p></li><li><p>Spring事务管理API</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210404151742780.png" class title="image-20210404151742780"></li></ul><h3 id="注解声明式事务管理"><a href="#注解声明式事务管理" class="headerlink" title="注解声明式事务管理"></a>注解声明式事务管理</h3><ul><li><p>在Spring配置文件中配置事务管理器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件，开启事务注解</p><ol><li><p>在Spring配置文件中引入名称空间tx</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210404152937626.png" class title="image-20210404152937626"></li><li><p>开启事务注解</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在service类上面（或者service类里面方法上面）添加事务注解</p><ol><li>@Transactional这个注解可以添加到类上面，也可以添加在方法上面</li><li>如果加在类上面，这个类里面所有的方法都添加事务</li><li>如果把这个注解添加在方法上，则为该方法添加事务</li></ol></li></ol></li></ul><h4 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h4><ul><li><p>在service类上面添加注解@Transactional,在这个注解里面可以配置事务相关参数</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210404154752482.png" class title="image-20210404154752482"><ol><li><p>propagation：事务传播行为</p><p>多事务方法直接进行调用，这个过程中事务是如何进行管理的称为事务传播行为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210404155846576.png" class></li><li><p>isolation：事务隔离级别</p><p>事务有特性：隔离性，多事务之间不会产生影响。不考虑隔离性会产生很多问题</p><p>脏读：一个未提交事务读取到另一个未提交事务的数据</p><p>不可重复读：一个未提交事务读取到另一提交事务修改数据</p><p>幻读：一个为提交事务读取到另一个提交事务添加数据</p><p>通过设置事务隔离级别就能够解决读的问题</p><p><img src="/Sparing%E5%AD%A6%E4%B9%A0/image-20210404162129335.png" alt="image-20210404162129335"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED,isolation= Isolation.REPEATABLE_READ)</span></span><br></pre></td></tr></table></figure></li><li><p>timeout：超时时间</p><p>事务需要在一定时间内进行提交，如果不提交就进行回滚</p><p>默认值-1，设置时间以秒为单位进行计算</p></li><li><p>readOnly：是否只读</p><p>读：查询操作，写：添加修改删除</p><p>readOnly 默认值false，表示可以查询，可以添加修改删除操作</p></li><li><p>rollbackFor：回滚</p><p>设置出现哪些异常进行事务回滚</p></li><li><p>noRollbackFor：不回滚</p><p>设置出现哪些异常不进行事务回滚</p></li></ol></li></ul><h3 id="基于xml声明式事务管理"><a href="#基于xml声明式事务管理" class="headerlink" title="基于xml声明式事务管理"></a>基于xml声明式事务管理</h3><ul><li><p>在Spring配置文件中进行配置</p><ol><li><p>配置事务管理器</p></li><li><p>配置通知</p></li><li><p>配置切入点</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.mjy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入外部文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入dataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以account开头的都添加上事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;&gt;&lt;/tx:method&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.mjy.service.AccountService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h3><p>创建配置类，使用配置类代替xml配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages =&#123;&quot;com.mjy&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        druidDataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span>);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">&quot;mjy600811&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring5框架新功能"><a href="#Spring5框架新功能" class="headerlink" title="Spring5框架新功能"></a>Spring5框架新功能</h2><ul><li><p>整个Spring5框架的代码基于Java8,运行时兼容JDk9,许多不建议使用的类和方法在代码库中删除</p></li><li><p>Spring5.0框架自带了通用的日志封装</p><ol><li><p>Spring5已经移除Log4jConfigListener,官方建议使用Log4j2</p></li><li><p>Spring5框架整合Log4j2</p></li><li><p>使用Log4j2</p><p>引入jar包</p><img src="/2021/08/10/Spring%E5%AD%A6%E4%B9%A0/image-20210404181526001.png" class title="image-20210404181526001"><p>创建Log4j2.xml配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">console</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>手动输出log信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-04-04 18:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(LogTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;错误警告&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Spring5框架核心容器技术支持@Nullable注解</p><p>@Nullable注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</p><p>注解用在方法上面，方法返回值可以为空</p></li><li><p>Spring5核心容器支持函数式风格GenericApplicationContext</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数式风格创建对象，交给spring管理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenericApplicationContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建GenericApplicationContext对象</span></span><br><span class="line">    GenericApplicationContext context=<span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line">    <span class="comment">//调用context的方法对象注册</span></span><br><span class="line">    context.refresh();</span><br><span class="line">    context.registerBean(Book.class,()-&gt;<span class="keyword">new</span> Book());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取在Spring中注册的对象</span></span><br><span class="line">    Book bean = (Book)context.getBean(<span class="string">&quot;com.mjy.pojo.Book&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Spring5支持整合JUnit5</p><ol><li><p>整合JUnit4</p><ul><li><p>引入Spring相关针对测试依赖</p><p><img src="/Sparing%E5%AD%A6%E4%B9%A0/image-20210404210617989.png" alt="image-20210404210617989"></p></li><li><p>创建测试类（使用完全注解会报错）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//单元测试框架</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JU4Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bookService.queryBook(<span class="string">&quot;101&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Spring5整合JUnit5</p><ul><li><p>引入JUnit5的jar包</p></li><li><p>创建测试类，使用注解完成</p><p><img src="/Sparing%E5%AD%A6%E4%B9%A0/image-20210404212702520.png" alt="image-20210404212702520"></p></li></ul></li><li><p>可以使用一个复合注解替代上面两个注解完成整合</p><p><img src="/Sparing%E5%AD%A6%E4%B9%A0/image-20210404213008466.png" alt="image-20210404213008466"></p></li><li></li></ol></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOC,AOP,轻量级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2021/08/07/MyBatis/"/>
      <url>/2021/08/07/MyBatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis学习笔记"><a href="#Mybatis学习笔记" class="headerlink" title="Mybatis学习笔记"></a>Mybatis学习笔记</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><ul><li>MyBatis是一款优秀的<strong>持久层框架</strong></li><li>它支持定制化SQL、存储过程以及高级映射</li><li>MyBatis避免了几乎所有JDBC代码和手动设置参数以及获取结果集</li><li>MyBatis可用使用简单的xml或注解来配置和映射原生类型、接口和java的pojo(plain Old java Objects 普通老式java对象) 为数据库中的记录</li><li>Mybatis 本是apache的一个开源项目iBatis,2010年这个项目由apache software foundation迁移到了google code 并改名为Mybatis</li><li>2013年11月迁移到Github</li></ul><p>如何获得Mybatis?</p><ul><li><p>maven仓库</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;x.x.x&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p></li></ul><h3 id="1-2、持久层"><a href="#1-2、持久层" class="headerlink" title="1.2、持久层"></a>1.2、持久层</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：断电即失</li><li>数据库(jdbc),io文件持久化</li></ul><p>需要持久化的原因：</p><ul><li>有一些对象，需要持久化存储，不能丢失</li><li>内存太贵</li></ul><h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>DAO层，Service层，Controller层…..</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h3 id="1-4、为什么需要Mybatis（半自动化）"><a href="#1-4、为什么需要Mybatis（半自动化）" class="headerlink" title="1.4、为什么需要Mybatis（半自动化）"></a>1.4、为什么需要Mybatis（半自动化）</h3><ul><li><p>帮助程序员将数据存入到数据库中</p></li><li><p>方便</p></li><li><p>传统的JDBC代码太复杂了，简化操作</p></li><li><p>不用Mybatis也可以。更容易上手</p></li><li><p>优点：</p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul></li></ul><h1 id="2、第一个MyBatis程序"><a href="#2、第一个MyBatis程序" class="headerlink" title="2、第一个MyBatis程序"></a>2、第一个MyBatis程序</h1><p>思路：搭建环境—-&gt;导入Mybatis—&gt;编写代码测试</p><h3 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h3><p>搭建数据库（建库建表）</p><p>新建项目</p><ol><li><p>创建普通的maven项目</p></li><li><p>删除src目录</p></li><li><p>导入maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--父工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2创建一个模块"><a href="#2-2创建一个模块" class="headerlink" title="2.2创建一个模块"></a>2.2创建一个模块</h3><ol><li><p>编写mybatis的核心配置文件</p><p>Mysql的url中的时区设置为<strong>Asia/Shanghai</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启全局缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mybatis工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory---&gt;sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取sqlSessionFactory对象</span></span><br><span class="line">            String resource=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream resourceAsStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory= <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取了SqlSessionFactory,我们就可以从中获取sqlSession的实例了</span></span><br><span class="line">    <span class="comment">//sqlSession完全包含了面向数据库执行sql命令所需的所有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>DAO接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口实现类由原来的UserDaolmp转变为一个Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace绑定一个对应的DAO或Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mjy.dao.UserDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p><strong>注意点：每一个Mapper.xml都需要在Mybatis核心配置文件中注册</strong></p><p>解决maven找不到配置文件的问题：(重点)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resource,来防止我们资源导出失败的问题(配置文件找不到)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h3><p>namespace中的包名要和DAO/Mapper接口包名一致</p><h3 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h3><p>选择，查询语句：</p><ul><li>id:就是对应的namespace中的方法名；</li><li>resultType:sql语句的返回值</li><li>paramerterType:参数类型</li></ul><p>1、编写接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户id查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p>2、编写Mapper对应的sql语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、测试</p><h3 id="3、insert"><a href="#3、insert" class="headerlink" title="3、insert"></a>3、insert</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user(id,name,password) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、update"><a href="#4、update" class="headerlink" title="4、update"></a>4、update</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、delete"><a href="#5、delete" class="headerlink" title="5、delete"></a>5、delete</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>增删改操作需要提交事务</li></ul><h3 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h3><ul><li>标签不要匹配错</li><li>resource绑定mapper，需要使用路径”/“</li><li>程序配置文件必须符合规范</li><li>NullPointerException</li><li>输出的xml文件中存在中文乱码问题</li><li>mybatis-config.xml绑定接口时用“ .”</li><li></li></ul><h3 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h3><p>假设，我们的实体类，或者数据库的 表，字段或者参数过多，我们应该考虑使用Map!</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 万能map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateUser1</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser1&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span>&gt;</span></span><br><span class="line">        update user set name=#&#123;username&#125; where id=#&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession=MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">       UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;userId&quot;</span>,<span class="number">2</span>);</span><br><span class="line">       map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;小蚕&quot;</span>);</span><br><span class="line">       <span class="keyword">int</span> flag = mapper.updateUser1(map);</span><br><span class="line"></span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       sqlSession.close();</span><br><span class="line">       <span class="keyword">if</span>(flag&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Map传递参数，直接在sql中取出key即可！【parameterType=”map”】</p><p> 对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到</p><p>多个参数用Map或者<strong>注解</strong></p><p>模糊查询写法：</p><ol><li><p>java代码执行的时候，传递通配符%%</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserLike</span><span class="params">()</span></span>&#123;</span><br><span class="line">      SqlSession sqlSession=MybatisUtils.getSqlSession();</span><br><span class="line">   </span><br><span class="line">      UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">   </span><br><span class="line">      List&lt;User&gt; userLike = mapper.getUserLike(<span class="string">&quot;%聂%&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (User user : userLike) &#123;</span><br><span class="line">          System.out.println(user);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      sqlSession.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在sql拼接中使用通配符</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h3><ul><li><p>mybatis-config.xml</p></li><li><p>MyBatis的配置文件包含了会深深影响MyBatis行为的设置和属性信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、环境配置-environment"><a href="#2、环境配置-environment" class="headerlink" title="2、环境配置(environment)"></a>2、环境配置(environment)</h3><p>mybatis可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用配置多套运行环境！</p><p>mybatis默认的事务管理器就是JDBC ,连接池：POOLED</p><h3 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性都是可外部配置且可动态转换的，既可以在典型的java属性文件中配置，亦可通过prroperties元素的子元素来传递。【db.properties】</p><p>编写一个配置文件</p><p>db.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">mjy600811</span></span><br></pre></td></tr></table></figure><p>在核心配置文件中引入 注意：在xml文件中，所有的配置文件需要按照一定的顺序进行编写</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12947123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件</li></ul><h3 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h3><ul><li><p>类型别名是为java类型设置一个短的名字</p></li><li><p>存在的意义仅在于用来减少类完全限定名的冗余</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以给实体类起别名别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>也可以指定一个包名，MyBatis会在包名下面搜索需要的java Bean,比如：</p><p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描实体类的包,它的默认别名就为这个类的类名,首字母小写(推荐),大写也能行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mjy.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实体类比较少的时候，使用第一种方式。如果实体类十分多，建议使用第二种。第一种可以DIY别名，第二种则不行，如果非要改，需要在实体上增加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>执行的先后顺序：typeAliases定义别名&gt;注解&gt;typeAliases扫描包默认别名</p><h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><p>这是MyBatis中极为重要的调整设置，它们会改变Mybatis的运行时行为</p><img src="/2021/08/07/MyBatis/image-20210323172824888.png" class title="image-20210323172824888"><img src="/2021/08/07/MyBatis/image-20210323172857725.png" class title="image-20210323172857725"><h3 id="6、其他配置"><a href="#6、其他配置" class="headerlink" title="6、其他配置"></a>6、其他配置</h3><ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li>plugins（插件<ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><h3 id="7、映射器（mappers）"><a href="#7、映射器（mappers）" class="headerlink" title="7、映射器（mappers）"></a>7、映射器（mappers）</h3><p>MapperRegistry:注册绑定我们的Mapper文件</p><p>方式1【推荐使用】：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/mjy/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;com/mjy/dao/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.dao.UserMapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>方式二使用要求：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须在同一个包下</li></ul><p>方式三：使用扫描包进行注入绑定</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;com/mjy/dao/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper class=&quot;com.mjy.dao.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.mjy.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式三使用要求：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须在同一个包下</li></ul><h3 id="8、生命周期和作用域"><a href="#8、生命周期和作用域" class="headerlink" title="8、生命周期和作用域"></a>8、生命周期和作用域</h3><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong></p><p><strong>SqlSessionFactoryBuilder</strong>:</p><ul><li>一旦创建了SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory</strong>:</p><ul><li>可以类比成数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong></li><li>SqlSessionFactory的最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或者静态单例模式</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求</li><li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li><li>用完之后需要关闭，否则资源会被占用</li></ul><h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><p>当数据库中的表字段名与定义的类中的字段名不一致时</p><p>测试出现问题：字段不一致的属性为空</p><img src="/2021/08/07/MyBatis/image-20210323222143007.png" class title="image-20210323222143007"><p>解决方法一：起别名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">       select id,name,password pwd from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决方法二：</p><h3 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h3><p>结果集映射</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">id name password</span><br><span class="line">id name pwd</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mjy.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mjy.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where name like #&#123;str&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li><li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们</li></ul><h2 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错，日志系统就是最好的帮手</p><p>以前：sout 、debug</p><p>现在：日志工厂</p><ul><li>SLF4J</li><li>LOG4J 【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING </li><li>STDOUT_LOGGING【掌握】 </li><li>NO_LOGGING</li></ul><p>在Mybatis中具体使用哪个日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><p>在mybatis核心配置文件中，配置我们的日志</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j</p><ul><li>Log4j是Apache的一个开源项目，通过使用Log4j,我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</li><li>我们可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志生成过程</li><li>通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</li><li></li></ul><ol><li><p>先导入log4j的包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--日志信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关文件</span></span><br><span class="line"><span class="meta">log4j.appender.file</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/mjy.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置log4j为日志的实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>简单使用</strong></p><ol><li><p>在要使用Log4j的类中，导入包import org.apache.log4j.Logger</p></li><li><p>日志对象，参数为当前类的class</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了loggerTest&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了loggerTest&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了loggerTest&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页?</strong></p><ul><li>减少数据的处理量</li></ul><h3 id="7-1-使用Limit分页"><a href="#7-1-使用Limit分页" class="headerlink" title="7.1 使用Limit分页"></a><strong>7.1 使用Limit分页</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit startIndex,pageSize;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3</span>;#[<span class="number">0</span>,n]</span><br></pre></td></tr></table></figure><p>使用Mybatis实现分页，核心SQL</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession=MybatisUtils.getSqlSession();</span><br><span class="line">   </span><br><span class="line">       UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       Map&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">       map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line">       List&lt;User&gt; userByLimit = mapper.getUserByLimit(map);</span><br><span class="line">       <span class="keyword">for</span> (User user : userByLimit) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h3><p>不再使用SQL实现分页</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession=MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//RowBounds分页</span></span><br><span class="line">        RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过java代码层面实现分页</span></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">&quot;com.mjy.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-3分页插件"><a href="#7-3分页插件" class="headerlink" title="7.3分页插件"></a>7.3分页插件</h3><img src="/2021/08/07/MyBatis/image-20210324232643471.png" class title="image-20210324232643471"><p>网址：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1使用注解开发"><a href="#8-1使用注解开发" class="headerlink" title="8.1使用注解开发"></a>8.1使用注解开发</h3><ol><li><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>需要再核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><p>本质：反射机制实现</p><p>底层：动态代理</p><h3 id="8-2-CRUD"><a href="#8-2-CRUD" class="headerlink" title="8.2 CRUD"></a>8.2 CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置事务的自动提交</span></span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写接口</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from user&quot;)</span><br><span class="line">    List<span class="tag">&lt;<span class="name">User</span>&gt;</span> getUserList();</span><br><span class="line"></span><br><span class="line">    //当有多个参数时需要加上@Param(&quot;&quot;)注解（对象、Map等不需要加）,sql语句中获取属性值的名称以@Param(&quot;&quot;)注解中的为准</span><br><span class="line">    @Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br><span class="line">    User getUserById(@Param(&quot;id&quot;)int id);</span><br><span class="line"></span><br><span class="line">    @Insert(&quot;insert into user(id,name,password) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br><span class="line">    int addUser(User user);</span><br><span class="line"></span><br><span class="line">    @Update(&quot;update user set name=#&#123;name&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="line">    int updateUser(User user);</span><br><span class="line"></span><br><span class="line">    @Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><br><span class="line">    int deleteUserById(@Param(&quot;id&quot;)int id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：我们必须要将接口注册绑定到我们的核心配置文件中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.mjy.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当存在多个配置文件需要绑定时--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/mjy/dao/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>关于@Param()注解</strong></p><ul><li>基本类型的参数或String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议加上</li><li>我们在SQL中引用的就是我们这里的@Param(“id”)中的属性名</li></ul><p><strong>#{} ${}的区别</strong></p><p>#{}—&gt;sql预编译，能够解决sql注入问题</p><p>${}—-&gt;存在sql注入问题，不安全</p><h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a><strong>9、Lombok</strong></h2><p>使用步骤:</p><ol><li><p>在IDEA中安装Lombok插件</p></li><li><p>在IDEA中导入Lombok包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在实体类上加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Features</span><br><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@val</span></span><br><span class="line"><span class="meta">@var</span></span><br><span class="line">experimental <span class="meta">@var</span></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br></pre></td></tr></table></figure><p>@Data:无参构造、get、set、toString、hashcode、equals </p><img src="/2021/08/07/MyBatis/image-20210325160253193.png" class title="image-20210325160253193"></li></ol><p>@AllArgsConstructor:有参构造</p><p>@NoArgsConstructor：无参构造</p><img src="/2021/08/07/MyBatis/image-20210325160625609.png" class title="image-20210325160625609"><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p><strong>测试环境搭建</strong></p><ol><li>导入lombok</li><li>新建实体类Teacher,Student</li><li>建立Mapper接口</li><li>建立Mapper.xml文件</li><li>在核心配置文件中绑定注册我们的Mapper接口或者文件</li><li>测试是否能够成功</li></ol><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><p>注意：应用到的类一定要有空参构造器（第二遍学习中，由于使用Lombok的AllArgsConstructor导致无空参构造器，导致排错1小时。。。）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mjy.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1、查询所有的学生的信息</span></span><br><span class="line"><span class="comment">        2、根据查询出来的学生的tid，寻找对应的老师</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象：association 集合：collection--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按照结果嵌套查询</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentMapper1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--按照结果嵌套循环--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentMapper1&quot;</span>&gt;</span></span><br><span class="line">       select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">       from student s</span><br><span class="line">                join teacher t</span><br><span class="line">                     on t.id=s.tid;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一对多</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeachers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMapper&quot;</span>&gt;</span></span><br><span class="line">       select * from teacher</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       select id,name from student where tid=#&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--复杂的属性我们需要单独处理 对象：association 集合：collection</span></span><br><span class="line"><span class="comment">   javaType=&quot;&quot;指定属性的类型</span></span><br><span class="line"><span class="comment">   集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudents&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>关联：association【多对一】</li><li>集合：collection 【一对多】</li><li>javaType&amp;ofType<ul><li>JavaType用来指定实体类中属性的类型</li><li>ofType用来指定映射到List或者集合中的实体类类型，泛型中的约束类型</li></ul></li></ul><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        and title=#&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title=#&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            and author=#&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title=#&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            author=#&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="choose-when-otherwise-只能选择一个"><a href="#choose-when-otherwise-只能选择一个" class="headerlink" title="choose(when,otherwise):只能选择一个"></a>choose(when,otherwise):只能选择一个</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                author=#&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                views=#&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em><strong>所谓的动态SQL,本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码</strong></em></p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">使用SQL标签抽取公共部分</span><br><span class="line"><span class="comment">&lt;!--SQL片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        title=#&#123;title&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">在需要使用的地方使用include标签引用</span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>最好基于单表来定义SQL片段</li><li>不要存在where标签</li></ul><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">2</span>);</span><br><span class="line">    map.put(<span class="string">&quot;ids&quot;</span>,list);</span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line">    blogs.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</p><p>建议：</p><ul><li>先在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可</li></ul><h2 id="13、缓存"><a href="#13、缓存" class="headerlink" title="13、缓存"></a>13、缓存</h2><h3 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h3><ol><li>什么是缓存【Cache】<ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题</li></ul></li><li>为什么使用缓存<ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率</li></ul></li><li>什么样的数据能使用缓存<ul><li>经常查询且不经常改变的数据</li></ul></li></ol><h3 id="13-2、-Mybatis缓存"><a href="#13-2、-Mybatis缓存" class="headerlink" title="13.2、 Mybatis缓存"></a>13.2、 Mybatis缓存</h3><ul><li>Mybatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率</li><li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul><li>默认情况下，只有一级缓存开启。(SqlSession级别的缓存，也称为本地缓存)</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h3><ul><li>一级缓存也叫本地缓存<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li></ul></li></ul><p>测试步骤：</p><ol><li><p>开启日志 </p></li><li><p>测试在一个Session中查询两次记录</p><img src="/2021/08/07/MyBatis/image-20210327210450379.png" class title="image-20210327210450379"></li><li><p>查看日志输出</p></li></ol><p>缓存失效的情况：</p><ol><li><p>查询不同的东西</p></li><li><p>增删改操作可能会改变原来的数据，所以必定会刷新缓存</p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    User userById = mapper.getUserById(<span class="number">4</span>);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        mapper.updateUser(new User(2,&quot;小婵&quot;,&quot;732418&quot;));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动清理缓存</span></span><br><span class="line">    sqlSession.clearCache();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">    User userById1 = mapper.getUserById(<span class="number">4</span>);</span><br><span class="line">    System.out.println(userById1);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/08/07/MyBatis/image-20210327212133644.png" class title="image-20210327212133644"></li></ol><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段</p><p>一级缓存就是一个Map</p><h3 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据都会放在自己对应的缓存（map）中</li></ul></li></ul><p>步骤</p><ol><li><p>开启全局缓存</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mjy.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用二级缓存--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><ol><li><p>问题：当未自定义参数时，需要将实体类序列化！否则就会报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cause: java.io.NotSerializableException: com.mjy.pojo.User</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中</li><li>只有当会话提交，或者关闭才会提交到二级缓存中</li></ul><h3 id="13-6、自定义缓存-ehcache"><a href="#13-6、自定义缓存-ehcache" class="headerlink" title="13.6、自定义缓存-ehcache"></a>13.6、自定义缓存-ehcache</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存‘</p><p>要在程序中使用ehcache，先要导包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mapper中指定使用的我们的 ehcache缓存实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>ehcahce.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;java.io.tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;259200&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;cloud_user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h5 id="网络编程的目的："><a href="#网络编程的目的：" class="headerlink" title="网络编程的目的："></a>网络编程的目的：</h5><p>传播交流信息，数据交换，通信</p><p>Javaweb：网页编程 B/S</p><p>网络编程：TCP/IP  C/S</p><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20210805234534048.png" class title="image-20210805234534048"><p><strong>两个要点：</strong></p><ol><li>网络编程的两个主要问题<ul><li>如何准确的定位到网络上的一台或多台主机</li><li>找到主机之后如何进行通信</li></ul></li><li>网络编程中的要素<ul><li>IP和端口号</li><li>网络通信协议</li></ul></li></ol><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>ip地址：InetAddress</p><ul><li><p>唯一定位一台网络上计算机</p></li><li><p>127.0.0.1：本机：localhost</p></li><li><p>ip地址的分类</p><ul><li>IPV4/IPV6<ul><li>IPV4 ：127.0.0.1，四个字节组成，42亿；30亿都在北美，亚洲4亿。2011年用尽</li><li>IPV6：128位。8个无符号整数</li></ul></li><li>公网、私网<ul><li>ABCD类地址</li><li>192.168.xxx.xxx，专门给组织内部使用的</li></ul></li></ul></li></ul><h4 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查询本机地址</span></span><br><span class="line">            InetAddress inet=InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            System.out.println(inet);</span><br><span class="line">            InetAddress localhost = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            System.out.println(localhost);</span><br><span class="line">            InetAddress localHost = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(localHost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查询网站ip地址</span></span><br><span class="line">            InetAddress baidu = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">            System.out.println(baidu);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//常用方法</span></span><br><span class="line">            System.out.println(baidu.getCanonicalHostName()); <span class="comment">//规范的名字</span></span><br><span class="line">            System.out.println(baidu.getHostAddress()); <span class="comment">//ip</span></span><br><span class="line">            System.out.println(baidu.getHostName()); <span class="comment">//域名，或者自己电脑的名字</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口表示计算机上的一个程序的进程</p><ul><li><p>不同的进程有不同的端口号</p></li><li><p>端口范围：0~65535</p></li><li><p>TCP,UDP：65535*2  单个协议下，端口号不能冲突</p></li><li><p>端口分类</p><ul><li>共有端口（尽量不要去占用）<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li><li>Telent：23</li></ul></li><li>程序注册端口：1024~49151,分配用户或者程序<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Oracle：1521</li></ul></li><li>动态、私有：49152~65535</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="comment">#查看所有的端口</span></span><br><span class="line">netstat -ano | findstr <span class="string">&quot;端口号&quot;</span> <span class="comment">#查找指定端口</span></span><br><span class="line">tasklist | find <span class="string">&quot;端口号&quot;</span> <span class="comment">#查看该端口的进程</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p><strong>TCP/IP协议簇：实际上是一组协议</strong></p><p>重要的协议：</p><ul><li>TCP：用户传输协议</li><li>UDP：用户数据报协议</li><li>IP：网络互连协议</li></ul><p><strong>TCP与UDP的对比</strong></p><p>TCP：</p><ul><li>较安全，稳定</li><li>建立连接，需要三次握手、四次挥手</li><li>有客户端和服务端</li><li>传输完成，释放连接，效率低</li></ul><p>UDP：</p><ul><li>不需要建立连接，不安全，不稳定</li><li>客户端和服务端没有明确的界限</li><li>只需要发送，而不需要考虑是否接收到</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>三次握手、四次挥手</p><p>三次握手：</p><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/61d3cf1ecdec434aa1fa677f7037f703.png" class title="在这里插入图片描述"><p>四次挥手</p><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1cc32b58d2794cfda544776c957390c2.png" class title="在这里插入图片描述"><p><strong>三次握手：</strong></p><p>TCP建立连接的过程我们称之为三次握手</p><ul><li><p>第一次握手</p><p>PC1使用一个随机的端口号向PC2的80端口发送连接请求，此过程的典型标志为SYN控制位为1，其它五位为0</p></li><li><p>第二次握手</p><p>PC2收到PC1的请求，向PC1回复确认信息</p><p>并且，PC2也向PC1发送建立连接请求</p></li><li><p>第三次握手</p><p>PC1收到PC2回复，也要向PC2恢复一个确认信息</p></li></ul><p><strong>四次挥手：</strong></p><p>TCP断开连接的过程分为4步，称为四次挥手</p><p>（1）服务器向客户端发送FIN，ACK为1的TCP报文段</p><p>（2）客户端向服务端返回ACK为1的TCP报文段</p><p>（3）客户端向服务器发送FIN,ACK为1的TCP报文段</p><p>（4）服务器向客户端返回ACK为1的TCP报文段</p><p>在TCP断开连接的过程中，有一个半关闭的概念。TCP一段可以中止发送数据，但是仍可以接收数据，称之为半关闭</p><p>（1）客户端发送FIN，半关闭了这个连接。服务器发送ACK接受半关闭</p><p>（2）服务器继续发送数据，而客户端只发送ACK确认，不发送任何数据</p><p>（3）当服务器所有数据传输完毕，就发送FIN报文段，客户再发送ACK报文段，就关闭了TCP连接</p><h3 id="面试题延伸："><a href="#面试题延伸：" class="headerlink" title="面试题延伸："></a>面试题延伸：</h3><h4 id="1、三次握手和四次挥手的本质是什么？"><a href="#1、三次握手和四次挥手的本质是什么？" class="headerlink" title="1、三次握手和四次挥手的本质是什么？"></a>1、三次握手和四次挥手的本质是什么？</h4><p>三次握手的本质是确认通信双方收发数据的能力 。<br>四次挥手的目的是关闭一个连接 。</p><h4 id="2、为什么TCP连接的时候是3次？2次不可以吗？"><a href="#2、为什么TCP连接的时候是3次？2次不可以吗？" class="headerlink" title="2、为什么TCP连接的时候是3次？2次不可以吗？"></a>2、为什么TCP连接的时候是3次？2次不可以吗？</h4><p>因为需要考虑连接时丢包的问题，如果只握手2次，第二次握手时如果服务端发给客户端的确认报文段丢失，此时服务端已经准备好了收发数(可以理解服务端已经连接成功)据，而客户端一直没收到服务端的确认报文，所以客户端就不知道服务端是否已经准备好了(可以理解为客户端未连接成功)，这种情况下客户端不会给服务端发数据，也会忽略服务端发过来的数据。<br>如果是三次握手，即便发生丢包也不会有问题，比如如果第三次握手客户端发的确认ack报文丢失，服务端在一段时间内没有收到确认ack报文的话就会重新进行第二次握手，也就是服务端会重发SYN报文段，客户端收到重发的报文段后会再次给服务端发送确认ack报文。</p><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/a824c1a1d2a34897b11f6dee57b07c81.png" class title="在这里插入图片描述"><img src="/2021/08/05/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/8d333be52c2347c89be5960f8cd69c7e.png" class title="在这里插入图片描述"><h4 id="3、为什么TCP连接的时候是3次，关闭的时候却是4次？"><a href="#3、为什么TCP连接的时候是3次，关闭的时候却是4次？" class="headerlink" title="3、为什么TCP连接的时候是3次，关闭的时候却是4次？"></a>3、为什么TCP连接的时候是3次，关闭的时候却是4次？</h4><p>因为只有在客户端和服务端都没有数据要发送的时候才能断开TCP。而客户端发出FIN报文时只能保证客户端没有数据发了，服务端还有没有数据发客户端是不知道的。而服务端收到客户端的FIN报文后只能先回复客户端一个确认报文来告诉客户端我服务端已经收到你的FIN报文了，但我服务端还有一些数据没发完，等这些数据发完了服务端才能给客户端发FIN报文(所以不能一次性将确认报文和FIN报文发给客户端，就是这里多出来了一次)。</p><h4 id="4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？"><a href="#4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？" class="headerlink" title="4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？"></a>4、三、为什么客户端发出第四次挥手的确认报文后要等2MSL的时间才能释放TCP连接？即为什么客户端在TIME-WAIT阶段要等2MSL？</h4><p>MSL 指的是 Maximum Segment Lifetime：一段 TCP 报文在传输过程中的最大生命周期。<br>2MSL 即是服务器端发出为 FIN 报文和客户端发出的 ACK 确认报文所能保持有效的最大时长。<br>这里同样是要考虑丢包的问题，如果第四次挥手的报文丢失，服务端没收到确认ack报文就会重发第三次挥手的报文，这样报文一去一回最长时间就是2MSL，所以需要等这么长时间来确认服务端确实已经收到了。</p><h4 id="5、如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#5、如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="5、如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>5、如果已经建立了连接，但是客户端突然出现故障了怎么办？</h4><p>TCP设有一个保活计时器，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><p>TCP实现聊天：</p><p>client:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 15:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//知道服务器的地址，端口号</span></span><br><span class="line">            InetAddress serverIp = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//创建一个socket连接</span></span><br><span class="line">             socket= <span class="keyword">new</span> Socket(serverIp, port);</span><br><span class="line">            <span class="comment">//发送消息 IO流</span></span><br><span class="line">             os= socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            os.write(<span class="string">&quot;你好，欢迎学习Java网络编程&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket server=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//有一个地址</span></span><br><span class="line">            server= <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等待客户端连接</span></span><br><span class="line">            socket= server.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取客户端的消息</span></span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">            baos= <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取内容</span></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(baos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(server!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    server.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCP上传文件"><a href="#TCP上传文件" class="headerlink" title="TCP上传文件"></a>TCP上传文件</h4><p>客户端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPUploadFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        FileInputStream fis=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress serverIp = InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line">            socket= <span class="keyword">new</span> Socket(serverIp,port);</span><br><span class="line"></span><br><span class="line">            fis= <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/main/resources/thYRKQ7U7R.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            os= socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len=fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通知服务端，已经传输完毕</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line">            bos= <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> len1=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer1=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len1=is.read(buffer1))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                bos.write(buffer1,<span class="number">0</span>,len1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(bos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.TCPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 16:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPDownload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket serverSocket=<span class="keyword">null</span>;</span><br><span class="line">        Socket socket=<span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket= <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">            socket= serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            fos= <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/main/resources/img.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在传输完毕后，向客户端发送消息</span></span><br><span class="line">            os= socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;接受完毕，断开连接&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(serverSocket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>发送消息</p><p>发送端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.UDPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//建立一个socket</span></span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送内容</span></span><br><span class="line">            String msg=<span class="string">&quot;服务器，你好&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送给谁</span></span><br><span class="line">            InetAddress address = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> port=<span class="number">9090</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//数据，数据的长度起始，要发送给谁</span></span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(), <span class="number">0</span>, msg.getBytes().length, address, port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送包</span></span><br><span class="line">            socket.send(packet);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.UDPDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 17:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开放端口</span></span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//接收数据包</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//阻塞接收</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line"></span><br><span class="line">            System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>, packet.getLength()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注：</strong>UDP中不存在客户端和服务端的区别，上面代码只是为了凸显出区别</p><h4 id="实现向某个端口发送消息"><a href="#实现向某个端口发送消息" class="headerlink" title="实现向某个端口发送消息"></a>实现向某个端口发送消息</h4><p>发送端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 23:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpChatRoom1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket(<span class="number">9001</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取输入数据</span></span><br><span class="line">            br= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] datas = data.getBytes();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>),<span class="number">9002</span>);</span><br><span class="line"></span><br><span class="line">                socket.send(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(data))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(br!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-06 23:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpChatRoom2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket= <span class="keyword">new</span> DatagramSocket(<span class="number">9002</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="comment">//接收数据</span></span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length, InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), <span class="number">9001</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//阻塞接收</span></span><br><span class="line">                socket.receive(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                String words = <span class="keyword">new</span> String(data, <span class="number">0</span>, data.length);</span><br><span class="line">                String check = <span class="keyword">new</span> String(data, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">                System.out.println(words);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(check))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在线聊天：两个人既可以是接收方也可以是发送方（多线程）"><a href="#在线聊天：两个人既可以是接收方也可以是发送方（多线程）" class="headerlink" title="在线聊天：两个人既可以是接收方也可以是发送方（多线程）"></a>在线聊天：两个人既可以是接收方也可以是发送方（多线程）</h4><p>TalkeSend.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-07 0:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fromPort;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line">    <span class="keyword">private</span> String sendIp;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader br=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkSend</span><span class="params">(<span class="keyword">int</span> fromPort,<span class="keyword">int</span> toPort,String sendIp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket=<span class="keyword">new</span> DatagramSocket(fromPort);</span><br><span class="line">            <span class="keyword">this</span>.fromPort=fromPort;</span><br><span class="line">            <span class="keyword">this</span>.toPort=toPort;</span><br><span class="line">            <span class="keyword">this</span>.sendIp=sendIp;</span><br><span class="line">            br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] info = data.getBytes();</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(info, <span class="number">0</span>, info.length,<span class="keyword">new</span> InetSocketAddress(sendIp,toPort));</span><br><span class="line"></span><br><span class="line">                socket.send(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(data))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(br!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TalkReceive.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.chat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-07 0:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String receiveIp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> receivePort;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(String receiveIp, <span class="keyword">int</span> receivePort)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.receiveIp = receiveIp;</span><br><span class="line">            <span class="keyword">this</span>.receivePort = receivePort;</span><br><span class="line">            socket=<span class="keyword">new</span> DatagramSocket(<span class="keyword">this</span>.receivePort);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line"></span><br><span class="line">                socket.receive(packet);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line"></span><br><span class="line">                String info = <span class="keyword">new</span> String(data, <span class="number">0</span>, data.length);</span><br><span class="line"></span><br><span class="line">                String check = <span class="keyword">new</span> String(data, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                String hostName = packet.getAddress().getHostName();</span><br><span class="line"></span><br><span class="line">                System.out.println(hostName+<span class="string">&quot;:&quot;</span>+info);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(check))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Talker1.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Talker1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">9999</span>,<span class="number">9001</span>,<span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="string">&quot;localhost&quot;</span>,<span class="number">9003</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Talker2.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Talker2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">9002</span>,<span class="number">9003</span>,<span class="string">&quot;localhost&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="string">&quot;localhost&quot;</span>,<span class="number">9001</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="URL：统一资源定位符"><a href="#URL：统一资源定位符" class="headerlink" title="URL：统一资源定位符"></a>URL：统一资源定位符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/helloworld/index.jsp?username=zhangsan&amp;password=1562&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取协议</span></span><br><span class="line">            System.out.println(url.getProtocol());</span><br><span class="line">            <span class="comment">//主机ip</span></span><br><span class="line">            System.out.println(url.getHost());</span><br><span class="line">            <span class="comment">//主机端口</span></span><br><span class="line">            System.out.println(url.getPort());</span><br><span class="line">            <span class="comment">//文件</span></span><br><span class="line">            System.out.println(url.getPath());</span><br><span class="line">            <span class="comment">//全路径</span></span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line">            <span class="comment">//参数</span></span><br><span class="line">            System.out.println(url.getQuery());</span><br><span class="line">            System.out.println(url.getUserInfo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="用URL下载资源"><a href="#用URL下载资源" class="headerlink" title="用URL下载资源"></a>用URL下载资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjy.url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-07 14:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDownLoad</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpURLConnection urlConnection=<span class="keyword">null</span>;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/netsource/SecurityFile.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            urlConnection= (HttpURLConnection)url.openConnection();</span><br><span class="line"></span><br><span class="line">            String file = url.getFile();</span><br><span class="line">            String fileName=file.substring(file.lastIndexOf(<span class="string">&quot;/&quot;</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            is= urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">            fos= <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/main/resources/loadsource/&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(urlConnection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建cdh</title>
      <link href="/2021/08/03/%E6%90%AD%E5%BB%BAcdh/"/>
      <url>/2021/08/03/%E6%90%AD%E5%BB%BAcdh/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7部署CDH6-3-2集群"><a href="#Centos7部署CDH6-3-2集群" class="headerlink" title="Centos7部署CDH6.3.2集群"></a>Centos7部署CDH6.3.2集群</h1><h3 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h3><p>官方文档：<a href="https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_requirements_supported_versions.html">https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_requirements_supported_versions.html</a></p><h3 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h3><h3 id="1、硬件"><a href="#1、硬件" class="headerlink" title="1、硬件"></a>1、硬件</h3><p>Linux发行版本：CentOS 7.6</p><p>查看Linux系统版本命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsb_release -a <span class="comment">#适用于所有的Linux发行版，包括RedHat、SUSE、Debian…等发行版。</span></span><br><span class="line">cat /etc/redhat-release <span class="comment">#只适合Redhat系的Linux</span></span><br><span class="line">cat /etc/issue <span class="comment">#适用于所有的Linux发行版</span></span><br></pre></td></tr></table></figure><p>查看Linux内核版本命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>查看内存大小</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -m <span class="comment">#按M显示</span></span><br><span class="line">free -g <span class="comment">#按G显示</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>公网IP</th><th>内网IP</th><th>Host</th><th>CPU</th><th>Memory</th><th>DIsk</th></tr></thead><tbody><tr><td>47.97.81.73</td><td>172.16.3.40</td><td>bigdata01</td><td>2核</td><td>16G</td><td>100G</td></tr><tr><td>101.37.78.42</td><td>172.16.3.39</td><td>bigdata02</td><td>2核</td><td>8G</td><td>100G</td></tr><tr><td>47.97.81.53</td><td>172.16.3.41</td><td>bigdata03</td><td>2核</td><td>8G</td><td>100G</td></tr></tbody></table><h3 id="2、安装包下载"><a href="#2、安装包下载" class="headerlink" title="2、安装包下载"></a>2、安装包下载</h3><p><strong>CM6.3.1</strong></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-db-2-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/cloudera-manager-server-db-2-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/enterprise-debuginfo-6.3.1-1466458.el7.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/enterprise-debuginfo-6.3.1-1466458.el7.x86_64.rpm</a></p><p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm">https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/RPMS/x86_64/oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm</a></p><p><strong>CDH6.3.2  Parcel</strong></p><p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel">https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel</a></p><p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el6.parcel.sha256">https://archive.cloudera.com/cdh6/6.3.2/parcels/CDH-6.3.2-1.cdh6.3.2.p0.1605554-el6.parcel.sha256</a></p><p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/manifest.json">https://archive.cloudera.com/cdh6/6.3.2/parcels/manifest.json</a></p><p> <strong>MySQL  JDBC  jar</strong></p><p><a href="http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar">http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar</a></p><p><strong>ext-2.2.zip</strong>解决oozie web UI报错问题</p><p><a href="http://archive.cloudera.com/gplextras/misc/ext-2.2.zip">http://archive.cloudera.com/gplextras/misc/ext-2.2.zip</a></p><p>下载后上传cm6.3.1和cdh6.3.2这两个目录到hadoop01主节点的/root（可自己选择）目录</p><h3 id="三、环境准备"><a href="#三、环境准备" class="headerlink" title="三、环境准备"></a>三、环境准备</h3><p>所有节点先安装一些实用的小工具</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装vim编辑器</span></span><br><span class="line">yum install -y vim</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.安装lrzsz文件传输工具</span></span><br><span class="line">yum -y install lrzsz</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.安装wget文件下载工具</span></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.安装netstat，查看端口监听状况：   netstat -ntlp | grep 端口号</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.下载unzip解压工具，解压命令：  uzip 压缩包.zip -d 解压目录</span></span><br><span class="line">yum install -y unzip zip</span><br></pre></td></tr></table></figure><h3 id="1、关闭防火墙"><a href="#1、关闭防火墙" class="headerlink" title="1、关闭防火墙"></a>1、关闭防火墙</h3><p><strong>所有节点都需要执行</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.临时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.永久关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.临时开启防火墙</span></span><br><span class="line"><span class="comment">#systemctl start firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.开机启用防火墙</span></span><br><span class="line"><span class="comment">#systemctl enable firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#临时关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment">#永久关闭selinux</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line"><span class="comment">#将SELINUX=enforcing改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看selinux状态</span></span><br><span class="line">getenforce 0</span><br></pre></td></tr></table></figure><h4 id="2、修改主机名"><a href="#2、修改主机名" class="headerlink" title="2、修改主机名"></a>2、修改主机名</h4><p><strong>所有节点都要执行，修改后需要重启节点</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br><span class="line"><span class="comment">#分别改名为</span></span><br><span class="line">bigdata01.baicdt.com</span><br><span class="line">bigdata02.baicdt.com</span><br><span class="line">bigdata03.baicdt.com</span><br></pre></td></tr></table></figure><h4 id="3、配置hosts文件"><a href="#3、配置hosts文件" class="headerlink" title="3、配置hosts文件"></a>3、配置hosts文件</h4><p><code>vim /etc/hosts</code></p><p><strong>所有节点都要配置</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">172.16.3.40 bigdata01.baicdt.com        bigdata01</span><br><span class="line">172.16.3.41 bigdata03.baicdt.com        bigdata03</span><br><span class="line">172.16.3.39 bigdata02.baicdt.com        bigdata02</span><br></pre></td></tr></table></figure><h4 id="4、配置免密登录"><a href="#4、配置免密登录" class="headerlink" title="4、配置免密登录"></a>4、配置免密登录</h4><p><em><strong>第一步：三台节点生成公钥与私钥</strong></em></p><p>在三台机器执行以下命令，生成公钥与私钥</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行下面的命令之后，要连续按三个回车</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><em><strong>第二步：拷贝公钥到同一台节点</strong></em></p><p>三台机器将拷贝公钥到第一台服务器，三台服务器执行命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-copy-id hadoop01</span><br></pre></td></tr></table></figure><p><em><strong>第三步：复制第一台服务器的认证到其他服务器</strong></em></p><p>将第一台机器的公钥拷贝到其他机器上，在第一台机器上面执行以下命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp /root/.ssh/authorized_keys hadoop02:/root/.ssh</span><br><span class="line">scp /root/.ssh/authorized_keys hadoop03:/root/.ssh</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">ssh-copy-id root@xxx</span><br></pre></td></tr></table></figure><p>###5、设置时间同步</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看时区</span></span><br><span class="line">date-</span><br><span class="line"><span class="comment">#设置时区为Asia/Shanghai</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否安装了ntpd的服务</span></span><br><span class="line">rpm -qa  | grep  ntpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果没有安装,可以进行在线安装</span></span><br><span class="line">yum -y install ntp</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动ntpd的服务</span></span><br><span class="line">service  ntpd  start</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置ntpd的服务开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ntpd的服务是否启动</span></span><br><span class="line">service  ntpd  status</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置定时任务</span></span><br><span class="line"><span class="comment">#与阿里云服务器进行时钟同步</span></span><br><span class="line">crontab  -e</span><br><span class="line"><span class="comment">#设置的内容如下</span></span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate -u ntp4.aliyun.com;</span><br></pre></td></tr></table></figure><p>设置成功后会一直出现<code>You have new mail in /var/spool/mail/root</code>的邮件提示，可使用下面命令关闭邮件提示</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;unset MAILCHECK&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="6、主节点bigdata01部署MySQL5-7"><a href="#6、主节点bigdata01部署MySQL5-7" class="headerlink" title="6、主节点bigdata01部署MySQL5.7"></a>6、主节点bigdata01部署MySQL5.7</h3><h4 id="第一步：彻底卸载系统原装的MySQL"><a href="#第一步：彻底卸载系统原装的MySQL" class="headerlink" title="第一步：彻底卸载系统原装的MySQL"></a>第一步：彻底卸载系统原装的MySQL</h4><p>1.使用以下命令查看当前安装mysql情况，查找以前是否装有mysql</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p>2.如果查询到已安装mysql需停止mysql服务并删除之前安装的mysql</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#停止mysql服务</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除软件命令</span></span><br><span class="line">rpm -e –nodeps 包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果上面命令提示依赖包错误，则使用以下命令尝试：</span></span><br><span class="line">rpm -ev 包名 --nodeps</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果还报错：error: %preun(xxxxxx) scriptlet failed, exit status 1，则用以下命令尝试：</span></span><br><span class="line">rpm -e --noscripts 包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#最终再使用rpm -qa|grep -i mysql命令，查询不到结果则证明mysql已卸载</span></span><br></pre></td></tr></table></figure><p>3.查找之前老版本mysql的目录、并且删除老版本mysql的文件和库</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找卸载残留的mysql的目录</span></span><br><span class="line">find / -name mysql    <span class="comment">#然后使用 rm -rf 将查询到的目录全部删除</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除老版本mysql的配置文件</span></span><br><span class="line">rm -rf /etc/my.cnf</span><br><span class="line">rm -rf /etc/my.cnf.d</span><br></pre></td></tr></table></figure><h4 id="第二步：yum源设置为阿里源"><a href="#第二步：yum源设置为阿里源" class="headerlink" title="第二步：yum源设置为阿里源"></a>第二步：yum源设置为阿里源</h4><p>使用阿里的镜像源安装MySQL时下载速度比较快</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.备份原镜像文件，便于后期恢复</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.下载阿里云的CentOS-Base.repo 到/etc/yum.repos.d/</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 清除缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h4 id="第三步：下载配置MySQL的rpm安装包"><a href="#第三步：下载配置MySQL的rpm安装包" class="headerlink" title="第三步：下载配置MySQL的rpm安装包"></a>第三步：下载配置MySQL的rpm安装包</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /baicdt/softwares/mysql_rpm</span><br><span class="line"><span class="built_in">cd</span> /baicdt/softwares/mysql_rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里下载的是5.7的版本</span></span><br><span class="line"><span class="comment">#下载并安装MySQL官方的 Yum Repository</span></span><br><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">##2.安装mysql源</span></span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装MySQL</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><h4 id="第四步：启动mysql服务"><a href="#第四步：启动mysql服务" class="headerlink" title="第四步：启动mysql服务"></a>第四步：启动mysql服务</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.临时启动mysql服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.开机启动mysql服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查看MySQL的启动状态</span></span><br><span class="line">systemctl status mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查看mysql进程是否正常开启</span></span><br><span class="line">ps -le | grep mysqld</span><br></pre></td></tr></table></figure><h4 id="第五步：修改mysql中root本地登录密码"><a href="#第五步：修改mysql中root本地登录密码" class="headerlink" title="第五步：修改mysql中root本地登录密码"></a>第五步：修改mysql中root本地登录密码</h4><p>mysql安装完成之后，在<code>/var/log/mysqld.log</code>文件中给root生成了一个默认密码。通过以下命令找到密码：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-- 登录MySQL，使用刚才找到的密码</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">-- 修改root用户密码（二选一）</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Wsygzgr_2020&#x27;</span>;</span><br></pre></td></tr></table></figure><p> 这里有个问题，新密码设置的时候如果设置的过于简单会报错：</p><img src="/2021/08/03/%E6%90%AD%E5%BB%BAcdh/image-20210803172929405.png" class title="image-20210803172929405"><p> MySQL完整的初始密码规则可以通过如下命令查看：</p><p><code>show variables like &#39;%validate_password%&#39;;</code></p><img src="/2021/08/03/%E6%90%AD%E5%BB%BAcdh/image-20210803173314576.png" class title="image-20210803173314576"><p>可以修改里面的值来修改密码策略</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line">mysql&gt; <span class="built_in">set</span> global validate_password_length=1;</span><br></pre></td></tr></table></figure><p>但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y remove mysql57-community-release-el7-10.noarch</span><br></pre></td></tr></table></figure><h4 id="第六步：修改mysql配置文件"><a href="#第六步：修改mysql配置文件" class="headerlink" title="第六步：修改mysql配置文件"></a>第六步：修改mysql配置文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf   </span><br></pre></td></tr></table></figure><p>在配置文件中添加下面的内容：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为服务器是测试环境，为了方便记mysql密码，关闭了密码策略。如果是生产环境，则不建议修改密码策略</span></span><br><span class="line">validate_password=off</span><br><span class="line"></span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br></pre></td></tr></table></figure><p>重新启动mysql服务使配置生效：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新设置mysql密码为123456</span></span><br><span class="line">mysql -u root -pWsygzgr_2020</span><br></pre></td></tr></table></figure><p>修改root用户密码</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>MySQL默认配置文件路径：</p><ul><li>配置文件：   /etc/my.cnf</li><li>日志文件：   /var/log//var/log/mysqld.log</li><li>服务启动脚本： /usr/lib/systemd/system/mysqld.service</li><li>socket文件：  /var/run/mysqld/mysqld.pid</li></ul><h4 id="第七步：允许root用户远程登录"><a href="#第七步：允许root用户远程登录" class="headerlink" title="第七步：允许root用户远程登录"></a>第七步：允许root用户远程登录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><strong>以下内容了解</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-- 指定特定的IP，开启root用户远程连接</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;指定的IP&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root用户的密码&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">-- 一般为了安全起见，会创建专用的远程访问用户</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;dadeity&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;daDeity@163.com&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h4 id="第八步：创建CDH源数据库、用户、服务的数据库"><a href="#第八步：创建CDH源数据库、用户、服务的数据库" class="headerlink" title="第八步：创建CDH源数据库、用户、服务的数据库"></a>第八步：创建CDH源数据库、用户、服务的数据库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE scm DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;scm&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;scm&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON scm.* TO <span class="string">&#x27;scm&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;scm&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;scm&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;scm&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE amon DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;amon&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;amon&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON amon.* TO <span class="string">&#x27;amon&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;amon&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;amon&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;amon&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE hive DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;hive&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON hive.* TO <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hive&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hive&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE hue DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;hue&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;hue&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON hue.* TO <span class="string">&#x27;hue&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hue&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;hue&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hue&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE oozie DEFAULT CHARACTER SET utf8;</span><br><span class="line">CREATE USER <span class="string">&#x27;oozie&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED BY <span class="string">&#x27;oozie&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON oozie.* TO <span class="string">&#x27;oozie&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;oozie&#x27;</span>; </span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;oozie&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;oozie&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">-- 刷新mysql的权限列表 </span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="7、创建本地YUM仓库"><a href="#7、创建本地YUM仓库" class="headerlink" title="7、创建本地YUM仓库"></a>7、创建本地YUM仓库</h3><p>确保已经把cm6.3.1、cdh6.3.2、mysql-connector-java-5.1.46.jar和ext-2.2.zip已经上传到了bigdata01服务器的/root(写自己的)目录下</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y createrepo</span><br><span class="line"><span class="built_in">cd</span> /root/cm6.3.1/</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：下面的命令最后带一个点，最后会生成一个repodata目录</span></span><br><span class="line">createrepo .</span><br></pre></td></tr></table></figure><p><strong>配置Web服务器</strong></p><p>将cdh6.3.2目录和cm6.3.1目录 移动到/var/www/html目录下, 使得用户可以通过HTTP访问这些rpm包。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在bigdata01服务器下操作</span></span><br><span class="line"><span class="built_in">cd</span> /root/cdh6.3.2</span><br><span class="line">mv CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha256 CDH-6.3.2-1.cdh6.3.2.p0.1605554-el7.parcel.sha</span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">mkdir -p /var/www/html</span><br><span class="line">mv cdh6.3.2 /var/www/html</span><br><span class="line">mv cm6.3.1 /var/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装httpd服务</span></span><br><span class="line">yum install -y httpd</span><br><span class="line"><span class="comment">#启动httpd服务</span></span><br><span class="line">systemctl start httpd</span><br><span class="line"><span class="comment">#设置httpd服务开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line"><span class="comment">#查看httpd服务是否启动</span></span><br><span class="line">ps -ef | grep httpd</span><br><span class="line"></span><br><span class="line">vim /etc/yum.repos.d/os.repo</span><br><span class="line"><span class="comment">#以下为文件内容</span></span><br><span class="line">[osrepo]</span><br><span class="line">name=os_repo</span><br><span class="line">baseurl=http://hadoop01.baicdt.com/cm6.3.1</span><br><span class="line">enabled=<span class="literal">true</span></span><br><span class="line">gpgcheck=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将os.repo文件copy到另外两台服务器上</span></span><br><span class="line"><span class="comment">#因为默认端口为22,所以需要指定端口号</span></span><br><span class="line">scp -P 9122 os.repo bigdata01:/etc/yum.repos.d/os.repo</span><br><span class="line">scp -P 9122 os.repo bigdata02:/etc/yum.repos.d/os.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#所有服务器都执行</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line"><span class="comment">#hadoop01主节点执行</span></span><br><span class="line">    vim /etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="comment">#在&lt;IfModule mime_module&gt;中修改以下内容</span></span><br><span class="line"><span class="comment">#把第284行的 AddType application/x-gzip .gz .tgz 修改为: </span></span><br><span class="line">AddType application/x-gzip .gz .tgz .parcel</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启httpd服务 </span></span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p>经过以上配置，下面网址可正常访问</p><p><a href="http://bigdata01.baicdt.com/cdh6.3.2/">http://bigdata01.baicdt.com/cdh6.3.2/</a><br><a href="http://bigdata01.baicdt.com/cm6.3.1/">http://bigdata01.baicdt.com/cm6.3.1/</a></p><h3 id="8、所有服务器安装JDK"><a href="#8、所有服务器安装JDK" class="headerlink" title="8、所有服务器安装JDK"></a>8、所有服务器安装JDK</h3><p><strong>第一步：</strong>安装官方提供的JDK</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y oracle-j2sdk1.8-1.8.0+update181-1.x86_64</span><br></pre></td></tr></table></figure><p><strong>第二步：</strong>配置jdk的环境变量</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><strong>第三步：</strong>添加mysql驱动包</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/share/java</span><br><span class="line">mv /root/mysql-connector-java-5.1.46.jar /usr/share/java/</span><br><span class="line"><span class="built_in">cd</span> /usr/share/java/</span><br><span class="line">mv mysql-connector-java-5.1.46.jar mysql-connector-java.jar</span><br></pre></td></tr></table></figure><p>注意：以上三步在所有服务器都要配置</p><h3 id="四、Cloudera-Manager-部署"><a href="#四、Cloudera-Manager-部署" class="headerlink" title="四、Cloudera Manager 部署"></a>四、Cloudera Manager 部署</h3><h4 id="第一步：安装CM-server-及agent"><a href="#第一步：安装CM-server-及agent" class="headerlink" title="第一步：安装CM server 及agent"></a>第一步：安装CM server 及agent</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装python27，解决安装过程中Hue无法访问数据库问题</span></span><br><span class="line">yum install -y centos-release-scl</span><br><span class="line">yum install -y python27 python27-devel</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum -y install cloudera-manager-daemons</span><br><span class="line">yum -y install cloudera-manager-agent</span><br><span class="line"></span><br><span class="line"><span class="comment">#仅hadoop01服务器安装cloudera-manager-server</span></span><br><span class="line">yum -y install cloudera-manager-server</span><br></pre></td></tr></table></figure><h4 id="第二步：所有节点修改agent配置"><a href="#第二步：所有节点修改agent配置" class="headerlink" title="第二步：所有节点修改agent配置"></a>第二步：所有节点修改agent配置</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/cloudera-scm-agent/config.ini</span><br><span class="line"><span class="comment">#修改文件中server_host的属性值</span></span><br><span class="line">server_host=bigdata01.baicat.com</span><br></pre></td></tr></table></figure><h4 id="第三步：初始化scm数据库"><a href="#第三步：初始化scm数据库" class="headerlink" title="第三步：初始化scm数据库"></a>第三步：初始化scm数据库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hadoop01主节点执行</span></span><br><span class="line">/opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scm scm</span><br></pre></td></tr></table></figure><p>结果为：<code>All done, your SCM database is configured correctly!</code>，表示初始化成功。</p><h4 id="第四步：启动CM-server及agent"><a href="#第四步：启动CM-server及agent" class="headerlink" title="第四步：启动CM server及agent"></a>第四步：启动CM server及agent</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bigdata01主节点启动CM server</span></span><br><span class="line">systemctl start cloudera-scm-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动日志目录为/var/log/cloudera-scm-server/ </span></span><br><span class="line"><span class="built_in">cd</span> /var/<span class="built_in">log</span>/cloudera-scm-server/ </span><br><span class="line">tail cloudera-scm-server.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#所有节点启动CM agent</span></span><br><span class="line">systemctl start cloudera-scm-agent </span><br></pre></td></tr></table></figure><p>这里会报错，提示Jdk找不到，解决办法</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/java</span><br><span class="line">ln -s /opt/jdk1.8  /usr/java/default</span><br></pre></td></tr></table></figure><p><strong>web页面：</strong>     <a href="http://bigdata01:7180/">http://bigdata01:7180/</a></p><p><strong>默认登录账号：</strong>admin</p><p><strong>默认登录密码：</strong>admin</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 大数据 </category>
          
          <category> cdh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdh,大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索数数量</title>
      <link href="/2021/08/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%95%B0%E6%95%B0%E9%87%8F/"/>
      <url>/2021/08/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%95%B0%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数</p><p><strong>示例1：</strong></p><img src="/2021/08/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%95%B0%E6%95%B0%E9%87%8F/uniquebstn3.jpg" class title="img"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 19</code></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>思路一：</p><p>看到这道题目的第一个念头是用数学公式直接进行计算（后面确实也是通过公式计算通过），因为在数据结构这门课上，曾讲过这个计算二叉树种类的公式，所以自然而然的想到了用公式解决问题。（但感觉自己还是缺乏思考，没能想到用动态规划😀）</p><p><strong>卡塔兰数公式：</strong><br>$$<br>C0=1,Cn+1=2(2n+1)Cn/n+2<br>$$<br>使用这个方法时需要注意类型要使用long，<strong>不然会溢出，从而导致错误答案</strong></p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public int <span class="function"><span class="title">numTrees</span>(<span class="params">int n</span>)</span> &#123;</span><br><span class="line">    long num2=<span class="number">1</span>;</span><br><span class="line">    int temp=<span class="number">2</span>*n;</span><br><span class="line">    int temp1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>,j=<span class="number">1</span>; i &lt;n &amp;&amp;j&lt;=n; i++,j++) &#123;</span><br><span class="line">        num2*=temp;</span><br><span class="line">        <span class="keyword">if</span>(num2%j==<span class="number">0</span>)&#123;</span><br><span class="line">            num2=num2/j;</span><br><span class="line">            temp1=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            temp1*=j;</span><br><span class="line">        &#125;</span><br><span class="line">        temp--;</span><br><span class="line">    &#125;</span><br><span class="line">    long sum=num2/(temp1*(n+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        long C = 1;</span></span><br><span class="line">    <span class="comment">//        for (int i = 0; i &lt; n; ++i) &#123;</span></span><br><span class="line">    <span class="comment">//            C = C * 2 * (2 * i + 1) / (i + 2);</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        return (int) C;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (int)sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>思路二：</strong></p><p>动态规划解决：将一颗二叉搜索树，分为三部分，根节点，左子树和右子树，而每个不同的根节点，所能构成的二叉搜索树种数为左子树构成二叉搜索数的种类 * 右子树构成二叉搜索树的种类</p><p><strong>状态转移方程：</strong><br>$$<br>dp[i]=sum(dp[i-j]*dp[j-1])<br>i=1 … n<br>$$<br>i为当前的节点个数</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//n==0时，dp[n]=1;n==1时,dp[n]=1</span></span><br><span class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=i; j++) &#123;</span><br><span class="line">                dp[i]+=dp[i-j]*dp[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划,二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接模板</title>
      <link href="/2021/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/07/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="从properties文件中读取mysql配置信息，编写JDBCUtils"><a href="#从properties文件中读取mysql配置信息，编写JDBCUtils" class="headerlink" title="从properties文件中读取mysql配置信息，编写JDBCUtils"></a>从properties文件中读取mysql配置信息，编写JDBCUtils</h3><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>jdbc.properties</p><p>时区设置：<code>Asia/Shanghai</code></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">mjy600811</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/girls?useSSL=false&amp;serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br></pre></td></tr></table></figure><h4 id="JDBCUtils-java"><a href="#JDBCUtils-java" class="headerlink" title="JDBCUtils.java"></a>JDBCUtils.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        Properties prop=<span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String url = prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        String driver = prop.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSource</span><span class="params">(Connection conn, PreparedStatement pre, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pre.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> mysql连接 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql,模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp网站登录（简易）</title>
      <link href="/2021/07/31/jsp%E7%BD%91%E7%AB%99%E7%99%BB%E5%BD%95%EF%BC%88%E7%AE%80%E6%98%93%EF%BC%89/"/>
      <url>/2021/07/31/jsp%E7%BD%91%E7%AB%99%E7%99%BB%E5%BD%95%EF%BC%88%E7%AE%80%E6%98%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>实现功能</strong>：</p><p>实现一个简易的网站登录访问页面：页面只有在登录的时候才能访问，若未登录无法访问。</p><p><strong>主要知识点：</strong></p><ul><li>jsp跳转、servlet</li><li>filter过滤器</li></ul><h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jstl表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>LoginServlet.Java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        String us=(String)session.getAttribute(<span class="string">&quot;USER_SESSION&quot;</span>);</span><br><span class="line">        System.out.println(us);</span><br><span class="line">        <span class="comment">//判断是否登录：若登录则直接跳转到页面</span></span><br><span class="line">        <span class="keyword">if</span>(us==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(req.getParameter(<span class="string">&quot;username&quot;</span>)))&#123;</span><br><span class="line">                session.setAttribute(<span class="string">&quot;USER_SESSION&quot;</span>, session.getId());</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/filter/turnto/success.jsp&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;/filter/error/mistake.jsp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/filter/turnto/success.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LogoutServlet.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;USER_SESSION&quot;</span>);</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/filter/login/login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RequestFilter.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp=(HttpServletResponse) response;</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="keyword">if</span>(session.getAttribute(<span class="string">&quot;USER_SESSION&quot;</span>)==<span class="keyword">null</span>)&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/filter/login/login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录界面&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/filter/servlet/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>success.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;欢迎您，使用本产品&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;../index.jsp&quot;</span>&gt;首页&lt;/a&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;../servlet/logout&quot;</span> methods=<span class="string">&quot;get&quot;</span>&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;主页&lt;/h1&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/filter/login/login.jsp&quot;</span>&gt;登录&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>web.xml中配置过滤器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.mjy.filter.RequestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>RequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/turnto/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> Javaweb </category>
          
          <category> jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 登录过程,filter,jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子序列和</title>
      <link href="/2021/07/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/"/>
      <url>/2021/07/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1]</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例5：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-100000]</span><br><span class="line">输出：-100000</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><p><strong>思路：</strong></p><p>动态规划：根据题目中的条件推出状态转移方程</p><p><code>dp[i]=max(dp[i-1]+nums[i],nums[i])</code></p><p>及对当前元素判断之前的子序列和是否对其有增益，若有增益则dp[i-1]+nums[i];如无增益，则等于自身的值</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//状态转义方程max(dp[i-1]+nums[i],nums[i])：判断dp[i]对nums[i]是否是负增益，若为负增益则重置dp[i]的值</span></span><br><span class="line">        <span class="comment">//自己的错误思路：考虑的是nums[i]对dp[i]是否有增益导致状态转移方程出错</span></span><br><span class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i]=Math.max(dp[i-<span class="number">1</span>]+nums[i],nums[i]);</span><br><span class="line">            max=max&gt;dp[i]? max:dp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组,动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb验证码</title>
      <link href="/2021/07/27/Javaweb%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2021/07/27/Javaweb%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h4 id="后端实现验证码生成代码："><a href="#后端实现验证码生成代码：" class="headerlink" title="后端实现验证码生成代码："></a>后端实现验证码生成代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//让浏览器自动刷新</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>, <span class="number">30</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D graphics = (Graphics2D) image.getGraphics();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        graphics.setColor(Color.cyan);</span><br><span class="line">        graphics.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        graphics.setColor(Color.green);</span><br><span class="line">        graphics.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.CENTER_BASELINE,<span class="number">20</span>));</span><br><span class="line">        graphics.drawString(createRandomNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,resp.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取随机数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createRandomNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String s = random.nextInt(<span class="number">9999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuilder sbl = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> - s.length(); i++) &#123;</span><br><span class="line">            sbl.append(<span class="string">&quot;&quot;</span>+random.nextInt(<span class="number">9</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sbl.toString()+s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet,数字验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb文件下载</title>
      <link href="/2021/07/27/Javaweb%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2021/07/27/Javaweb%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="下载文件步骤"><a href="#下载文件步骤" class="headerlink" title="下载文件步骤"></a>下载文件步骤</h4><ul><li>获取下载文件的路径</li><li>下载的文件名</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区中</li><li>使用OutputStream将缓冲区的数据输出到客户端</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFileServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//获取文件的路径</span></span><br><span class="line">        String realPath =<span class="string">&quot;D:\\JavaLearn\\project\\Javaweb\\Javawebcode1\\httpServletResponse\\target\\classes\\img\\黑色.jpg&quot;</span>;</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//让浏览器能够支持（Content-Disposition）下载我们需要的东西,中文文件名需要使用URLEncoder编码，否则有可能乱码</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        <span class="comment">//获取文件输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">//获取输出流</span></span><br><span class="line">        ServletOutputStream os = resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] arr=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(arr))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(arr,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭输入输出流</span></span><br><span class="line">        os.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java后端 </category>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传,servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试题</title>
      <link href="/2021/07/26/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2021/07/26/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>请你谈谈网站是如何进行访问的：</strong></p><ol><li>在浏览器输入域名：回车</li><li>浏览器会查找本机的<strong>C:\Windows\System32\drivers\etc</strong>目录下的<strong>hosts文件</strong>中有没有这个域名的映射<ul><li>有：获取对应的ip地址，通过这个ip，我们可以访问到想要访问的web程序</li><li>没有：去DNS域名解析服务器中找是否存在输入域名，若找到，则返回ip并对该ip进行访问；若没找到，就返回未找到</li></ul></li></ol><p><strong>当浏览器中地址栏输入地址并回车的一瞬间到页面能够显示出来，经历了什么？</strong></p><p>作为客户端，浏览器接收到地址之后，首先会到windows系统文件hosts中查找是否有需要劫持的ip地址，若没有则需要询问DNS域名解析服务器该域名对应的ip地址。（DNS缓存）<br>浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存</p><p>获取到正确的ip地址后，客户端会与服务器建立TCP连接（三次握手），（网络层、数据链路层、物理层）</p><p>客户端向服务端发送请求，包含请求行、请求头、请求正文。多种请求方式（GET，POST、PUT等）</p><p>服务端处理请求，并返回响应，包含状态码、响应头、响应体</p><p>浏览器收到响应，解析渲染页面，展示出来</p><p>断开连接（http1.0短连接，http1.1长连接）</p><p><strong>请你聊聊重定向与转发的区别：</strong></p><img src="/2021/07/26/Java%E9%9D%A2%E8%AF%95%E9%A2%98/image-20210727000815878.png" class title="image-20210727000815878"><p>相同点：</p><ul><li>都能实现页面跳转</li></ul><p>不同点：</p><ul><li>请求转发的时候，url不会发生变化</li><li>重定向的时候，url地址栏会发生变化</li><li>重定向需要两次请求，请求转发需要一次请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Java </category>
          
          <category> Java面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试,Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列</title>
      <link href="/2021/07/25/%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2021/07/25/%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[[0,1],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>这个题目意思很简单易懂，就是获取所给数组的所有的排列方式，注意这里<strong>的所有</strong>，基本上涉及到求”所有”的题目都能通过回溯法解决</p><p>话不多说，贴代码</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回溯法（一般求所有情况下，回溯法）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullPermutation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FullPermutation test=<span class="keyword">new</span> FullPermutation();</span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(test.permute(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Deque&lt;Integer&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个标记数组，标记该元素是否已经使用过</span></span><br><span class="line">        <span class="keyword">int</span>[] flag=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        backtrack(nums,list,<span class="number">0</span>,deque,flag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums,List&lt;List&lt;Integer&gt;&gt; list,<span class="keyword">int</span> index,Deque&lt;Integer&gt; deque,<span class="keyword">int</span>[] flag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==nums.length)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> ArrayList&lt;&gt;(deque));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                deque.addLast(nums[i]);</span><br><span class="line">                flag[i]=<span class="number">1</span>;</span><br><span class="line">                backtrack(nums,list,index+<span class="number">1</span>,deque,flag);</span><br><span class="line">                deque.removeLast();</span><br><span class="line">                flag[i]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,回溯法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase简单学习</title>
      <link href="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Hbase简单记录"><a href="#Hbase简单记录" class="headerlink" title="Hbase简单记录"></a>Hbase简单记录</h1><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>Hbase是一个开源的、分布式的、版本化的非关系型数据库，它利用Hadoop分布式文件系统（HDFS）提供分布式数据存储。</p><p>HBase是一个可以进行随机访问的存取和检索数据的存储平台，存储结构化和半结构化的数据，因此一般的网站可以将网页内容和日志信息都存在HBase里。</p><p>如果数据量不是非常庞大，HBase甚至可以存储非结构化的数据。它不要求数据有预定义的模式，允许动态和灵活的数据模型，也不限制存储数据的类型。</p><p>HBase是非关系型数据库，它不具备关系型数据库的一些特点，例如，它不支持SQL的跨行事务，也不要求数据之间有严格的关系，同时它允许在同一列的不同行中存储不同类型的数据。</p><p>HBase是非惯性型数据库，它不具备关系型数据库的一些特点，是被设计成在一个服务器集群上运行的。</p><h4 id="HBase的特点："><a href="#HBase的特点：" class="headerlink" title="HBase的特点："></a>HBase的特点：</h4><ul><li><p>容量巨大</p><p>HBase的单表可以有百亿行，百万列，可以在横向和纵向两个维度插入数据，具有很大的弹性</p><p>当关系型数据库的单个表的记录在亿级时，查询和写入的性能都会呈现指数级下降，这种庞大的数据量对传统数据库来说是一种灾难，而HBase在限定某个列的情况下对于单表存储百亿甚至更多的数据都没有性能问题</p><p>HBase采用LSM树作为内部数据存储结构，这种结构会周期性地将较小文件合成大文件，以减少对磁盘的访问</p></li><li><p>列存储</p><p>行存储的一张表的数据都放在一起，但在列存储里是按照列分开保存的。在这种情况下，进行数据的插入和更新，行存储会相对容易。而进行行存储时，查询操作需要读取所有的数据，列存储则只需要读取相关列，可以大幅降低系统I/O吞吐量</p></li><li><p>稀疏性</p><p>HBase中的数据都是以字符串形式存储的，为空的列并不占用存储空间，因此HBase的列存储解决了数据稀疏性的问题，在很大程度上节省了存储开销。所以HBase通常可以设计成稀疏矩阵，同时这种方式比较接近实际的应用场景</p></li><li><p>扩展性强</p><p>HBase 工作在 HDFS 之上，理所当然地支持分布式表，也继承了 HDFS 的可扩展性。HBase 的扩展是<strong>横向</strong>的，横向扩展是指在扩展时不需要提升服务器本身的性能，只需<strong>添加服务器到现有集群</strong>即可。</p><p>HBase 表根据 <strong>Region 大小进行分区</strong>，<strong>分别存在集群中不同的节点上</strong>，当添加新的节点时，集群就重新调整，在新的节点启动 HBase 服务器，动态地实现扩展。这里需要指出，HBase 的扩展是<strong>热扩展</strong>，即在不停止现有服务的前提下，可以随时添加或者减少节点。</p></li><li><p>高可靠性</p></li></ul><h3 id="HDFS的原理"><a href="#HDFS的原理" class="headerlink" title="HDFS的原理"></a>HDFS的原理</h3><p>HDFS 是参考 Google 公司的 GFS 实现的，不管是 Google 公司的计算平台还是 Hadoop 计算平台，都是运行在大量普通商用计算机上的，这些计算机节点很容易出现硬件故障，而这两种计算平台都将硬件故障作为常态，通过软件设计来保证系统的可靠性。</p><h4 id="HDFS的基本架构"><a href="#HDFS的基本架构" class="headerlink" title="HDFS的基本架构"></a>HDFS的基本架构</h4><p><code>HDFS</code> 主要由 3 个组件构成，分别是 <code>NameNode、SecondaryNameNode 和 DataNode。</code></p><p><code>HDFS</code> 是以 Master/Slave 模式运行的，其中，<code>NameNode </code>和<code> SecondaryNameNode</code> 运行在 Master 节点 上，而 <code>DataNode </code>运行在 Slave 节点上，所以 <code>HDFS </code>集群一般由一个 <code>NameNode</code>、一个<code>SecondaryNameNode</code>和许多 <code>DataNode </code>组成，其架构如下图所示。</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210720151549111.png" class title="image-20210720151549111"><p><a href="http://c.biancheng.net/view/6502.html">HDFS简明入门教程 (biancheng.net)</a></p><h4 id="HBase逻辑结构"><a href="#HBase逻辑结构" class="headerlink" title="HBase逻辑结构"></a>HBase逻辑结构</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210720185905040.png" class title="image-20210720185905040"><h4 id="HBase物理结构："><a href="#HBase物理结构：" class="headerlink" title="HBase物理结构："></a>HBase物理结构：</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210720212833190.png" class title="image-20210720212833190"><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p><code>Name Space</code>:</p><p>命名空间，类似于关系型数据库的database概念，每个命名空间下有多个表。HBase有两个自带的命名空间，分别是hbase和default，HBase中存放的是HBase内置的表，default表是用户默认使用的命名空间</p><p><code>Region</code>:类似于关系型数据库的表的概念。不同的是，HBase定义表时只需要声明列族即可，不需要声明具体的类。这意味着，往HBase写入数据时，字段可以<strong>动态</strong>、<strong>按需</strong>指定</p><p><code>Row</code>:HBase表中的每行数据都由一个RowKey和多个Column（列组成），数据是按照RowKey的字典顺序存储的，并且查询数据时只能根据RowKey进行检索。</p><p><code>Column</code>:HBase中的每个列都由Column Family(列族)和Column  Qualifier（列限定符）进行限定，例如info：name，info:age。建表时，只需指明列族，而列限定符无需预先定义。</p><p><code>Time Stamp</code></p><p>用于标识数据的不同版本(version)，每条数据写入时，如果不指定时间戳，系统会自动为其加上该字段，其值为写入HBase的时间</p><p><code>Cell</code>：</p><p>由{rowKey，column Family：column Qualifier，time Stamp} 唯一确定的单元。cell中的数据是没有类型的，全部是字节码形式存储</p><h4 id="HBase架构："><a href="#HBase架构：" class="headerlink" title="HBase架构："></a>HBase架构：</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721132312788.png" class title="image-20210721132312788"><h4 id="HBase的shell操作"><a href="#HBase的shell操作" class="headerlink" title="HBase的shell操作"></a>HBase的shell操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/hbase shell <span class="comment">#命令行界面</span></span><br></pre></td></tr></table></figure><p>删除写错的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+delete</span><br></pre></td></tr></table></figure><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/bigdata/data/Hbase/Hbase的学习/image-20210721151254543.png" alt="image-20210721151254543" style="zoom:200%;"><p>使用shell报错</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721151938883.png" class title="image-20210721151938883"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#先用命令查看安全模式状态</span><br><span class="line">bin/hdfs dfsadmin -safemode get</span><br><span class="line">#发现安全模式开启，关闭即可</span><br><span class="line">bin/hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure><p>安全模式：</p><p>当分布式文件系统（HDFS）开始启动时，会有安全模式，HDFS处在安全模式下，文件系统中不允许修改和删除的操作。</p><p>安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。</p><p>创建表的语句</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cretae <span class="string">&#x27;表名&#x27;</span>,<span class="string">&#x27;列族名&#x27;</span>,<span class="string">&#x27;列族名&#x27;</span></span><br></pre></td></tr></table></figure><p>修改表信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改versions</span><br><span class="line">alter &#x27;表名&#x27;,&#123;NAME=&gt;&#x27;列族名&#x27;,VERSIONS=&gt;3&#125;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看表</span><br><span class="line">list</span><br><span class="line">#先将表变为不可用</span><br><span class="line">disbale &#x27;表名&#x27;</span><br><span class="line">#再删除表</span><br><span class="line">drop &#x27;表名&#x27;</span><br></pre></td></tr></table></figure><p>命名空间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看命名空间</span><br><span class="line">list_namespace</span><br><span class="line">#创建命名空间</span><br><span class="line">create_namespace &#x27;命名空间名&#x27;</span><br><span class="line">#删除命名空间（首先得将里面的表删除）</span><br><span class="line">disable &#x27;命名空间:表名&#x27;</span><br><span class="line">drop &#x27;命名空间:表名&#x27;</span><br><span class="line">drop_namespace &#x27;命名空间&#x27;</span><br></pre></td></tr></table></figure><p>向表中插入数据</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721155900344.png" class title="image-20210721155900344"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">put <span class="string">&#x27;命名空间（默认为default）:表名&#x27;</span>,<span class="string">&#x27;row_key&#x27;</span>,<span class="string">&#x27;列族:列名&#x27;</span>,<span class="string">&#x27;值&#x27;</span></span><br></pre></td></tr></table></figure><p>scan</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721160444790.png" class title="image-20210721160444790"><p>get</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721160512874.png" class title="image-20210721160512874"><p>查看10个版本以内的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scan &#x27;表名&#x27;,&#123;RAW=&gt;true,VERSIONS=&gt;10&#125;</span><br></pre></td></tr></table></figure><p>delete</p><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721182714486.png" class title="image-20210721182714486"><h4 id="Hbase详细架构"><a href="#Hbase详细架构" class="headerlink" title="Hbase详细架构"></a>Hbase详细架构</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721220238386.png" class title="image-20210721220238386"><h4 id="Hbase写流程"><a href="#Hbase写流程" class="headerlink" title="Hbase写流程"></a>Hbase写流程</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210721205533542.png" class title="image-20210721205533542"><p>写流程：</p><ul><li>Client先访问zookeeper,获取hbase:meta表位于哪个Region Server</li><li>访问对应的Region Server,获取hbase:meta表，根据读请求的namespace:table/rowkey,查询楚目标数据位于哪个Region Server中的哪个Region中。并将该table的region信息以及meta表的位置信息缓存在meta cache，方便下次访问</li><li>与目标Region Server进行通信</li><li>将数据顺序写（追加）到WAL</li><li>将数据写入对应的MemStore，数据会在MemStore进行排序</li><li>向客户端发送ack</li><li>等达到MemStore的刷写时机后，将数据刷写到HFile</li></ul><h4 id="HBase读流程"><a href="#HBase读流程" class="headerlink" title="HBase读流程"></a>HBase读流程</h4><img src="/2021/07/23/HBase%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/image-20210722165440443.png" class title="image-20210722165440443"><h4 id="与Hive的集成"><a href="#与Hive的集成" class="headerlink" title="与Hive的集成"></a>与Hive的集成</h4><h4 id="HBase与Hive的对比"><a href="#HBase与Hive的对比" class="headerlink" title="HBase与Hive的对比"></a>HBase与Hive的对比</h4><p>Hive:</p><ul><li><p>数据仓库</p><p>Hive的本质其实就相当于将HDFS中已经存储的文件在MySQL中做了一个双射关系，以方便使用HQL去管理查询</p></li><li><p>用于数据分析、清洗</p><p>Hive适用于离线的数据分析和清洗，延迟较高</p></li><li><p>基于HDFS、MapReduce</p><p>Hive存储的数据依旧在DataNode上，编写的HQL语句终将是转换为MapReduce代码执行</p></li></ul><p><strong>HBase:</strong></p><ul><li><p>数据库</p><p>是一种面向列族存储的非关系型数据库</p></li><li><p>用于存储结构化和非结构化的数据</p><p>适用于单表非关系型数据的存储，不适合做关联查询，类似Join等操作</p></li><li><p>基于HDFS</p><p>数据持久化存储的体现形式是HFile，存放于DataNode中，被ResionServer以region的形式进行管理</p></li><li><p>延迟较低，接入在线业务使用</p><p>面对大量的企业数据，HBase可以直线单表大量数据的存储，同时提高了高效的数据访问速度</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 大数据 </category>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据,列式存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下一个排列</title>
      <link href="/2021/07/22/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
      <url>/2021/07/22/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须 原地 修改，只允许使用额外常数空间</p><p>**字典序:**字典序的下一个排列总是要比当前排列要大，除非该排列已经是最大的排列。要找到一个大于当前序列的新序列，且变大的幅度尽可能的小</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,1]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,5]</span><br><span class="line">输出：[1,5,1]</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><p>学习体会：开始把这个题读完了之后，整个人都是懵的，在反复独了几遍题目，发现还是读不懂后，选择看题解。。。</p><p>题解思路：</p><p>找到从右往左查找第一个不是递减的数，然后再从右到第一个不为递减的元素中找一个大于不为递减元素的值，并将这两个值交换，再从第一个不为递减的元素的位置到最后位置的元素反转一下，最终得到下一个排列</p><p>代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思想：字典序的下一个排列总是要比当前排列要大，除非该排列已经是最大的排列。要找到一个大于当前序列的新序列，且变大的幅度尽可能的小</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextPermutationDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NextPermutationDemo test=<span class="keyword">new</span> NextPermutationDemo();</span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        test.nextPermutation(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i=nums.length-<span class="number">2</span>,j=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//从后往前查找第一个不是降序排列的数</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span>&amp;&amp;nums[i]&gt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从后往前查找比上面查找的值大的元素，交换</span></span><br><span class="line">        <span class="keyword">while</span>(j&gt;i&amp;&amp;i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&gt;nums[i])&#123;</span><br><span class="line">                swap(nums,i,j);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reverseArr(nums,i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=arr[i];</span><br><span class="line">        arr[i]=arr[j];</span><br><span class="line">        arr[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseArr</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=start,right=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            swap(arr,left,right);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC基础学习</title>
      <link href="/2021/07/20/JUC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/07/20/JUC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="JUC简介"><a href="#JUC简介" class="headerlink" title="JUC简介"></a>JUC简介</h3><p>在Java中，线程部分是一个重点，本篇文章说的JUC也是关于线程的。JUC就是java.util.concurrent工具包的简称。这是一个处理线程的工具包，JDK1.5开始出现。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 后端 </category>
          
          <category> Java线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java,多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2021/07/15/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/2021/07/15/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述：</strong></p><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p><strong>示例1：</strong></p><img src="/2021/07/15/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/image-20210715115032300.png" class title="image-20210715115032300"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [4,3,2,1,4]</span><br><span class="line">输出：16</span><br></pre></td></tr></table></figure><p><strong>示例4：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：height = [1,2,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n = height.length</code></li><li><code>2 &lt;= n &lt;= 3 * 104</code></li><li><code>0 &lt;= height[i] &lt;= 3 * 104</code></li></ul><p><strong>题目解读：</strong></p><p>题目所给的数组，相当于每个元素就是一个坐标（i,ai）,这个坐标代表了所画的柱状图的最高点。而我们需要求的就是两个柱状图之间的最大面积（此面积的高为两个柱状图之间较小的那个高）。求长方形的面积就少不了长和宽，而最大面积的话就需要长和宽都尽量的大。这也是本题的难点，如何求得较大的长和宽。</p><p>这里选择使用双指针来进行枚举，一个指针指向开头，一个指针指向结尾。然后接下来需要考虑的问题就是如何移动指针来获得最大值，我们发现，无论怎么移动指针，所围成的面积的长度都会减少，在这种情况下，我们选择较小高的那个指针移动就能取得最大值。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea1</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=height.length;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">int</span> min=height[i]&lt;height[j]? height[i++]:height[j--];</span><br><span class="line">            max=max&gt;min*(j-i+<span class="number">1</span>)? max:min*(j-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安装</title>
      <link href="/2021/07/13/Java%E5%AE%89%E8%A3%85/"/>
      <url>/2021/07/13/Java%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h4><p>下载地址：</p><p>oracle官网：<a href>https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>进入页面后下载64位的包，jdk-8u291-linux-x64.tar.gz与jdk-8u291-linux-x64.rpm都可以</p><p>这里我下载的是<strong>jdk-8u291-linux-x64.tar.gz</strong></p><p>在linux下<code>/usr/local</code>目录下，使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir jdk<span class="comment">#文件名可以随便取</span></span><br></pre></td></tr></table></figure><p>将下载好的jdk-8u291-linux-x64.tar.gz通过xshell传输到linux下的<code>/usr/local/jdk</code>中</p><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230043661.png" class title="image-20210713230043661"><p>传输到文件目录下</p><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713225957847.png" class title="image-20210713225957847"><p>使用命令进行解压到当前目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf jdk-8u291-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230055548.png" class title="image-20210713230055548"><h4 id="编写配置文件，配置环境变量"><a href="#编写配置文件，配置环境变量" class="headerlink" title="编写配置文件，配置环境变量"></a>编写配置文件，配置环境变量</h4><p>使用命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>按”i”进入编辑模式，添加上下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk/jdk1.8.0_291</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br></pre></td></tr></table></figure><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230119200.png" class title="image-20210713230119200"><p>添加后，按“ESC”退出编辑模式，并<code>:wq</code>进行保存修改内容。（若没有使用修改内容不会保存）</p><p>最后还要使用命令,使配置的环境变量生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>安装完毕后，使用命令<code>java -version</code>查看是否安装成功</p><img src="/2021/07/13/Java%E5%AE%89%E8%A3%85/image-20210713230142680.png" class title="image-20210713230142680"><p>出现上面图片中的内容，说明安装成功</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux,Java安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos配置中心</title>
      <link href="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置文件介绍"><a href="#一、配置文件介绍" class="headerlink" title="一、配置文件介绍"></a>一、配置文件介绍</h2><h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><p>Spring Cloud Config为分布式系统的外部配置提供了服务端和客户端的支持方案。在配置的服务段你可以在所有环境中为应用程序管理外部属性的中心位置。客户端和服务端概念上的Spring Environment 和 PropertySource 抽象保持同步, 它们非常适合Spring应用程序，但是可以与任何语言中运行的应用程序一起使用。当应用程序在部署管道中从一个开发到测试直至进入生产时，您可以管理这些环境之间的配置，并确保应用程序在迁移时具有它们需要运行的所有内容。服务器存储后端的默认实现使用git，因此它很容易支持标记版本的配置环境，并且能够被管理内容的各种工具访问。很容易添加替代的实现，并用Spring配置将它们插入。</p><p>Spring Cloud Config 包含了Client和Server两个部分，server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，client通过接口获取数据、并依据此数据初始化自己的应用。Spring cloud使用git或svn存放配置文件，默认情况下使用git。</p><h4 id="Nacos替换Config"><a href="#Nacos替换Config" class="headerlink" title="Nacos替换Config"></a>Nacos替换Config</h4><p>Nacos 可以与 Spring, Spring Boot, Spring Cloud 集成，并能代替 Spring Cloud Eureka, Spring Cloud Config。通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更。</p><p><strong>应用场景</strong></p><p>在系统开发过程中，开发者通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成。配置变更是调整系统运行时的行为的有效手段。</p><p>如果微服务架构中没有使用统一配置中心时，所存在的问题：</p><p>- 配置文件分散在各个项目里，不方便维护</p><p>- 配置内容安全与权限</p><p>- 更新配置后，项目需要重启</p><p>nacos配置中心：系统配置的集中管理（编辑、存储、分发）、动态更新不重启、回滚配置（变更管理、历史版本管理、变更审计）等所有与配置相关的活动。</p><h4 id="读取Nacos配置中心的配置文件"><a href="#读取Nacos配置中心的配置文件" class="headerlink" title="读取Nacos配置中心的配置文件"></a>读取Nacos配置中心的配置文件</h4><ul><li><p>在Nacos创建同一配置文件</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713173521686.png" class title="image-20210713173521686"></li><li><p>输入配置信息及配置内容</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713173649714.png" class title="image-20210713173649714"></li><li><p>Data ID的完整规则格式</p><p><strong>${prefix}-${spring.profile.active}.${file-extension}</strong></p><p><strong>- prefix</strong> 默认为所属工程配置spring.application.name 的值（即：nacos-provider），也可以通过配置项 spring.cloud.nacos.config.prefix来配置。</p><p><strong>- spring.profiles.active=dev</strong> 即为当前环境对应的 profile。 注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</p><p><strong>- file-exetension</strong> 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</p><p><strong>注</strong>：使用Nacos的配置中心需要引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="对单个配置文件的读取"><a href="#对单个配置文件的读取" class="headerlink" title="对单个配置文件的读取"></a>对单个配置文件的读取</h4><p><strong>创建项目的bootstrap.properties/yml文件，用于定义一些一般不会变动的参数</strong></p><p>bootstrap.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置中心地址</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#若存在profile，则dataId的要加上该profile,proflie:dev(生产) 、test(测试)、prod(生产)</span></span><br><span class="line"><span class="comment">#spring.profiles.active=dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 该配置影响统一配置中心中的dataId</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-statistics</span></span><br></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-sta</span></span><br></pre></td></tr></table></figure><p><strong>补充：springboot配置文件加载顺序</strong></p><p>其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。推荐使用yml，更简洁。</p><p>bootstrap与application<br><strong>（1）加载顺序</strong><br>这里主要是说明application和bootstrap的加载顺序。</p><p>bootstrap.yml（bootstrap.properties）先加载<br>application.yml（application.properties）后加载<br>bootstrap.yml 用于应用程序上下文的引导阶段。</p><p>bootstrap.yml 由父Spring ApplicationContext加载。</p><p>父ApplicationContext 被加载到使用 application.yml 的之前。</p><p><strong>（2）配置区别</strong><br>bootstrap.yml 和application.yml 都可以用来配置参数。</p><p>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>application.yml 可以用来定义应用级别的。</p><h4 id="名称空间切换环境"><a href="#名称空间切换环境" class="headerlink" title="名称空间切换环境"></a>名称空间切换环境</h4><p>在实际开发中，通常有多套不同的环境（默认只有public），那么这个时候可以根据指定的环境来创建不同的 namespce，例如，开发、测试和生产三个不同的环境，那么使用一套 nacos 集群可以分别建以下三个不同的 namespace。以此来实现多环境的隔离。</p><p><strong>创建命名空间</strong>：</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713175003006.png" class title="image-20210713175003006"><p>在不同命名空间中，可以直接创建配置文件，也可以从其它命名空间中克隆配置（推荐）。</p><h4 id="多配置文件加载"><a href="#多配置文件加载" class="headerlink" title="多配置文件加载"></a>多配置文件加载</h4><p>在一些情况下需要加载多个配置文件。假如现在dev名称空间下有三个配置文件：service-statistics.properties、redis.properties、jdbc.properties</p><img src="/2021/07/13/nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image-20210713175320743.png" class title="image-20210713175320743"><p><strong>添加配置，加载多个配置文件</strong></p><p>properties格式：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 该配置影响统一配置中心中的dataId，之前已经配置过</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-statistics</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">13b5c197-de5b-47e7-9903-ec0538c9db01</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="string">redis.properties</span></span><br><span class="line"><span class="comment"># 开启动态刷新配置，否则配置文件修改，工程无法感知</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].data-id</span>=<span class="string">jdbc.properties</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.ext-config[1].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>yml格式：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment">#使用命名空间时需要填写</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">13b5c197-de5b-47e7-9903-ec0538c9db01</span></span><br><span class="line">        <span class="comment">#读取多个配置文件</span></span><br><span class="line">        <span class="attr">ext-config:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">redis.properties</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">dataId:</span> <span class="string">jdbc.properties</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="comment">#动态刷新配置，否则配置文件修改，无法感知</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-sta</span></span><br></pre></td></tr></table></figure><p>补充yml的一些书写规则</p><p>数组：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组</span></span><br><span class="line"><span class="attr">person:</span> </span><br><span class="line">  <span class="attr">name:</span> [<span class="string">zhangsan</span>,<span class="string">lisi</span>,<span class="string">wangwu</span>]</span><br><span class="line">  </span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">王五</span></span><br></pre></td></tr></table></figure><p>对象/Map</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="attr">person:</span> &#123; <span class="attr">name:</span> <span class="string">zhansan</span>,<span class="attr">age:</span> <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 后端学习 </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 配置中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三数之和</title>
      <link href="/2021/07/12/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2021/07/12/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><strong>题目</strong>：给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><p><strong>示例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>根据题目的描述，脑子中闪过的第一个念头就是三重循环枚举每一种类型，但O($n^3$)的时间复杂度，肯定是过不了的。实在想不出来。。就去看了题解，思想依旧是枚举的思想但题解通过双指针的方式降低了时间复杂度，时间复杂度为O($n^2$)。</p><p><strong>题解的双向指针的思想：</strong></p><p>首先把数组进行一次排序，方便后面进行枚举。排序过后，接下来就进行枚举，先进行第一层枚举，从数组的第一个元素进行枚举，将第一层遍历的下标定义为a；第二层枚举（定义下标为b）需要从比a大的元素开始且相连的两个元素不能相同（a也如此），其目的是避免重复的集合。例如[1,2,3,3,3,9]，若两个相邻的元素相同，a=0，b=2时，得到的集合为<code>[1,3]</code>,但当b=3时，得到的集合也为<code>[1,3]</code>这样就会导致所得的集合重复。解决重复的问题后，定义一个target：指第三层的枚举，也是双指针的其中之一。若a不变，b向右边移动，那么随着b的增大，第三层枚举的值是需要减小的，因此双指针正好能满足枚举要求。一个从小到大，一个从大到小，当双指针相等时结束时，跳出循环。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//预排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//枚举</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i-<span class="number">1</span>]==nums[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义一个指向最右端的指针</span></span><br><span class="line">            <span class="keyword">int</span> right=n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> target=-nums[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//枚举j</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//找到a+b+c&lt;=0的情况</span></span><br><span class="line">                <span class="keyword">while</span>(j&lt;right&amp;&amp;nums[j]+nums[right]&gt;target)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//若j==right那么后面不可能再有a+b+c&lt;=0且b&lt;c的情况</span></span><br><span class="line">                <span class="keyword">if</span>(j==right)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]+nums[right]==target)&#123;</span><br><span class="line">                    List&lt;Integer&gt; list1=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    list1.add(nums[i]);</span><br><span class="line">                    list1.add(nums[j]);</span><br><span class="line">                    list1.add(nums[right]);</span><br><span class="line"></span><br><span class="line">                    list.add(list1);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度分析：</strong></p><p>枚举的过程每一步中，「左指针」会向右移动一个位置（也就是题目中的 b），而「右指针」会向左移动若干个位置，这个与数组的元素有关，但我们知道它一共会移动的位置数为 N次，所以第二层枚举和第三层枚举的时间复杂度为O(n),枚举的复杂度为O($n^2$),预排序时间复杂度为O(nlogn)所以总的时间复杂度为O($n^2$)</p><p><strong>空间复杂度：</strong></p><p>只定义了一个List，空间复杂度O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法,leetcode,中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/10/hello-world/"/>
      <url>/2021/07/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen       9001;</span><br><span class="line">server_name  localhost;</span><br><span class="line"></span><br><span class="line">location ~ /eduService/ &#123;</span><br><span class="line">proxy_pass http://localhost:8001;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /eduoss/ &#123;</span><br><span class="line">proxy_pass http://localhost:8002;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /eduvod/ &#123;</span><br><span class="line">proxy_pass http://localhost:8003;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /educms/ &#123;</span><br><span class="line">proxy_pass http://localhost:8004;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /edumsm/ &#123;</span><br><span class="line">proxy_pass http://localhost:8005;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /educenter/ &#123;</span><br><span class="line">proxy_pass http://localhost:8160;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /api/ &#123;</span><br><span class="line">proxy_pass http://localhost:8160;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /eduorder/ &#123;</span><br><span class="line">proxy_pass http://localhost:8006;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /staservice/ &#123;</span><br><span class="line">proxy_pass http://localhost:8007;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /admin/acl/ &#123;</span><br><span class="line">proxy_pass http://localhost:8010;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
